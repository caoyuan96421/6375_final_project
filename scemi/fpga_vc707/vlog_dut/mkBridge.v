//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Wed May  4 01:42:17 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// PCIE_txp                       O     8
// PCIE_txn                       O     8
// DDR3_CLK_P                     O     1
// DDR3_CLK_N                     O     1
// DDR3_A                         O    15
// DDR3_BA                        O     3
// DDR3_RAS_N                     O     1
// DDR3_CAS_N                     O     1
// DDR3_WE_N                      O     1
// DDR3_RESET_N                   O     1
// DDR3_CS_N                      O     1
// DDR3_ODT                       O     1
// DDR3_CKE                       O     1
// DDR3_DM                        O     8
// leds                           O     8
// CLK_pci_sys_clk_p              I     1 clock
// CLK_pci_sys_clk_n              I     1 clock
// CLK_sys_clk_p                  I     1 clock
// CLK_sys_clk_n                  I     1 clock
// RST_N_pci_sys_reset_n          I     1 reset
// PCIE_rxp_i                     I     8
// PCIE_rxn_i                     I     8
// DDR3_DQ                       IO    64 inout
// DDR3_DQS_P                    IO     8 inout
// DDR3_DQS_N                    IO     8 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBridge(CLK_pci_sys_clk_p,
		CLK_pci_sys_clk_n,
		CLK_sys_clk_p,
		CLK_sys_clk_n,
		RST_N_pci_sys_reset_n,

		.DDR3_DQ(ddr3_ctrl$ddr3_dq),
		.DDR3_DQS_P(ddr3_ctrl$ddr3_dqs_p),
		.DDR3_DQS_N(ddr3_ctrl$ddr3_dqs_n),

		PCIE_rxp_i,

		PCIE_rxn_i,

		PCIE_txp,

		PCIE_txn,

		DDR3_CLK_P,

		DDR3_CLK_N,

		DDR3_A,

		DDR3_BA,

		DDR3_RAS_N,

		DDR3_CAS_N,

		DDR3_WE_N,

		DDR3_RESET_N,

		DDR3_CS_N,

		DDR3_ODT,

		DDR3_CKE,

		DDR3_DM,

		leds);
  input  CLK_pci_sys_clk_p;
  input  CLK_pci_sys_clk_n;
  input  CLK_sys_clk_p;
  input  CLK_sys_clk_n;
  input  RST_N_pci_sys_reset_n;

  inout  [63 : 0] ddr3_ctrl$ddr3_dq;
  inout  [7 : 0] ddr3_ctrl$ddr3_dqs_p;
  inout  [7 : 0] ddr3_ctrl$ddr3_dqs_n;

  // action method pcie_rxp
  input  [7 : 0] PCIE_rxp_i;

  // action method pcie_rxn
  input  [7 : 0] PCIE_rxn_i;

  // value method pcie_txp
  output [7 : 0] PCIE_txp;

  // value method pcie_txn
  output [7 : 0] PCIE_txn;

  // value method ddr3_clk_p
  output DDR3_CLK_P;

  // value method ddr3_clk_n
  output DDR3_CLK_N;

  // value method ddr3_a
  output [14 : 0] DDR3_A;

  // value method ddr3_ba
  output [2 : 0] DDR3_BA;

  // value method ddr3_ras_n
  output DDR3_RAS_N;

  // value method ddr3_cas_n
  output DDR3_CAS_N;

  // value method ddr3_we_n
  output DDR3_WE_N;

  // value method ddr3_reset_n
  output DDR3_RESET_N;

  // value method ddr3_cs_n
  output DDR3_CS_N;

  // value method ddr3_odt
  output DDR3_ODT;

  // value method ddr3_cke
  output DDR3_CKE;

  // value method ddr3_dm
  output [7 : 0] DDR3_DM;

  // value method leds
  output [7 : 0] leds;

  // signals for module outputs
  wire [14 : 0] DDR3_A;
  wire [7 : 0] DDR3_DM, PCIE_txn, PCIE_txp, leds;
  wire [2 : 0] DDR3_BA;
  wire DDR3_CAS_N,
       DDR3_CKE,
       DDR3_CLK_N,
       DDR3_CLK_P,
       DDR3_CS_N,
       DDR3_ODT,
       DDR3_RAS_N,
       DDR3_RESET_N,
       DDR3_WE_N;

  // probes
  wire scemi_count_outport_okToSend$PROBE,
       scemi_count_outport_okToSend$PROBE_VALID,
       scemi_data_resp_outport_okToSend$PROBE,
       scemi_data_resp_outport_okToSend$PROBE_VALID,
       scemi_dut_dut_prb_control_data_out_okToSend$PROBE,
       scemi_dut_dut_prb_control_data_out_okToSend$PROBE_VALID,
       scemi_dut_dut_prb_control_dutclkctrl_allowNeg$PROBE,
       scemi_dut_dut_prb_control_dutclkctrl_allowNeg$PROBE_VALID,
       scemi_dut_dut_prb_control_dutclkctrl_allowPos$PROBE,
       scemi_dut_dut_prb_control_dutclkctrl_allowPos$PROBE_VALID,
       scemi_dut_softrst_resp_outport_okToSend$PROBE,
       scemi_dut_softrst_resp_outport_okToSend$PROBE_VALID,
       scemi_shutdown_ctrl_out_okToSend$PROBE,
       scemi_shutdown_ctrl_out_okToSend$PROBE_VALID;

  // inlined wires
  reg [127 : 0] scemi_fS1MsgOut_ifc_rwEnqData$wget,
		scemi_fS1MsgOut_ifc_rwEnqMask$wget;
  reg [5 : 0] scemi_fS1MsgOut_ifc_rwEnqCount$wget;
  wire [139 : 0] scemi_fS1OutPortAcks_ifc_rwEnqData$wget,
		 scemi_fS1OutPortAcks_ifc_rwEnqMask$wget;
  wire [127 : 0] scemi_fFromBridgeBeat_ifc_rwEnqData$wget,
		 scemi_fToContinueBeat_ifc_rwEnqData$wget;
  wire [95 : 0] scemi_fAxiRx_rv$port0__write_1,
		scemi_fAxiRx_rv$port1__read,
		scemi_fAxiRx_rv$port2__read;
  wire [73 : 0] scemi_fAxiTx_rv$port0__write_1,
		scemi_fAxiTx_rv$port1__read,
		scemi_fAxiTx_rv$port2__read;
  wire [17 : 0] scemi_dut_dut_prb_control_control_in_dataF_rv$port0__write_1,
		scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read,
		scemi_dut_dut_prb_control_control_in_dataF_rv$port2__read;
  wire [4 : 0] scemi_data_req_inport_dataF_rv$port0__write_1,
	       scemi_data_req_inport_dataF_rv$port1__read,
	       scemi_data_req_inport_dataF_rv$port2__read,
	       scemi_fS1OutPortAcks_ifc_rwEnqCount$wget;
  wire [1 : 0] scemi_dut_softrst_req_inport_dataF_rv$port0__write_1,
	       scemi_dut_softrst_req_inport_dataF_rv$port1__read,
	       scemi_dut_softrst_req_inport_dataF_rv$port2__read,
	       scemi_shutdown_ctrl_in_dataF_rv$port0__write_1,
	       scemi_shutdown_ctrl_in_dataF_rv$port1__read,
	       scemi_shutdown_ctrl_in_dataF_rv$port2__read,
	       scemi_start_inport_dataF_rv$port0__write_1,
	       scemi_start_inport_dataF_rv$port1__read,
	       scemi_start_inport_dataF_rv$port2__read;
  wire ddr3_ctrl_pwAppEn$whas,
       ddr3_ctrl_pwAppWdfWren$whas,
       ddr3_ctrl_wAppCmd$whas,
       ddr3_ctrl_wAppWdfMask$whas,
       scemi_count_outport_decr$whas,
       scemi_data_req_inport_got_beat_pw$whas,
       scemi_data_req_inport_requestF_rv$port1__read,
       scemi_data_resp_outport_decr$whas,
       scemi_dut_dut_prb_control_control_in_got_beat_pw$whas,
       scemi_dut_dut_prb_control_control_in_requestF_rv$port1__read,
       scemi_dut_dut_prb_control_data_out_decr$whas,
       scemi_dut_softrst_req_inport_got_beat_pw$whas,
       scemi_dut_softrst_req_inport_requestF_rv$port1__read,
       scemi_dut_softrst_resp_outport_decr$whas,
       scemi_fAxiTx_rv$EN_port0__write,
       scemi_fFromBridgeBeat_ifc_rwDeqCount$whas,
       scemi_fS1MsgOut_ifc_rwEnqCount$whas,
       scemi_fS1MsgOut_ifc_rwEnqData$whas,
       scemi_fS1OutPortAcks_ifc_rwEnqCount$whas,
       scemi_fToContinueBeat_ifc_rwEnqCount$whas,
       scemi_fifoRxData_pwEnqueue$whas,
       scemi_scemi_clkgen_rSel_1$whas,
       scemi_scemi_clkgen_rWrEn_1$whas,
       scemi_shutdown_ctrl_in_got_beat_pw$whas,
       scemi_shutdown_ctrl_in_requestF_rv$port1__read,
       scemi_shutdown_ctrl_out_decr$whas,
       scemi_start_inport_got_beat_pw$whas,
       scemi_start_inport_requestF_rv$port1__read;

  // register ddr3_ctrl_dly_reset_n_count
  reg [31 : 0] ddr3_ctrl_dly_reset_n_count;
  wire [31 : 0] ddr3_ctrl_dly_reset_n_count$D_IN;
  wire ddr3_ctrl_dly_reset_n_count$EN;

  // register ddr3_ctrl_rDeqWriteReq
  reg ddr3_ctrl_rDeqWriteReq;
  wire ddr3_ctrl_rDeqWriteReq$D_IN, ddr3_ctrl_rDeqWriteReq$EN;

  // register ddr3_ctrl_rEnqReadResp
  reg ddr3_ctrl_rEnqReadResp;
  wire ddr3_ctrl_rEnqReadResp$D_IN, ddr3_ctrl_rEnqReadResp$EN;

  // register ddr3_ctrl_rFirstResponse
  reg [255 : 0] ddr3_ctrl_rFirstResponse;
  wire [255 : 0] ddr3_ctrl_rFirstResponse$D_IN;
  wire ddr3_ctrl_rFirstResponse$EN;

  // register scemi_1_fifoTxData_block0
  reg [161 : 0] scemi_1_fifoTxData_block0;
  wire [161 : 0] scemi_1_fifoTxData_block0$D_IN;
  wire scemi_1_fifoTxData_block0$EN;

  // register scemi_1_fifoTxData_block0_status
  reg scemi_1_fifoTxData_block0_status;
  wire scemi_1_fifoTxData_block0_status$D_IN,
       scemi_1_fifoTxData_block0_status$EN;

  // register scemi_1_fifoTxData_block1
  reg [161 : 0] scemi_1_fifoTxData_block1;
  wire [161 : 0] scemi_1_fifoTxData_block1$D_IN;
  wire scemi_1_fifoTxData_block1$EN;

  // register scemi_1_fifoTxData_block1_status
  reg scemi_1_fifoTxData_block1_status;
  wire scemi_1_fifoTxData_block1_status$D_IN,
       scemi_1_fifoTxData_block1_status$EN;

  // register scemi_1_fifoTxData_dInReset_pre_isInReset
  reg scemi_1_fifoTxData_dInReset_pre_isInReset;
  wire scemi_1_fifoTxData_dInReset_pre_isInReset$D_IN,
       scemi_1_fifoTxData_dInReset_pre_isInReset$EN;

  // register scemi_1_fifoTxData_elem0_status_0
  reg scemi_1_fifoTxData_elem0_status_0;
  wire scemi_1_fifoTxData_elem0_status_0$D_IN,
       scemi_1_fifoTxData_elem0_status_0$EN;

  // register scemi_1_fifoTxData_elem0_status_1
  reg scemi_1_fifoTxData_elem0_status_1;
  wire scemi_1_fifoTxData_elem0_status_1$D_IN,
       scemi_1_fifoTxData_elem0_status_1$EN;

  // register scemi_1_fifoTxData_elem1_status_0
  reg scemi_1_fifoTxData_elem1_status_0;
  wire scemi_1_fifoTxData_elem1_status_0$D_IN,
       scemi_1_fifoTxData_elem1_status_0$EN;

  // register scemi_1_fifoTxData_elem1_status_1
  reg scemi_1_fifoTxData_elem1_status_1;
  wire scemi_1_fifoTxData_elem1_status_1$D_IN,
       scemi_1_fifoTxData_elem1_status_1$EN;

  // register scemi_1_fifoTxData_read_block
  reg scemi_1_fifoTxData_read_block;
  wire scemi_1_fifoTxData_read_block$D_IN, scemi_1_fifoTxData_read_block$EN;

  // register scemi_1_fifoTxData_sInReset_pre_isInReset
  reg scemi_1_fifoTxData_sInReset_pre_isInReset;
  wire scemi_1_fifoTxData_sInReset_pre_isInReset$D_IN,
       scemi_1_fifoTxData_sInReset_pre_isInReset$EN;

  // register scemi_1_fifoTxData_write_block
  reg scemi_1_fifoTxData_write_block;
  wire scemi_1_fifoTxData_write_block$D_IN, scemi_1_fifoTxData_write_block$EN;

  // register scemi_clk_port_rstgen_init
  reg scemi_clk_port_rstgen_init;
  wire scemi_clk_port_rstgen_init$D_IN, scemi_clk_port_rstgen_init$EN;

  // register scemi_clockGenerators_clock_gens_counters_count
  reg [31 : 0] scemi_clockGenerators_clock_gens_counters_count;
  wire [31 : 0] scemi_clockGenerators_clock_gens_counters_count$D_IN;
  wire scemi_clockGenerators_clock_gens_counters_count$EN;

  // register scemi_clockGenerators_clock_gens_out_of_reset_reg
  reg scemi_clockGenerators_clock_gens_out_of_reset_reg;
  wire scemi_clockGenerators_clock_gens_out_of_reset_reg$D_IN,
       scemi_clockGenerators_clock_gens_out_of_reset_reg$EN;

  // register scemi_clockGenerators_clock_gens_reset_counter
  reg [31 : 0] scemi_clockGenerators_clock_gens_reset_counter;
  wire [31 : 0] scemi_clockGenerators_clock_gens_reset_counter$D_IN;
  wire scemi_clockGenerators_clock_gens_reset_counter$EN;

  // register scemi_clockGenerators_clock_gens_stalled
  reg scemi_clockGenerators_clock_gens_stalled;
  wire scemi_clockGenerators_clock_gens_stalled$D_IN,
       scemi_clockGenerators_clock_gens_stalled$EN;

  // register scemi_clockGenerators_free_stamp
  reg scemi_clockGenerators_free_stamp;
  wire scemi_clockGenerators_free_stamp$D_IN,
       scemi_clockGenerators_free_stamp$EN;

  // register scemi_clockGenerators_one_to_one_cclock_count
  reg [31 : 0] scemi_clockGenerators_one_to_one_cclock_count;
  wire [31 : 0] scemi_clockGenerators_one_to_one_cclock_count$D_IN;
  wire scemi_clockGenerators_one_to_one_cclock_count$EN;

  // register scemi_count_outport_beats
  reg [31 : 0] scemi_count_outport_beats;
  wire [31 : 0] scemi_count_outport_beats$D_IN;
  wire scemi_count_outport_beats$EN;

  // register scemi_count_outport_beats_1
  reg [31 : 0] scemi_count_outport_beats_1;
  wire [31 : 0] scemi_count_outport_beats_1$D_IN;
  wire scemi_count_outport_beats_1$EN;

  // register scemi_count_outport_count
  reg [1 : 0] scemi_count_outport_count;
  wire [1 : 0] scemi_count_outport_count$D_IN;
  wire scemi_count_outport_count$EN;

  // register scemi_count_outport_in_reset_noc
  reg scemi_count_outport_in_reset_noc;
  wire scemi_count_outport_in_reset_noc$D_IN,
       scemi_count_outport_in_reset_noc$EN;

  // register scemi_count_outport_in_reset_uclk
  reg scemi_count_outport_in_reset_uclk;
  wire scemi_count_outport_in_reset_uclk$D_IN,
       scemi_count_outport_in_reset_uclk$EN;

  // register scemi_count_outport_ok
  reg scemi_count_outport_ok;
  wire scemi_count_outport_ok$D_IN, scemi_count_outport_ok$EN;

  // register scemi_count_outport_prev_reset_uclk
  reg scemi_count_outport_prev_reset_uclk;
  wire scemi_count_outport_prev_reset_uclk$D_IN,
       scemi_count_outport_prev_reset_uclk$EN;

  // register scemi_data_req_inport_dataF_rv
  reg [4 : 0] scemi_data_req_inport_dataF_rv;
  wire [4 : 0] scemi_data_req_inport_dataF_rv$D_IN;
  wire scemi_data_req_inport_dataF_rv$EN;

  // register scemi_data_req_inport_in_reset_noc
  reg scemi_data_req_inport_in_reset_noc;
  wire scemi_data_req_inport_in_reset_noc$D_IN,
       scemi_data_req_inport_in_reset_noc$EN;

  // register scemi_data_req_inport_in_reset_uclk
  reg scemi_data_req_inport_in_reset_uclk;
  wire scemi_data_req_inport_in_reset_uclk$D_IN,
       scemi_data_req_inport_in_reset_uclk$EN;

  // register scemi_data_req_inport_prev_reset_uclk
  reg scemi_data_req_inport_prev_reset_uclk;
  wire scemi_data_req_inport_prev_reset_uclk$D_IN,
       scemi_data_req_inport_prev_reset_uclk$EN;

  // register scemi_data_req_inport_remaining
  reg scemi_data_req_inport_remaining;
  wire scemi_data_req_inport_remaining$D_IN,
       scemi_data_req_inport_remaining$EN;

  // register scemi_data_req_inport_requestF_rv
  reg scemi_data_req_inport_requestF_rv;
  wire scemi_data_req_inport_requestF_rv$D_IN,
       scemi_data_req_inport_requestF_rv$EN;

  // register scemi_data_req_inport_scemiInportBeats
  reg [31 : 0] scemi_data_req_inport_scemiInportBeats;
  wire [31 : 0] scemi_data_req_inport_scemiInportBeats$D_IN;
  wire scemi_data_req_inport_scemiInportBeats$EN;

  // register scemi_data_req_inport_status
  reg [1 : 0] scemi_data_req_inport_status;
  reg [1 : 0] scemi_data_req_inport_status$D_IN;
  wire scemi_data_req_inport_status$EN;

  // register scemi_data_resp_outport_beats
  reg [31 : 0] scemi_data_resp_outport_beats;
  wire [31 : 0] scemi_data_resp_outport_beats$D_IN;
  wire scemi_data_resp_outport_beats$EN;

  // register scemi_data_resp_outport_count
  reg scemi_data_resp_outport_count;
  wire scemi_data_resp_outport_count$D_IN, scemi_data_resp_outport_count$EN;

  // register scemi_data_resp_outport_in_reset_noc
  reg scemi_data_resp_outport_in_reset_noc;
  wire scemi_data_resp_outport_in_reset_noc$D_IN,
       scemi_data_resp_outport_in_reset_noc$EN;

  // register scemi_data_resp_outport_in_reset_uclk
  reg scemi_data_resp_outport_in_reset_uclk;
  wire scemi_data_resp_outport_in_reset_uclk$D_IN,
       scemi_data_resp_outport_in_reset_uclk$EN;

  // register scemi_data_resp_outport_ok
  reg scemi_data_resp_outport_ok;
  wire scemi_data_resp_outport_ok$D_IN, scemi_data_resp_outport_ok$EN;

  // register scemi_data_resp_outport_prev_reset_uclk
  reg scemi_data_resp_outport_prev_reset_uclk;
  wire scemi_data_resp_outport_prev_reset_uclk$D_IN,
       scemi_data_resp_outport_prev_reset_uclk$EN;

  // register scemi_dut_dut_dutIfc_resetting
  reg scemi_dut_dut_dutIfc_resetting;
  wire scemi_dut_dut_dutIfc_resetting$D_IN, scemi_dut_dut_dutIfc_resetting$EN;

  // register scemi_dut_dut_prb_control_control_in_dataF_rv
  reg [17 : 0] scemi_dut_dut_prb_control_control_in_dataF_rv;
  wire [17 : 0] scemi_dut_dut_prb_control_control_in_dataF_rv$D_IN;
  wire scemi_dut_dut_prb_control_control_in_dataF_rv$EN;

  // register scemi_dut_dut_prb_control_control_in_in_reset_noc
  reg scemi_dut_dut_prb_control_control_in_in_reset_noc;
  wire scemi_dut_dut_prb_control_control_in_in_reset_noc$D_IN,
       scemi_dut_dut_prb_control_control_in_in_reset_noc$EN;

  // register scemi_dut_dut_prb_control_control_in_in_reset_uclk
  reg scemi_dut_dut_prb_control_control_in_in_reset_uclk;
  wire scemi_dut_dut_prb_control_control_in_in_reset_uclk$D_IN,
       scemi_dut_dut_prb_control_control_in_in_reset_uclk$EN;

  // register scemi_dut_dut_prb_control_control_in_prev_reset_uclk
  reg scemi_dut_dut_prb_control_control_in_prev_reset_uclk;
  wire scemi_dut_dut_prb_control_control_in_prev_reset_uclk$D_IN,
       scemi_dut_dut_prb_control_control_in_prev_reset_uclk$EN;

  // register scemi_dut_dut_prb_control_control_in_remaining
  reg scemi_dut_dut_prb_control_control_in_remaining;
  wire scemi_dut_dut_prb_control_control_in_remaining$D_IN,
       scemi_dut_dut_prb_control_control_in_remaining$EN;

  // register scemi_dut_dut_prb_control_control_in_requestF_rv
  reg scemi_dut_dut_prb_control_control_in_requestF_rv;
  wire scemi_dut_dut_prb_control_control_in_requestF_rv$D_IN,
       scemi_dut_dut_prb_control_control_in_requestF_rv$EN;

  // register scemi_dut_dut_prb_control_control_in_scemiInportBeats
  reg [31 : 0] scemi_dut_dut_prb_control_control_in_scemiInportBeats;
  wire [31 : 0] scemi_dut_dut_prb_control_control_in_scemiInportBeats$D_IN;
  wire scemi_dut_dut_prb_control_control_in_scemiInportBeats$EN;

  // register scemi_dut_dut_prb_control_control_in_status
  reg [1 : 0] scemi_dut_dut_prb_control_control_in_status;
  reg [1 : 0] scemi_dut_dut_prb_control_control_in_status$D_IN;
  wire scemi_dut_dut_prb_control_control_in_status$EN;

  // register scemi_dut_dut_prb_control_count
  reg [15 : 0] scemi_dut_dut_prb_control_count;
  wire [15 : 0] scemi_dut_dut_prb_control_count$D_IN;
  wire scemi_dut_dut_prb_control_count$EN;

  // register scemi_dut_dut_prb_control_data_out_beats
  reg [31 : 0] scemi_dut_dut_prb_control_data_out_beats;
  reg [31 : 0] scemi_dut_dut_prb_control_data_out_beats$D_IN;
  wire scemi_dut_dut_prb_control_data_out_beats$EN;

  // register scemi_dut_dut_prb_control_data_out_count
  reg scemi_dut_dut_prb_control_data_out_count;
  wire scemi_dut_dut_prb_control_data_out_count$D_IN,
       scemi_dut_dut_prb_control_data_out_count$EN;

  // register scemi_dut_dut_prb_control_data_out_in_reset_noc
  reg scemi_dut_dut_prb_control_data_out_in_reset_noc;
  wire scemi_dut_dut_prb_control_data_out_in_reset_noc$D_IN,
       scemi_dut_dut_prb_control_data_out_in_reset_noc$EN;

  // register scemi_dut_dut_prb_control_data_out_in_reset_uclk
  reg scemi_dut_dut_prb_control_data_out_in_reset_uclk;
  wire scemi_dut_dut_prb_control_data_out_in_reset_uclk$D_IN,
       scemi_dut_dut_prb_control_data_out_in_reset_uclk$EN;

  // register scemi_dut_dut_prb_control_data_out_ok
  reg scemi_dut_dut_prb_control_data_out_ok;
  wire scemi_dut_dut_prb_control_data_out_ok$D_IN,
       scemi_dut_dut_prb_control_data_out_ok$EN;

  // register scemi_dut_dut_prb_control_data_out_prev_reset_uclk
  reg scemi_dut_dut_prb_control_data_out_prev_reset_uclk;
  wire scemi_dut_dut_prb_control_data_out_prev_reset_uclk$D_IN,
       scemi_dut_dut_prb_control_data_out_prev_reset_uclk$EN;

  // register scemi_dut_dut_prb_control_flag
  reg scemi_dut_dut_prb_control_flag;
  wire scemi_dut_dut_prb_control_flag$D_IN, scemi_dut_dut_prb_control_flag$EN;

  // register scemi_dut_dut_prb_control_nextSample
  reg [63 : 0] scemi_dut_dut_prb_control_nextSample;
  reg [63 : 0] scemi_dut_dut_prb_control_nextSample$D_IN;
  wire scemi_dut_dut_prb_control_nextSample$EN;

  // register scemi_dut_dut_prb_control_pinged
  reg scemi_dut_dut_prb_control_pinged;
  reg scemi_dut_dut_prb_control_pinged$D_IN;
  wire scemi_dut_dut_prb_control_pinged$EN;

  // register scemi_dut_dut_prb_control_sampleIntervalV
  reg [7 : 0] scemi_dut_dut_prb_control_sampleIntervalV;
  wire [7 : 0] scemi_dut_dut_prb_control_sampleIntervalV$D_IN;
  wire scemi_dut_dut_prb_control_sampleIntervalV$EN;

  // register scemi_dut_dut_prb_control_sampleIntervalV_1
  reg [7 : 0] scemi_dut_dut_prb_control_sampleIntervalV_1;
  wire [7 : 0] scemi_dut_dut_prb_control_sampleIntervalV_1$D_IN;
  wire scemi_dut_dut_prb_control_sampleIntervalV_1$EN;

  // register scemi_dut_dut_prb_control_sampleIntervalV_2
  reg [7 : 0] scemi_dut_dut_prb_control_sampleIntervalV_2;
  wire [7 : 0] scemi_dut_dut_prb_control_sampleIntervalV_2$D_IN;
  wire scemi_dut_dut_prb_control_sampleIntervalV_2$EN;

  // register scemi_dut_dut_prb_control_sampleIntervalV_3
  reg [7 : 0] scemi_dut_dut_prb_control_sampleIntervalV_3;
  wire [7 : 0] scemi_dut_dut_prb_control_sampleIntervalV_3$D_IN;
  wire scemi_dut_dut_prb_control_sampleIntervalV_3$EN;

  // register scemi_dut_softrst_req_inport_dataF_rv
  reg [1 : 0] scemi_dut_softrst_req_inport_dataF_rv;
  wire [1 : 0] scemi_dut_softrst_req_inport_dataF_rv$D_IN;
  wire scemi_dut_softrst_req_inport_dataF_rv$EN;

  // register scemi_dut_softrst_req_inport_in_reset_noc
  reg scemi_dut_softrst_req_inport_in_reset_noc;
  wire scemi_dut_softrst_req_inport_in_reset_noc$D_IN,
       scemi_dut_softrst_req_inport_in_reset_noc$EN;

  // register scemi_dut_softrst_req_inport_in_reset_uclk
  reg scemi_dut_softrst_req_inport_in_reset_uclk;
  wire scemi_dut_softrst_req_inport_in_reset_uclk$D_IN,
       scemi_dut_softrst_req_inport_in_reset_uclk$EN;

  // register scemi_dut_softrst_req_inport_prev_reset_uclk
  reg scemi_dut_softrst_req_inport_prev_reset_uclk;
  wire scemi_dut_softrst_req_inport_prev_reset_uclk$D_IN,
       scemi_dut_softrst_req_inport_prev_reset_uclk$EN;

  // register scemi_dut_softrst_req_inport_remaining
  reg scemi_dut_softrst_req_inport_remaining;
  wire scemi_dut_softrst_req_inport_remaining$D_IN,
       scemi_dut_softrst_req_inport_remaining$EN;

  // register scemi_dut_softrst_req_inport_requestF_rv
  reg scemi_dut_softrst_req_inport_requestF_rv;
  wire scemi_dut_softrst_req_inport_requestF_rv$D_IN,
       scemi_dut_softrst_req_inport_requestF_rv$EN;

  // register scemi_dut_softrst_req_inport_scemiInportBeats
  reg [31 : 0] scemi_dut_softrst_req_inport_scemiInportBeats;
  wire [31 : 0] scemi_dut_softrst_req_inport_scemiInportBeats$D_IN;
  wire scemi_dut_softrst_req_inport_scemiInportBeats$EN;

  // register scemi_dut_softrst_req_inport_status
  reg [1 : 0] scemi_dut_softrst_req_inport_status;
  reg [1 : 0] scemi_dut_softrst_req_inport_status$D_IN;
  wire scemi_dut_softrst_req_inport_status$EN;

  // register scemi_dut_softrst_resp_outport_beats
  reg [31 : 0] scemi_dut_softrst_resp_outport_beats;
  wire [31 : 0] scemi_dut_softrst_resp_outport_beats$D_IN;
  wire scemi_dut_softrst_resp_outport_beats$EN;

  // register scemi_dut_softrst_resp_outport_count
  reg scemi_dut_softrst_resp_outport_count;
  wire scemi_dut_softrst_resp_outport_count$D_IN,
       scemi_dut_softrst_resp_outport_count$EN;

  // register scemi_dut_softrst_resp_outport_in_reset_noc
  reg scemi_dut_softrst_resp_outport_in_reset_noc;
  wire scemi_dut_softrst_resp_outport_in_reset_noc$D_IN,
       scemi_dut_softrst_resp_outport_in_reset_noc$EN;

  // register scemi_dut_softrst_resp_outport_in_reset_uclk
  reg scemi_dut_softrst_resp_outport_in_reset_uclk;
  wire scemi_dut_softrst_resp_outport_in_reset_uclk$D_IN,
       scemi_dut_softrst_resp_outport_in_reset_uclk$EN;

  // register scemi_dut_softrst_resp_outport_ok
  reg scemi_dut_softrst_resp_outport_ok;
  wire scemi_dut_softrst_resp_outport_ok$D_IN,
       scemi_dut_softrst_resp_outport_ok$EN;

  // register scemi_dut_softrst_resp_outport_prev_reset_uclk
  reg scemi_dut_softrst_resp_outport_prev_reset_uclk;
  wire scemi_dut_softrst_resp_outport_prev_reset_uclk$D_IN,
       scemi_dut_softrst_resp_outport_prev_reset_uclk$EN;

  // register scemi_fAxiRx_rv
  reg [95 : 0] scemi_fAxiRx_rv;
  wire [95 : 0] scemi_fAxiRx_rv$D_IN;
  wire scemi_fAxiRx_rv$EN;

  // register scemi_fAxiTx_rv
  reg [73 : 0] scemi_fAxiTx_rv;
  wire [73 : 0] scemi_fAxiTx_rv$D_IN;
  wire scemi_fAxiTx_rv$EN;

  // register scemi_fFromBridgeBeat_ifc_rDataAvail
  reg [5 : 0] scemi_fFromBridgeBeat_ifc_rDataAvail;
  wire [5 : 0] scemi_fFromBridgeBeat_ifc_rDataAvail$D_IN;
  wire scemi_fFromBridgeBeat_ifc_rDataAvail$EN;

  // register scemi_fFromBridgeBeat_ifc_rDataCount
  reg [5 : 0] scemi_fFromBridgeBeat_ifc_rDataCount;
  wire [5 : 0] scemi_fFromBridgeBeat_ifc_rDataCount$D_IN;
  wire scemi_fFromBridgeBeat_ifc_rDataCount$EN;

  // register scemi_fFromBridgeBeat_ifc_rStorage
  reg [255 : 0] scemi_fFromBridgeBeat_ifc_rStorage;
  wire [255 : 0] scemi_fFromBridgeBeat_ifc_rStorage$D_IN;
  wire scemi_fFromBridgeBeat_ifc_rStorage$EN;

  // register scemi_fFromBridgeBeat_ifc_rStorageMask
  reg [255 : 0] scemi_fFromBridgeBeat_ifc_rStorageMask;
  wire [255 : 0] scemi_fFromBridgeBeat_ifc_rStorageMask$D_IN;
  wire scemi_fFromBridgeBeat_ifc_rStorageMask$EN;

  // register scemi_fFromContinueBeat_ifc_rDataAvail
  reg [5 : 0] scemi_fFromContinueBeat_ifc_rDataAvail;
  wire [5 : 0] scemi_fFromContinueBeat_ifc_rDataAvail$D_IN;
  wire scemi_fFromContinueBeat_ifc_rDataAvail$EN;

  // register scemi_fFromContinueBeat_ifc_rDataCount
  reg [5 : 0] scemi_fFromContinueBeat_ifc_rDataCount;
  wire [5 : 0] scemi_fFromContinueBeat_ifc_rDataCount$D_IN;
  wire scemi_fFromContinueBeat_ifc_rDataCount$EN;

  // register scemi_fFromContinueBeat_ifc_rStorage
  reg [255 : 0] scemi_fFromContinueBeat_ifc_rStorage;
  wire [255 : 0] scemi_fFromContinueBeat_ifc_rStorage$D_IN;
  wire scemi_fFromContinueBeat_ifc_rStorage$EN;

  // register scemi_fFromContinueBeat_ifc_rStorageMask
  reg [255 : 0] scemi_fFromContinueBeat_ifc_rStorageMask;
  wire [255 : 0] scemi_fFromContinueBeat_ifc_rStorageMask$D_IN;
  wire scemi_fFromContinueBeat_ifc_rStorageMask$EN;

  // register scemi_fS1MsgOut_ifc_rDataAvail
  reg [5 : 0] scemi_fS1MsgOut_ifc_rDataAvail;
  wire [5 : 0] scemi_fS1MsgOut_ifc_rDataAvail$D_IN;
  wire scemi_fS1MsgOut_ifc_rDataAvail$EN;

  // register scemi_fS1MsgOut_ifc_rDataCount
  reg [5 : 0] scemi_fS1MsgOut_ifc_rDataCount;
  wire [5 : 0] scemi_fS1MsgOut_ifc_rDataCount$D_IN;
  wire scemi_fS1MsgOut_ifc_rDataCount$EN;

  // register scemi_fS1MsgOut_ifc_rStorage
  reg [255 : 0] scemi_fS1MsgOut_ifc_rStorage;
  wire [255 : 0] scemi_fS1MsgOut_ifc_rStorage$D_IN;
  wire scemi_fS1MsgOut_ifc_rStorage$EN;

  // register scemi_fS1MsgOut_ifc_rStorageMask
  reg [255 : 0] scemi_fS1MsgOut_ifc_rStorageMask;
  wire [255 : 0] scemi_fS1MsgOut_ifc_rStorageMask$D_IN;
  wire scemi_fS1MsgOut_ifc_rStorageMask$EN;

  // register scemi_fS1OutPortAcks_ifc_rDataAvail
  reg [4 : 0] scemi_fS1OutPortAcks_ifc_rDataAvail;
  wire [4 : 0] scemi_fS1OutPortAcks_ifc_rDataAvail$D_IN;
  wire scemi_fS1OutPortAcks_ifc_rDataAvail$EN;

  // register scemi_fS1OutPortAcks_ifc_rDataCount
  reg [4 : 0] scemi_fS1OutPortAcks_ifc_rDataCount;
  wire [4 : 0] scemi_fS1OutPortAcks_ifc_rDataCount$D_IN;
  wire scemi_fS1OutPortAcks_ifc_rDataCount$EN;

  // register scemi_fS1OutPortAcks_ifc_rStorage
  reg [159 : 0] scemi_fS1OutPortAcks_ifc_rStorage;
  wire [159 : 0] scemi_fS1OutPortAcks_ifc_rStorage$D_IN;
  wire scemi_fS1OutPortAcks_ifc_rStorage$EN;

  // register scemi_fS1OutPortAcks_ifc_rStorageMask
  reg [159 : 0] scemi_fS1OutPortAcks_ifc_rStorageMask;
  wire [159 : 0] scemi_fS1OutPortAcks_ifc_rStorageMask$D_IN;
  wire scemi_fS1OutPortAcks_ifc_rStorageMask$EN;

  // register scemi_fS2MsgOut_ifc_rDataAvail
  reg [5 : 0] scemi_fS2MsgOut_ifc_rDataAvail;
  wire [5 : 0] scemi_fS2MsgOut_ifc_rDataAvail$D_IN;
  wire scemi_fS2MsgOut_ifc_rDataAvail$EN;

  // register scemi_fS2MsgOut_ifc_rDataCount
  reg [5 : 0] scemi_fS2MsgOut_ifc_rDataCount;
  wire [5 : 0] scemi_fS2MsgOut_ifc_rDataCount$D_IN;
  wire scemi_fS2MsgOut_ifc_rDataCount$EN;

  // register scemi_fS2MsgOut_ifc_rStorage
  reg [255 : 0] scemi_fS2MsgOut_ifc_rStorage;
  wire [255 : 0] scemi_fS2MsgOut_ifc_rStorage$D_IN;
  wire scemi_fS2MsgOut_ifc_rStorage$EN;

  // register scemi_fS2MsgOut_ifc_rStorageMask
  reg [255 : 0] scemi_fS2MsgOut_ifc_rStorageMask;
  wire [255 : 0] scemi_fS2MsgOut_ifc_rStorageMask$D_IN;
  wire scemi_fS2MsgOut_ifc_rStorageMask$EN;

  // register scemi_fToContinueBeat_ifc_rDataAvail
  reg [5 : 0] scemi_fToContinueBeat_ifc_rDataAvail;
  wire [5 : 0] scemi_fToContinueBeat_ifc_rDataAvail$D_IN;
  wire scemi_fToContinueBeat_ifc_rDataAvail$EN;

  // register scemi_fToContinueBeat_ifc_rDataCount
  reg [5 : 0] scemi_fToContinueBeat_ifc_rDataCount;
  wire [5 : 0] scemi_fToContinueBeat_ifc_rDataCount$D_IN;
  wire scemi_fToContinueBeat_ifc_rDataCount$EN;

  // register scemi_fToContinueBeat_ifc_rStorage
  reg [255 : 0] scemi_fToContinueBeat_ifc_rStorage;
  wire [255 : 0] scemi_fToContinueBeat_ifc_rStorage$D_IN;
  wire scemi_fToContinueBeat_ifc_rStorage$EN;

  // register scemi_fToContinueBeat_ifc_rStorageMask
  reg [255 : 0] scemi_fToContinueBeat_ifc_rStorageMask;
  wire [255 : 0] scemi_fToContinueBeat_ifc_rStorageMask$D_IN;
  wire scemi_fToContinueBeat_ifc_rStorageMask$EN;

  // register scemi_fifoRxData_block0_status
  reg scemi_fifoRxData_block0_status;
  wire scemi_fifoRxData_block0_status$D_IN, scemi_fifoRxData_block0_status$EN;

  // register scemi_fifoRxData_block1_status
  reg scemi_fifoRxData_block1_status;
  wire scemi_fifoRxData_block1_status$D_IN, scemi_fifoRxData_block1_status$EN;

  // register scemi_fifoRxData_dInReset_pre_isInReset
  reg scemi_fifoRxData_dInReset_pre_isInReset;
  wire scemi_fifoRxData_dInReset_pre_isInReset$D_IN,
       scemi_fifoRxData_dInReset_pre_isInReset$EN;

  // register scemi_fifoRxData_elem0_status_0
  reg scemi_fifoRxData_elem0_status_0;
  wire scemi_fifoRxData_elem0_status_0$D_IN,
       scemi_fifoRxData_elem0_status_0$EN;

  // register scemi_fifoRxData_elem0_status_1
  reg scemi_fifoRxData_elem0_status_1;
  wire scemi_fifoRxData_elem0_status_1$D_IN,
       scemi_fifoRxData_elem0_status_1$EN;

  // register scemi_fifoRxData_elem1_status_0
  reg scemi_fifoRxData_elem1_status_0;
  wire scemi_fifoRxData_elem1_status_0$D_IN,
       scemi_fifoRxData_elem1_status_0$EN;

  // register scemi_fifoRxData_elem1_status_1
  reg scemi_fifoRxData_elem1_status_1;
  wire scemi_fifoRxData_elem1_status_1$D_IN,
       scemi_fifoRxData_elem1_status_1$EN;

  // register scemi_fifoRxData_elem_0
  reg [80 : 0] scemi_fifoRxData_elem_0;
  wire [80 : 0] scemi_fifoRxData_elem_0$D_IN;
  wire scemi_fifoRxData_elem_0$EN;

  // register scemi_fifoRxData_elem_1
  reg [80 : 0] scemi_fifoRxData_elem_1;
  wire [80 : 0] scemi_fifoRxData_elem_1$D_IN;
  wire scemi_fifoRxData_elem_1$EN;

  // register scemi_fifoRxData_elem_2
  reg [80 : 0] scemi_fifoRxData_elem_2;
  wire [80 : 0] scemi_fifoRxData_elem_2$D_IN;
  wire scemi_fifoRxData_elem_2$EN;

  // register scemi_fifoRxData_elem_3
  reg [80 : 0] scemi_fifoRxData_elem_3;
  wire [80 : 0] scemi_fifoRxData_elem_3$D_IN;
  wire scemi_fifoRxData_elem_3$EN;

  // register scemi_fifoRxData_read_block
  reg scemi_fifoRxData_read_block;
  wire scemi_fifoRxData_read_block$D_IN, scemi_fifoRxData_read_block$EN;

  // register scemi_fifoRxData_sInReset_pre_isInReset
  reg scemi_fifoRxData_sInReset_pre_isInReset;
  wire scemi_fifoRxData_sInReset_pre_isInReset$D_IN,
       scemi_fifoRxData_sInReset_pre_isInReset$EN;

  // register scemi_fifoRxData_write_block
  reg scemi_fifoRxData_write_block;
  wire scemi_fifoRxData_write_block$D_IN, scemi_fifoRxData_write_block$EN;

  // register scemi_init_state_any_in_reset_uclk
  reg scemi_init_state_any_in_reset_uclk;
  wire scemi_init_state_any_in_reset_uclk$D_IN,
       scemi_init_state_any_in_reset_uclk$EN;

  // register scemi_init_state_cycle_stamp
  reg [63 : 0] scemi_init_state_cycle_stamp;
  wire [63 : 0] scemi_init_state_cycle_stamp$D_IN;
  wire scemi_init_state_cycle_stamp$EN;

  // register scemi_init_state_out_port
  reg [9 : 0] scemi_init_state_out_port;
  wire [9 : 0] scemi_init_state_out_port$D_IN;
  wire scemi_init_state_out_port$EN;

  // register scemi_intr_on
  reg scemi_intr_on;
  wire scemi_intr_on$D_IN, scemi_intr_on$EN;

  // register scemi_lrS1ActiveRequests
  reg scemi_lrS1ActiveRequests;
  reg scemi_lrS1ActiveRequests$D_IN;
  wire scemi_lrS1ActiveRequests$EN;

  // register scemi_lrS1ActiveRequests_1
  reg scemi_lrS1ActiveRequests_1;
  reg scemi_lrS1ActiveRequests_1$D_IN;
  wire scemi_lrS1ActiveRequests_1$EN;

  // register scemi_lrS1ActiveRequests_2
  reg scemi_lrS1ActiveRequests_2;
  reg scemi_lrS1ActiveRequests_2$D_IN;
  wire scemi_lrS1ActiveRequests_2$EN;

  // register scemi_lrS1ActiveRequests_3
  reg scemi_lrS1ActiveRequests_3;
  reg scemi_lrS1ActiveRequests_3$D_IN;
  wire scemi_lrS1ActiveRequests_3$EN;

  // register scemi_lrS1ActiveRequests_4
  reg scemi_lrS1ActiveRequests_4;
  wire scemi_lrS1ActiveRequests_4$D_IN, scemi_lrS1ActiveRequests_4$EN;

  // register scemi_lrS1PendingRequests
  reg scemi_lrS1PendingRequests;
  reg scemi_lrS1PendingRequests$D_IN;
  wire scemi_lrS1PendingRequests$EN;

  // register scemi_lrS1PendingRequests_1
  reg scemi_lrS1PendingRequests_1;
  reg scemi_lrS1PendingRequests_1$D_IN;
  wire scemi_lrS1PendingRequests_1$EN;

  // register scemi_lrS1PendingRequests_2
  reg scemi_lrS1PendingRequests_2;
  reg scemi_lrS1PendingRequests_2$D_IN;
  wire scemi_lrS1PendingRequests_2$EN;

  // register scemi_lrS1PendingRequests_3
  reg scemi_lrS1PendingRequests_3;
  reg scemi_lrS1PendingRequests_3$D_IN;
  wire scemi_lrS1PendingRequests_3$EN;

  // register scemi_lrS1PendingRequests_4
  reg scemi_lrS1PendingRequests_4;
  reg scemi_lrS1PendingRequests_4$D_IN;
  wire scemi_lrS1PendingRequests_4$EN;

  // register scemi_max_payload_bytes
  reg [12 : 0] scemi_max_payload_bytes;
  wire [12 : 0] scemi_max_payload_bytes$D_IN;
  wire scemi_max_payload_bytes$EN;

  // register scemi_max_payload_cr
  reg [12 : 0] scemi_max_payload_cr;
  wire [12 : 0] scemi_max_payload_cr$D_IN;
  wire scemi_max_payload_cr$EN;

  // register scemi_max_rd_req_cr
  reg [12 : 0] scemi_max_rd_req_cr;
  wire [12 : 0] scemi_max_rd_req_cr$D_IN;
  wire scemi_max_rd_req_cr$EN;

  // register scemi_max_read_req_bytes
  reg [12 : 0] scemi_max_read_req_bytes;
  wire [12 : 0] scemi_max_read_req_bytes$D_IN;
  wire scemi_max_read_req_bytes$EN;

  // register scemi_msix_enable
  reg scemi_msix_enable;
  wire scemi_msix_enable$D_IN, scemi_msix_enable$EN;

  // register scemi_msix_enable_cr
  reg scemi_msix_enable_cr;
  wire scemi_msix_enable_cr$D_IN, scemi_msix_enable_cr$EN;

  // register scemi_msix_masked
  reg scemi_msix_masked;
  wire scemi_msix_masked$D_IN, scemi_msix_masked$EN;

  // register scemi_msix_masked_cr
  reg scemi_msix_masked_cr;
  wire scemi_msix_masked_cr$D_IN, scemi_msix_masked_cr$EN;

  // register scemi_rDecodeSceMi
  reg scemi_rDecodeSceMi;
  wire scemi_rDecodeSceMi$D_IN, scemi_rDecodeSceMi$EN;

  // register scemi_rInMsgBytes
  reg [7 : 0] scemi_rInMsgBytes;
  reg [7 : 0] scemi_rInMsgBytes$D_IN;
  wire scemi_rInMsgBytes$EN;

  // register scemi_rOddBeat
  reg scemi_rOddBeat;
  wire scemi_rOddBeat$D_IN, scemi_rOddBeat$EN;

  // register scemi_rOtherMsgIn
  reg scemi_rOtherMsgIn;
  reg scemi_rOtherMsgIn$D_IN;
  wire scemi_rOtherMsgIn$EN;

  // register scemi_rOtherMsgOut
  reg scemi_rOtherMsgOut;
  reg scemi_rOtherMsgOut$D_IN;
  wire scemi_rOtherMsgOut$EN;

  // register scemi_rOutMsgBytes
  reg [7 : 0] scemi_rOutMsgBytes;
  reg [7 : 0] scemi_rOutMsgBytes$D_IN;
  wire scemi_rOutMsgBytes$EN;

  // register scemi_rS1BitsRem
  reg [18 : 0] scemi_rS1BitsRem;
  wire [18 : 0] scemi_rS1BitsRem$D_IN;
  wire scemi_rS1BitsRem$EN;

  // register scemi_rS1CycleStamp
  reg [63 : 0] scemi_rS1CycleStamp;
  wire [63 : 0] scemi_rS1CycleStamp$D_IN;
  wire scemi_rS1CycleStamp$EN;

  // register scemi_rS1InPortNum
  reg [9 : 0] scemi_rS1InPortNum;
  wire [9 : 0] scemi_rS1InPortNum$D_IN;
  wire scemi_rS1InPortNum$EN;

  // register scemi_rS1MsgInIsAck
  reg scemi_rS1MsgInIsAck;
  wire scemi_rS1MsgInIsAck$D_IN, scemi_rS1MsgInIsAck$EN;

  // register scemi_rS1MsgInIsData
  reg scemi_rS1MsgInIsData;
  wire scemi_rS1MsgInIsData$D_IN, scemi_rS1MsgInIsData$EN;

  // register scemi_rS1MsgOutDataReq
  reg scemi_rS1MsgOutDataReq;
  wire scemi_rS1MsgOutDataReq$D_IN, scemi_rS1MsgOutDataReq$EN;

  // register scemi_rS1MsgOutReqGrant
  reg scemi_rS1MsgOutReqGrant;
  reg scemi_rS1MsgOutReqGrant$D_IN;
  wire scemi_rS1MsgOutReqGrant$EN;

  // register scemi_rS1MsgOutReqReq
  reg scemi_rS1MsgOutReqReq;
  wire scemi_rS1MsgOutReqReq$D_IN, scemi_rS1MsgOutReqReq$EN;

  // register scemi_rS1OutDataHeader
  reg scemi_rS1OutDataHeader;
  wire scemi_rS1OutDataHeader$D_IN, scemi_rS1OutDataHeader$EN;

  // register scemi_rS1OutMsgIsCont
  reg scemi_rS1OutMsgIsCont;
  wire scemi_rS1OutMsgIsCont$D_IN, scemi_rS1OutMsgIsCont$EN;

  // register scemi_rS1OutMsgSize
  reg [7 : 0] scemi_rS1OutMsgSize;
  reg [7 : 0] scemi_rS1OutMsgSize$D_IN;
  wire scemi_rS1OutMsgSize$EN;

  // register scemi_rS1OutPort
  reg [9 : 0] scemi_rS1OutPort;
  wire [9 : 0] scemi_rS1OutPort$D_IN;
  wire scemi_rS1OutPort$EN;

  // register scemi_rS1RequestedPort
  reg [9 : 0] scemi_rS1RequestedPort;
  wire [9 : 0] scemi_rS1RequestedPort$D_IN;
  wire scemi_rS1RequestedPort$EN;

  // register scemi_rS2InPipeNum
  reg [11 : 0] scemi_rS2InPipeNum;
  wire [11 : 0] scemi_rS2InPipeNum$D_IN;
  wire scemi_rS2InPipeNum$EN;

  // register scemi_rS2MsgInIsCred
  reg scemi_rS2MsgInIsCred;
  wire scemi_rS2MsgInIsCred$D_IN, scemi_rS2MsgInIsCred$EN;

  // register scemi_rS2MsgInIsData
  reg scemi_rS2MsgInIsData;
  wire scemi_rS2MsgInIsData$D_IN, scemi_rS2MsgInIsData$EN;

  // register scemi_rS2MsgOutCredGrant
  reg scemi_rS2MsgOutCredGrant;
  wire scemi_rS2MsgOutCredGrant$D_IN, scemi_rS2MsgOutCredGrant$EN;

  // register scemi_rS2MsgOutDataReq
  reg scemi_rS2MsgOutDataReq;
  wire scemi_rS2MsgOutDataReq$D_IN, scemi_rS2MsgOutDataReq$EN;

  // register scemi_rSceMi1MsgIn
  reg scemi_rSceMi1MsgIn;
  reg scemi_rSceMi1MsgIn$D_IN;
  wire scemi_rSceMi1MsgIn$EN;

  // register scemi_rSceMi1MsgOut
  reg scemi_rSceMi1MsgOut;
  reg scemi_rSceMi1MsgOut$D_IN;
  wire scemi_rSceMi1MsgOut$EN;

  // register scemi_rSceMi2MsgIn
  reg scemi_rSceMi2MsgIn;
  reg scemi_rSceMi2MsgIn$D_IN;
  wire scemi_rSceMi2MsgIn$EN;

  // register scemi_rSceMi2MsgOut
  reg scemi_rSceMi2MsgOut;
  reg scemi_rSceMi2MsgOut$D_IN;
  wire scemi_rSceMi2MsgOut$EN;

  // register scemi_rSendInvalid
  reg scemi_rSendInvalid;
  wire scemi_rSendInvalid$D_IN, scemi_rSendInvalid$EN;

  // register scemi_rcb_cr
  reg [7 : 0] scemi_rcb_cr;
  wire [7 : 0] scemi_rcb_cr$D_IN;
  wire scemi_rcb_cr$EN;

  // register scemi_rcb_mask
  reg [6 : 0] scemi_rcb_mask;
  wire [6 : 0] scemi_rcb_mask$D_IN;
  wire scemi_rcb_mask$EN;

  // register scemi_rstgen_init
  reg scemi_rstgen_init;
  wire scemi_rstgen_init$D_IN, scemi_rstgen_init$EN;

  // register scemi_rvPrevMsgGrant
  reg [2 : 0] scemi_rvPrevMsgGrant;
  wire [2 : 0] scemi_rvPrevMsgGrant$D_IN;
  wire scemi_rvPrevMsgGrant$EN;

  // register scemi_rvPrevPrevMsgGrant
  reg [2 : 0] scemi_rvPrevPrevMsgGrant;
  wire [2 : 0] scemi_rvPrevPrevMsgGrant$D_IN;
  wire scemi_rvPrevPrevMsgGrant$EN;

  // register scemi_scemi_clkgen_rAddress
  reg [6 : 0] scemi_scemi_clkgen_rAddress;
  wire [6 : 0] scemi_scemi_clkgen_rAddress$D_IN;
  wire scemi_scemi_clkgen_rAddress$EN;

  // register scemi_scemi_clkgen_rCount
  reg [4 : 0] scemi_scemi_clkgen_rCount;
  reg [4 : 0] scemi_scemi_clkgen_rCount$D_IN;
  wire scemi_scemi_clkgen_rCount$EN;

  // register scemi_scemi_clkgen_rMMCM_clk_div
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clk_div;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clk_div$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clk_div$EN;

  // register scemi_scemi_clkgen_rMMCM_clk_fb_1
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clk_fb_1;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clk_fb_1$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clk_fb_1$EN;

  // register scemi_scemi_clkgen_rMMCM_clk_fb_2
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clk_fb_2;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clk_fb_2$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clk_fb_2$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout0_1
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout0_1;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout0_1$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout0_1$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout0_2
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout0_2;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout0_2$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout0_2$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout1_1
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout1_1;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout1_1$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout1_1$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout1_2
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout1_2;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout1_2$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout1_2$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout2_1
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout2_1;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout2_1$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout2_1$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout2_2
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout2_2;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout2_2$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout2_2$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout3_1
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout3_1;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout3_1$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout3_1$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout3_2
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout3_2;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout3_2$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout3_2$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout4_1
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout4_1;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout4_1$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout4_1$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout4_2
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout4_2;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout4_2$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout4_2$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout5_1
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout5_1;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout5_1$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout5_1$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout5_2
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout5_2;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout5_2$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout5_2$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout6_1
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout6_1;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout6_1$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout6_1$EN;

  // register scemi_scemi_clkgen_rMMCM_clkout6_2
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_clkout6_2;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_clkout6_2$D_IN;
  wire scemi_scemi_clkgen_rMMCM_clkout6_2$EN;

  // register scemi_scemi_clkgen_rMMCM_filter_1
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_filter_1;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_filter_1$D_IN;
  wire scemi_scemi_clkgen_rMMCM_filter_1$EN;

  // register scemi_scemi_clkgen_rMMCM_filter_2
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_filter_2;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_filter_2$D_IN;
  wire scemi_scemi_clkgen_rMMCM_filter_2$EN;

  // register scemi_scemi_clkgen_rMMCM_lock_1
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_lock_1;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_lock_1$D_IN;
  wire scemi_scemi_clkgen_rMMCM_lock_1$EN;

  // register scemi_scemi_clkgen_rMMCM_lock_2
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_lock_2;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_lock_2$D_IN;
  wire scemi_scemi_clkgen_rMMCM_lock_2$EN;

  // register scemi_scemi_clkgen_rMMCM_lock_3
  reg [15 : 0] scemi_scemi_clkgen_rMMCM_lock_3;
  wire [15 : 0] scemi_scemi_clkgen_rMMCM_lock_3$D_IN;
  wire scemi_scemi_clkgen_rMMCM_lock_3$EN;

  // register scemi_scemi_clkgen_rMMCM_start
  reg scemi_scemi_clkgen_rMMCM_start;
  wire scemi_scemi_clkgen_rMMCM_start$D_IN, scemi_scemi_clkgen_rMMCM_start$EN;

  // register scemi_scemi_clkgen_rMMCM_start_d1
  reg scemi_scemi_clkgen_rMMCM_start_d1;
  wire scemi_scemi_clkgen_rMMCM_start_d1$D_IN,
       scemi_scemi_clkgen_rMMCM_start_d1$EN;

  // register scemi_scemi_clkgen_rMMCM_swrst
  reg scemi_scemi_clkgen_rMMCM_swrst;
  wire scemi_scemi_clkgen_rMMCM_swrst$D_IN, scemi_scemi_clkgen_rMMCM_swrst$EN;

  // register scemi_scemi_clkgen_rReset
  reg scemi_scemi_clkgen_rReset;
  wire scemi_scemi_clkgen_rReset$D_IN, scemi_scemi_clkgen_rReset$EN;

  // register scemi_scemi_clkgen_rSel
  reg scemi_scemi_clkgen_rSel;
  wire scemi_scemi_clkgen_rSel$D_IN, scemi_scemi_clkgen_rSel$EN;

  // register scemi_scemi_clkgen_rState
  reg [2 : 0] scemi_scemi_clkgen_rState;
  reg [2 : 0] scemi_scemi_clkgen_rState$D_IN;
  wire scemi_scemi_clkgen_rState$EN;

  // register scemi_scemi_clkgen_rWrData
  reg [15 : 0] scemi_scemi_clkgen_rWrData;
  wire [15 : 0] scemi_scemi_clkgen_rWrData$D_IN;
  wire scemi_scemi_clkgen_rWrData$EN;

  // register scemi_scemi_clkgen_rWrEn
  reg scemi_scemi_clkgen_rWrEn;
  wire scemi_scemi_clkgen_rWrEn$D_IN, scemi_scemi_clkgen_rWrEn$EN;

  // register scemi_shutdown_ctrl_in_dataF_rv
  reg [1 : 0] scemi_shutdown_ctrl_in_dataF_rv;
  wire [1 : 0] scemi_shutdown_ctrl_in_dataF_rv$D_IN;
  wire scemi_shutdown_ctrl_in_dataF_rv$EN;

  // register scemi_shutdown_ctrl_in_in_reset_noc
  reg scemi_shutdown_ctrl_in_in_reset_noc;
  wire scemi_shutdown_ctrl_in_in_reset_noc$D_IN,
       scemi_shutdown_ctrl_in_in_reset_noc$EN;

  // register scemi_shutdown_ctrl_in_in_reset_uclk
  reg scemi_shutdown_ctrl_in_in_reset_uclk;
  wire scemi_shutdown_ctrl_in_in_reset_uclk$D_IN,
       scemi_shutdown_ctrl_in_in_reset_uclk$EN;

  // register scemi_shutdown_ctrl_in_prev_reset_uclk
  reg scemi_shutdown_ctrl_in_prev_reset_uclk;
  wire scemi_shutdown_ctrl_in_prev_reset_uclk$D_IN,
       scemi_shutdown_ctrl_in_prev_reset_uclk$EN;

  // register scemi_shutdown_ctrl_in_remaining
  reg scemi_shutdown_ctrl_in_remaining;
  wire scemi_shutdown_ctrl_in_remaining$D_IN,
       scemi_shutdown_ctrl_in_remaining$EN;

  // register scemi_shutdown_ctrl_in_requestF_rv
  reg scemi_shutdown_ctrl_in_requestF_rv;
  wire scemi_shutdown_ctrl_in_requestF_rv$D_IN,
       scemi_shutdown_ctrl_in_requestF_rv$EN;

  // register scemi_shutdown_ctrl_in_scemiInportBeats
  reg [31 : 0] scemi_shutdown_ctrl_in_scemiInportBeats;
  wire [31 : 0] scemi_shutdown_ctrl_in_scemiInportBeats$D_IN;
  wire scemi_shutdown_ctrl_in_scemiInportBeats$EN;

  // register scemi_shutdown_ctrl_in_status
  reg [1 : 0] scemi_shutdown_ctrl_in_status;
  reg [1 : 0] scemi_shutdown_ctrl_in_status$D_IN;
  wire scemi_shutdown_ctrl_in_status$EN;

  // register scemi_shutdown_ctrl_out_beats
  reg [31 : 0] scemi_shutdown_ctrl_out_beats;
  wire [31 : 0] scemi_shutdown_ctrl_out_beats$D_IN;
  wire scemi_shutdown_ctrl_out_beats$EN;

  // register scemi_shutdown_ctrl_out_count
  reg scemi_shutdown_ctrl_out_count;
  wire scemi_shutdown_ctrl_out_count$D_IN, scemi_shutdown_ctrl_out_count$EN;

  // register scemi_shutdown_ctrl_out_in_reset_noc
  reg scemi_shutdown_ctrl_out_in_reset_noc;
  wire scemi_shutdown_ctrl_out_in_reset_noc$D_IN,
       scemi_shutdown_ctrl_out_in_reset_noc$EN;

  // register scemi_shutdown_ctrl_out_in_reset_uclk
  reg scemi_shutdown_ctrl_out_in_reset_uclk;
  wire scemi_shutdown_ctrl_out_in_reset_uclk$D_IN,
       scemi_shutdown_ctrl_out_in_reset_uclk$EN;

  // register scemi_shutdown_ctrl_out_ok
  reg scemi_shutdown_ctrl_out_ok;
  wire scemi_shutdown_ctrl_out_ok$D_IN, scemi_shutdown_ctrl_out_ok$EN;

  // register scemi_shutdown_ctrl_out_prev_reset_uclk
  reg scemi_shutdown_ctrl_out_prev_reset_uclk;
  wire scemi_shutdown_ctrl_out_prev_reset_uclk$D_IN,
       scemi_shutdown_ctrl_out_prev_reset_uclk$EN;

  // register scemi_shutdown_shutdown_pending
  reg scemi_shutdown_shutdown_pending;
  wire scemi_shutdown_shutdown_pending$D_IN,
       scemi_shutdown_shutdown_pending$EN;

  // register scemi_start_inport_dataF_rv
  reg [1 : 0] scemi_start_inport_dataF_rv;
  wire [1 : 0] scemi_start_inport_dataF_rv$D_IN;
  wire scemi_start_inport_dataF_rv$EN;

  // register scemi_start_inport_in_reset_noc
  reg scemi_start_inport_in_reset_noc;
  wire scemi_start_inport_in_reset_noc$D_IN,
       scemi_start_inport_in_reset_noc$EN;

  // register scemi_start_inport_in_reset_uclk
  reg scemi_start_inport_in_reset_uclk;
  wire scemi_start_inport_in_reset_uclk$D_IN,
       scemi_start_inport_in_reset_uclk$EN;

  // register scemi_start_inport_prev_reset_uclk
  reg scemi_start_inport_prev_reset_uclk;
  wire scemi_start_inport_prev_reset_uclk$D_IN,
       scemi_start_inport_prev_reset_uclk$EN;

  // register scemi_start_inport_remaining
  reg scemi_start_inport_remaining;
  wire scemi_start_inport_remaining$D_IN, scemi_start_inport_remaining$EN;

  // register scemi_start_inport_requestF_rv
  reg scemi_start_inport_requestF_rv;
  wire scemi_start_inport_requestF_rv$D_IN, scemi_start_inport_requestF_rv$EN;

  // register scemi_start_inport_scemiInportBeats
  reg [31 : 0] scemi_start_inport_scemiInportBeats;
  wire [31 : 0] scemi_start_inport_scemiInportBeats$D_IN;
  wire scemi_start_inport_scemiInportBeats$EN;

  // register scemi_start_inport_status
  reg [1 : 0] scemi_start_inport_status;
  reg [1 : 0] scemi_start_inport_status$D_IN;
  wire scemi_start_inport_status$EN;

  // ports of submodule _unnamed_
  wire _unnamed_$DOUT;

  // ports of submodule _unnamed__1
  wire _unnamed__1$DOUT;

  // ports of submodule _unnamed__2
  wire _unnamed__2$DOUT;

  // ports of submodule _unnamed__3
  wire _unnamed__3$DOUT;

  // ports of submodule clk_gen_clkout0buffer
  wire clk_gen_clkout0buffer$O;

  // ports of submodule clk_gen_clkout1buffer
  wire clk_gen_clkout1buffer$O;

  // ports of submodule clk_gen_pll
  wire clk_gen_pll$CLKFBIN,
       clk_gen_pll$CLKFBOUT,
       clk_gen_pll$CLKOUT0,
       clk_gen_pll$CLKOUT0B,
       clk_gen_pll$CLKOUT1,
       clk_gen_pll$CLKOUT1B,
       clk_gen_pll$CLKOUT2,
       clk_gen_pll$CLKOUT2B,
       clk_gen_pll$CLKOUT3,
       clk_gen_pll$CLKOUT3B,
       clk_gen_pll$CLKOUT4,
       clk_gen_pll$CLKOUT5,
       clk_gen_pll$CLKOUT6;

  // ports of submodule clk_gen_pll_clkfbbuf
  wire clk_gen_pll_clkfbbuf$O;

  // ports of submodule clk_gen_pll_reset
  wire clk_gen_pll_reset$RESET_OUT;

  // ports of submodule clk_gen_rst_n
  wire clk_gen_rst_n$OUT_RST;

  // ports of submodule connectDDR3_jointReset
  wire connectDDR3_jointReset$OUT_RST;

  // ports of submodule connectDDR3_jointReset1
  wire connectDDR3_jointReset1$RST_OUT;

  // ports of submodule connectDDR3_reqFIFO
  wire [600 : 0] connectDDR3_reqFIFO$dD_OUT, connectDDR3_reqFIFO$sD_IN;
  wire connectDDR3_reqFIFO$dDEQ,
       connectDDR3_reqFIFO$dEMPTY_N,
       connectDDR3_reqFIFO$sENQ,
       connectDDR3_reqFIFO$sFULL_N;

  // ports of submodule connectDDR3_respFIFO
  wire [511 : 0] connectDDR3_respFIFO$dD_OUT, connectDDR3_respFIFO$sD_IN;
  wire connectDDR3_respFIFO$dDEQ,
       connectDDR3_respFIFO$dEMPTY_N,
       connectDDR3_respFIFO$sENQ,
       connectDDR3_respFIFO$sFULL_N;

  // ports of submodule connectDDR3_uRst_dclk
  wire connectDDR3_uRst_dclk$OUT_RST;

  // ports of submodule ddr3_ctrl
  wire [255 : 0] ddr3_ctrl$app_rd_data, ddr3_ctrl$app_wdf_data;
  wire [63 : 0] ddr3_ctrl$ddr3_dq;
  wire [31 : 0] ddr3_ctrl$app_wdf_mask;
  wire [28 : 0] ddr3_ctrl$app_addr;
  wire [14 : 0] ddr3_ctrl$ddr3_addr;
  wire [7 : 0] ddr3_ctrl$ddr3_dm, ddr3_ctrl$ddr3_dqs_n, ddr3_ctrl$ddr3_dqs_p;
  wire [2 : 0] ddr3_ctrl$app_cmd, ddr3_ctrl$ddr3_ba;
  wire ddr3_ctrl$app_en,
       ddr3_ctrl$app_rd_data_valid,
       ddr3_ctrl$app_rdy,
       ddr3_ctrl$app_wdf_end,
       ddr3_ctrl$app_wdf_rdy,
       ddr3_ctrl$app_wdf_wren,
       ddr3_ctrl$ddr3_cas_n,
       ddr3_ctrl$ddr3_ck_n,
       ddr3_ctrl$ddr3_ck_p,
       ddr3_ctrl$ddr3_cke,
       ddr3_ctrl$ddr3_cs_n,
       ddr3_ctrl$ddr3_odt,
       ddr3_ctrl$ddr3_ras_n,
       ddr3_ctrl$ddr3_reset_n,
       ddr3_ctrl$ddr3_we_n,
       ddr3_ctrl$init_calib_complete,
       ddr3_ctrl$ui_clk,
       ddr3_ctrl$ui_clk_sync_rst;

  // ports of submodule ddr3_ctrl_dly_reset_n_rstifc
  wire ddr3_ctrl_dly_reset_n_rstifc$ASSERT_IN;

  // ports of submodule ddr3_ctrl_fRequest
  wire [604 : 0] ddr3_ctrl_fRequest$D_IN, ddr3_ctrl_fRequest$D_OUT;
  wire ddr3_ctrl_fRequest$CLR,
       ddr3_ctrl_fRequest$DEQ,
       ddr3_ctrl_fRequest$EMPTY_N,
       ddr3_ctrl_fRequest$ENQ,
       ddr3_ctrl_fRequest$FULL_N;

  // ports of submodule ddr3_ctrl_fResponse
  wire [511 : 0] ddr3_ctrl_fResponse$D_IN, ddr3_ctrl_fResponse$D_OUT;
  wire ddr3_ctrl_fResponse$CLR,
       ddr3_ctrl_fResponse$DEQ,
       ddr3_ctrl_fResponse$EMPTY_N,
       ddr3_ctrl_fResponse$ENQ,
       ddr3_ctrl_fResponse$FULL_N;

  // ports of submodule ddr3_ctrl_rReadsPending
  wire [31 : 0] ddr3_ctrl_rReadsPending$DATA_A,
		ddr3_ctrl_rReadsPending$DATA_B,
		ddr3_ctrl_rReadsPending$DATA_C,
		ddr3_ctrl_rReadsPending$DATA_F;
  wire ddr3_ctrl_rReadsPending$ADDA,
       ddr3_ctrl_rReadsPending$ADDB,
       ddr3_ctrl_rReadsPending$SETC,
       ddr3_ctrl_rReadsPending$SETF;

  // ports of submodule ddr3_ctrl_user_reset0_n
  wire ddr3_ctrl_user_reset0_n$RESET_OUT;

  // ports of submodule ddr3_ctrl_user_reset_n
  wire ddr3_ctrl_user_reset_n$OUT_RST;

  // ports of submodule ddr3ref_rst_n
  wire ddr3ref_rst_n$OUT_RST;

  // ports of submodule rst_n
  wire rst_n$OUT_RST;

  // ports of submodule scemi_1_fifoTxData_dCombinedReset
  wire scemi_1_fifoTxData_dCombinedReset$RST_OUT;

  // ports of submodule scemi_1_fifoTxData_dCrossedsReset
  wire scemi_1_fifoTxData_dCrossedsReset$OUT_RST;

  // ports of submodule scemi_1_fifoTxData_sCombinedReset
  wire scemi_1_fifoTxData_sCombinedReset$RST_OUT;

  // ports of submodule scemi_1_fifoTxData_sCrosseddReset
  wire scemi_1_fifoTxData_sCrosseddReset$OUT_RST;

  // ports of submodule scemi_1_outFifo
  wire [80 : 0] scemi_1_outFifo$D_IN, scemi_1_outFifo$D_OUT;
  wire scemi_1_outFifo$CLR,
       scemi_1_outFifo$DEQ,
       scemi_1_outFifo$EMPTY_N,
       scemi_1_outFifo$ENQ,
       scemi_1_outFifo$FULL_N;

  // ports of submodule scemi_Prelude_inst_changeSpecialWires_outstanding
  wire [4 : 0] scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_A,
	       scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_B,
	       scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_C,
	       scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_F,
	       scemi_Prelude_inst_changeSpecialWires_outstanding$Q_OUT;
  wire scemi_Prelude_inst_changeSpecialWires_outstanding$ADDA,
       scemi_Prelude_inst_changeSpecialWires_outstanding$ADDB,
       scemi_Prelude_inst_changeSpecialWires_outstanding$SETC,
       scemi_Prelude_inst_changeSpecialWires_outstanding$SETF;

  // ports of submodule scemi_Prelude_inst_changeSpecialWires_respbuf
  wire [511 : 0] scemi_Prelude_inst_changeSpecialWires_respbuf$D_IN,
		 scemi_Prelude_inst_changeSpecialWires_respbuf$D_OUT;
  wire scemi_Prelude_inst_changeSpecialWires_respbuf$CLR,
       scemi_Prelude_inst_changeSpecialWires_respbuf$DEQ,
       scemi_Prelude_inst_changeSpecialWires_respbuf$EMPTY_N,
       scemi_Prelude_inst_changeSpecialWires_respbuf$ENQ,
       scemi_Prelude_inst_changeSpecialWires_respbuf$FULL_N;

  // ports of submodule scemi_bridge
  wire [152 : 0] scemi_bridge$tlps_fst_get, scemi_bridge$tlps_snd_put;
  wire [31 : 0] scemi_bridge$clocks_request_get,
		scemi_bridge$clocks_response_put,
		scemi_bridge$noc_in_beat_v,
		scemi_bridge$noc_out_beat;
  wire scemi_bridge$EN_clocks_request_get,
       scemi_bridge$EN_clocks_response_put,
       scemi_bridge$EN_msi_interrupt_clear,
       scemi_bridge$EN_tlps_fst_get,
       scemi_bridge$EN_tlps_snd_put,
       scemi_bridge$RDY_clocks_request_get,
       scemi_bridge$RDY_clocks_response_put,
       scemi_bridge$RDY_tlps_fst_get,
       scemi_bridge$RDY_tlps_snd_put,
       scemi_bridge$is_activated,
       scemi_bridge$noc_in_dst_rdy,
       scemi_bridge$noc_in_src_rdy_b,
       scemi_bridge$noc_out_dst_rdy_b,
       scemi_bridge$noc_out_src_rdy,
       scemi_bridge$status_bluenoc_link_is_up_i,
       scemi_bridge$status_interrupts_enabled_i,
       scemi_bridge$status_memory_enabled_i,
       scemi_bridge$status_out_of_reset_i,
       scemi_bridge$status_pcie_link_is_up_i;

  // ports of submodule scemi_clk_port_cReset
  wire scemi_clk_port_cReset$O;

  // ports of submodule scemi_clk_port_clkgen
  wire scemi_clk_port_clkgen$CLK_IN,
       scemi_clk_port_clkgen$CLK_IN_EN,
       scemi_clk_port_clkgen$CLK_OUT,
       scemi_clk_port_clkgen$COND_IN,
       scemi_clk_port_clkgen$COND_IN_EN;

  // ports of submodule scemi_clk_port_rstgen_final_reset
  wire scemi_clk_port_rstgen_final_reset$RST_OUT;

  // ports of submodule scemi_clk_port_rstgen_inv_clk
  wire scemi_clk_port_rstgen_inv_clk$CLK_OUT;

  // ports of submodule scemi_clk_port_rstgen_inv_rstgen
  wire scemi_clk_port_rstgen_inv_rstgen$ASSERT_IN,
       scemi_clk_port_rstgen_inv_rstgen$OUT_RST;

  // ports of submodule scemi_clk_port_rstgen_inv_rstn
  wire scemi_clk_port_rstgen_inv_rstn$OUT_RST;

  // ports of submodule scemi_clk_port_rstgen_rstgen
  wire scemi_clk_port_rstgen_rstgen$ASSERT_IN,
       scemi_clk_port_rstgen_rstgen$OUT_RST;

  // ports of submodule scemi_clkgen_clkout0buffer
  wire scemi_clkgen_clkout0buffer$O;

  // ports of submodule scemi_clkgen_pll
  wire scemi_clkgen_pll$CLKFBIN,
       scemi_clkgen_pll$CLKFBOUT,
       scemi_clkgen_pll$CLKOUT0,
       scemi_clkgen_pll$CLKOUT0B,
       scemi_clkgen_pll$CLKOUT1,
       scemi_clkgen_pll$CLKOUT1B,
       scemi_clkgen_pll$CLKOUT2,
       scemi_clkgen_pll$CLKOUT2B,
       scemi_clkgen_pll$CLKOUT3,
       scemi_clkgen_pll$CLKOUT3B,
       scemi_clkgen_pll$CLKOUT4,
       scemi_clkgen_pll$CLKOUT5,
       scemi_clkgen_pll$CLKOUT6;

  // ports of submodule scemi_clkgen_pll_clkfbbuf
  wire scemi_clkgen_pll_clkfbbuf$O;

  // ports of submodule scemi_clkgen_pll_reset
  wire scemi_clkgen_pll_reset$RESET_OUT;

  // ports of submodule scemi_clkgen_rst_n
  wire scemi_clkgen_rst_n$OUT_RST;

  // ports of submodule scemi_clockGenerators_clock_gens_counters_pre_negedge_uclk
  wire scemi_clockGenerators_clock_gens_counters_pre_negedge_uclk$sD_IN,
       scemi_clockGenerators_clock_gens_counters_pre_negedge_uclk$sEN;

  // ports of submodule scemi_clockGenerators_clock_gens_counters_pre_posedge_uclk
  wire scemi_clockGenerators_clock_gens_counters_pre_posedge_uclk$sD_IN,
       scemi_clockGenerators_clock_gens_counters_pre_posedge_uclk$sEN;

  // ports of submodule scemi_clockGenerators_one_to_one_cclock_pre_negedge_uclk
  wire scemi_clockGenerators_one_to_one_cclock_pre_negedge_uclk$sD_IN,
       scemi_clockGenerators_one_to_one_cclock_pre_negedge_uclk$sEN;

  // ports of submodule scemi_clockGenerators_one_to_one_cclock_pre_posedge_uclk
  wire scemi_clockGenerators_one_to_one_cclock_pre_posedge_uclk$sD_IN,
       scemi_clockGenerators_one_to_one_cclock_pre_posedge_uclk$sEN;

  // ports of submodule scemi_count_outport_ending_reset
  wire scemi_count_outport_ending_reset$dPulse,
       scemi_count_outport_ending_reset$sEN;

  // ports of submodule scemi_count_outport_finished
  wire scemi_count_outport_finished$dPulse,
       scemi_count_outport_finished$sEN,
       scemi_count_outport_finished$sRDY;

  // ports of submodule scemi_count_outport_next
  wire scemi_count_outport_next$dPulse,
       scemi_count_outport_next$sEN,
       scemi_count_outport_next$sRDY;

  // ports of submodule scemi_count_outport_nocResetUClock
  wire scemi_count_outport_nocResetUClock$OUT_RST;

  // ports of submodule scemi_count_outport_starting_reset
  wire scemi_count_outport_starting_reset$dPulse,
       scemi_count_outport_starting_reset$sEN;

  // ports of submodule scemi_count_res_fifo
  wire [63 : 0] scemi_count_res_fifo$dD_OUT, scemi_count_res_fifo$sD_IN;
  wire scemi_count_res_fifo$dDEQ,
       scemi_count_res_fifo$dEMPTY_N,
       scemi_count_res_fifo$sENQ,
       scemi_count_res_fifo$sFULL_N;

  // ports of submodule scemi_data_req_inport_buffer_empty_sp
  wire scemi_data_req_inport_buffer_empty_sp$dPulse,
       scemi_data_req_inport_buffer_empty_sp$sEN,
       scemi_data_req_inport_buffer_empty_sp$sRDY;

  // ports of submodule scemi_data_req_inport_buffer_full_sp
  wire scemi_data_req_inport_buffer_full_sp$dPulse,
       scemi_data_req_inport_buffer_full_sp$sEN,
       scemi_data_req_inport_buffer_full_sp$sRDY;

  // ports of submodule scemi_data_req_inport_ending_reset
  wire scemi_data_req_inport_ending_reset$dPulse,
       scemi_data_req_inport_ending_reset$sEN;

  // ports of submodule scemi_data_req_inport_next_sp
  wire scemi_data_req_inport_next_sp$dPulse,
       scemi_data_req_inport_next_sp$sEN,
       scemi_data_req_inport_next_sp$sRDY;

  // ports of submodule scemi_data_req_inport_nocResetUClock
  wire scemi_data_req_inport_nocResetUClock$OUT_RST;

  // ports of submodule scemi_data_req_inport_starting_reset
  wire scemi_data_req_inport_starting_reset$dPulse,
       scemi_data_req_inport_starting_reset$sEN;

  // ports of submodule scemi_data_req_inport_wait_sp
  wire scemi_data_req_inport_wait_sp$dPulse,
       scemi_data_req_inport_wait_sp$sEN,
       scemi_data_req_inport_wait_sp$sRDY;

  // ports of submodule scemi_data_req_res_fifo
  wire [3 : 0] scemi_data_req_res_fifo$dD_OUT, scemi_data_req_res_fifo$sD_IN;
  wire scemi_data_req_res_fifo$dDEQ,
       scemi_data_req_res_fifo$dEMPTY_N,
       scemi_data_req_res_fifo$sENQ,
       scemi_data_req_res_fifo$sFULL_N;

  // ports of submodule scemi_data_resp_outport_ending_reset
  wire scemi_data_resp_outport_ending_reset$dPulse,
       scemi_data_resp_outport_ending_reset$sEN;

  // ports of submodule scemi_data_resp_outport_finished
  wire scemi_data_resp_outport_finished$dPulse,
       scemi_data_resp_outport_finished$sEN,
       scemi_data_resp_outport_finished$sRDY;

  // ports of submodule scemi_data_resp_outport_next
  wire scemi_data_resp_outport_next$dPulse,
       scemi_data_resp_outport_next$sEN,
       scemi_data_resp_outport_next$sRDY;

  // ports of submodule scemi_data_resp_outport_nocResetUClock
  wire scemi_data_resp_outport_nocResetUClock$OUT_RST;

  // ports of submodule scemi_data_resp_outport_starting_reset
  wire scemi_data_resp_outport_starting_reset$dPulse,
       scemi_data_resp_outport_starting_reset$sEN;

  // ports of submodule scemi_data_resp_res_fifo
  wire [3 : 0] scemi_data_resp_res_fifo$dD_OUT,
	       scemi_data_resp_res_fifo$sD_IN;
  wire scemi_data_resp_res_fifo$dDEQ,
       scemi_data_resp_res_fifo$dEMPTY_N,
       scemi_data_resp_res_fifo$sENQ,
       scemi_data_resp_res_fifo$sFULL_N;

  // ports of submodule scemi_dut_dut_dutIfc_didreset
  wire scemi_dut_dut_dutIfc_didreset$CLR,
       scemi_dut_dut_dutIfc_didreset$DEQ,
       scemi_dut_dut_dutIfc_didreset$D_IN,
       scemi_dut_dut_dutIfc_didreset$D_OUT,
       scemi_dut_dut_dutIfc_didreset$EMPTY_N,
       scemi_dut_dut_dutIfc_didreset$ENQ,
       scemi_dut_dut_dutIfc_didreset$FULL_N;

  // ports of submodule scemi_dut_dut_dutIfc_m_dut
  wire [600 : 0] scemi_dut_dut_dutIfc_m_dut$ddr3client_request_get;
  wire [511 : 0] scemi_dut_dut_dutIfc_m_dut$ddr3client_response_put;
  wire [63 : 0] scemi_dut_dut_dutIfc_m_dut$count_get;
  wire [3 : 0] scemi_dut_dut_dutIfc_m_dut$data_request_put,
	       scemi_dut_dut_dutIfc_m_dut$data_response_get;
  wire scemi_dut_dut_dutIfc_m_dut$EN_count_get,
       scemi_dut_dut_dutIfc_m_dut$EN_data_request_put,
       scemi_dut_dut_dutIfc_m_dut$EN_data_response_get,
       scemi_dut_dut_dutIfc_m_dut$EN_ddr3client_request_get,
       scemi_dut_dut_dutIfc_m_dut$EN_ddr3client_response_put,
       scemi_dut_dut_dutIfc_m_dut$EN_start_put,
       scemi_dut_dut_dutIfc_m_dut$RDY_count_get,
       scemi_dut_dut_dutIfc_m_dut$RDY_data_request_put,
       scemi_dut_dut_dutIfc_m_dut$RDY_data_response_get,
       scemi_dut_dut_dutIfc_m_dut$RDY_ddr3client_request_get,
       scemi_dut_dut_dutIfc_m_dut$RDY_ddr3client_response_put,
       scemi_dut_dut_dutIfc_m_dut$start_put;

  // ports of submodule scemi_dut_dut_dutIfc_myrst
  wire scemi_dut_dut_dutIfc_myrst$ASSERT_IN,
       scemi_dut_dut_dutIfc_myrst$ASSERT_OUT,
       scemi_dut_dut_dutIfc_myrst$OUT_RST;

  // ports of submodule scemi_dut_dut_prb_control_ackFifo
  wire [31 : 0] scemi_dut_dut_prb_control_ackFifo$D_IN,
		scemi_dut_dut_prb_control_ackFifo$D_OUT;
  wire scemi_dut_dut_prb_control_ackFifo$CLR,
       scemi_dut_dut_prb_control_ackFifo$DEQ,
       scemi_dut_dut_prb_control_ackFifo$EMPTY_N,
       scemi_dut_dut_prb_control_ackFifo$ENQ,
       scemi_dut_dut_prb_control_ackFifo$FULL_N;

  // ports of submodule scemi_dut_dut_prb_control_control_in_buffer_empty_sp
  wire scemi_dut_dut_prb_control_control_in_buffer_empty_sp$dPulse,
       scemi_dut_dut_prb_control_control_in_buffer_empty_sp$sEN,
       scemi_dut_dut_prb_control_control_in_buffer_empty_sp$sRDY;

  // ports of submodule scemi_dut_dut_prb_control_control_in_buffer_full_sp
  wire scemi_dut_dut_prb_control_control_in_buffer_full_sp$dPulse,
       scemi_dut_dut_prb_control_control_in_buffer_full_sp$sEN,
       scemi_dut_dut_prb_control_control_in_buffer_full_sp$sRDY;

  // ports of submodule scemi_dut_dut_prb_control_control_in_ending_reset
  wire scemi_dut_dut_prb_control_control_in_ending_reset$dPulse,
       scemi_dut_dut_prb_control_control_in_ending_reset$sEN;

  // ports of submodule scemi_dut_dut_prb_control_control_in_next_sp
  wire scemi_dut_dut_prb_control_control_in_next_sp$dPulse,
       scemi_dut_dut_prb_control_control_in_next_sp$sEN,
       scemi_dut_dut_prb_control_control_in_next_sp$sRDY;

  // ports of submodule scemi_dut_dut_prb_control_control_in_nocResetUClock
  wire scemi_dut_dut_prb_control_control_in_nocResetUClock$OUT_RST;

  // ports of submodule scemi_dut_dut_prb_control_control_in_starting_reset
  wire scemi_dut_dut_prb_control_control_in_starting_reset$dPulse,
       scemi_dut_dut_prb_control_control_in_starting_reset$sEN;

  // ports of submodule scemi_dut_dut_prb_control_control_in_wait_sp
  wire scemi_dut_dut_prb_control_control_in_wait_sp$dPulse,
       scemi_dut_dut_prb_control_control_in_wait_sp$sEN,
       scemi_dut_dut_prb_control_control_in_wait_sp$sRDY;

  // ports of submodule scemi_dut_dut_prb_control_data_out_ending_reset
  wire scemi_dut_dut_prb_control_data_out_ending_reset$dPulse,
       scemi_dut_dut_prb_control_data_out_ending_reset$sEN;

  // ports of submodule scemi_dut_dut_prb_control_data_out_finished
  wire scemi_dut_dut_prb_control_data_out_finished$dPulse,
       scemi_dut_dut_prb_control_data_out_finished$sEN,
       scemi_dut_dut_prb_control_data_out_finished$sRDY;

  // ports of submodule scemi_dut_dut_prb_control_data_out_next
  wire scemi_dut_dut_prb_control_data_out_next$dPulse,
       scemi_dut_dut_prb_control_data_out_next$sEN,
       scemi_dut_dut_prb_control_data_out_next$sRDY;

  // ports of submodule scemi_dut_dut_prb_control_data_out_nocResetUClock
  wire scemi_dut_dut_prb_control_data_out_nocResetUClock$OUT_RST;

  // ports of submodule scemi_dut_dut_prb_control_data_out_starting_reset
  wire scemi_dut_dut_prb_control_data_out_starting_reset$dPulse,
       scemi_dut_dut_prb_control_data_out_starting_reset$sEN;

  // ports of submodule scemi_dut_dut_prb_control_enff
  reg [18 : 0] scemi_dut_dut_prb_control_enff$D_IN;
  wire [18 : 0] scemi_dut_dut_prb_control_enff$D_OUT;
  wire scemi_dut_dut_prb_control_enff$CLR,
       scemi_dut_dut_prb_control_enff$DEQ,
       scemi_dut_dut_prb_control_enff$EMPTY_N,
       scemi_dut_dut_prb_control_enff$ENQ,
       scemi_dut_dut_prb_control_enff$FULL_N;

  // ports of submodule scemi_dut_dut_prb_control_prb_str
  wire [31 : 0] scemi_dut_dut_prb_control_prb_str$D_IN,
		scemi_dut_dut_prb_control_prb_str$D_OUT;
  wire scemi_dut_dut_prb_control_prb_str$CLR,
       scemi_dut_dut_prb_control_prb_str$DEQ,
       scemi_dut_dut_prb_control_prb_str$EMPTY_N,
       scemi_dut_dut_prb_control_prb_str$ENQ,
       scemi_dut_dut_prb_control_prb_str$FULL_N;

  // ports of submodule scemi_dut_dut_probeHook
  wire [31 : 0] scemi_dut_dut_probeHook$DATAUP;
  wire [18 : 0] scemi_dut_dut_probeHook$CMD;
  wire scemi_dut_dut_probeHook$ACK,
       scemi_dut_dut_probeHook$CMDEN,
       scemi_dut_dut_probeHook$CTIMER,
       scemi_dut_dut_probeHook$DATAVALID,
       scemi_dut_dut_probeHook$DELAY;

  // ports of submodule scemi_dut_softrst_req_inport_buffer_empty_sp
  wire scemi_dut_softrst_req_inport_buffer_empty_sp$dPulse,
       scemi_dut_softrst_req_inport_buffer_empty_sp$sEN,
       scemi_dut_softrst_req_inport_buffer_empty_sp$sRDY;

  // ports of submodule scemi_dut_softrst_req_inport_buffer_full_sp
  wire scemi_dut_softrst_req_inport_buffer_full_sp$dPulse,
       scemi_dut_softrst_req_inport_buffer_full_sp$sEN,
       scemi_dut_softrst_req_inport_buffer_full_sp$sRDY;

  // ports of submodule scemi_dut_softrst_req_inport_ending_reset
  wire scemi_dut_softrst_req_inport_ending_reset$dPulse,
       scemi_dut_softrst_req_inport_ending_reset$sEN;

  // ports of submodule scemi_dut_softrst_req_inport_next_sp
  wire scemi_dut_softrst_req_inport_next_sp$dPulse,
       scemi_dut_softrst_req_inport_next_sp$sEN,
       scemi_dut_softrst_req_inport_next_sp$sRDY;

  // ports of submodule scemi_dut_softrst_req_inport_nocResetUClock
  wire scemi_dut_softrst_req_inport_nocResetUClock$OUT_RST;

  // ports of submodule scemi_dut_softrst_req_inport_starting_reset
  wire scemi_dut_softrst_req_inport_starting_reset$dPulse,
       scemi_dut_softrst_req_inport_starting_reset$sEN;

  // ports of submodule scemi_dut_softrst_req_inport_wait_sp
  wire scemi_dut_softrst_req_inport_wait_sp$dPulse,
       scemi_dut_softrst_req_inport_wait_sp$sEN,
       scemi_dut_softrst_req_inport_wait_sp$sRDY;

  // ports of submodule scemi_dut_softrst_req_res_fifo
  wire scemi_dut_softrst_req_res_fifo$dDEQ,
       scemi_dut_softrst_req_res_fifo$dEMPTY_N,
       scemi_dut_softrst_req_res_fifo$sD_IN,
       scemi_dut_softrst_req_res_fifo$sENQ,
       scemi_dut_softrst_req_res_fifo$sFULL_N;

  // ports of submodule scemi_dut_softrst_resp_outport_ending_reset
  wire scemi_dut_softrst_resp_outport_ending_reset$dPulse,
       scemi_dut_softrst_resp_outport_ending_reset$sEN;

  // ports of submodule scemi_dut_softrst_resp_outport_finished
  wire scemi_dut_softrst_resp_outport_finished$dPulse,
       scemi_dut_softrst_resp_outport_finished$sEN,
       scemi_dut_softrst_resp_outport_finished$sRDY;

  // ports of submodule scemi_dut_softrst_resp_outport_next
  wire scemi_dut_softrst_resp_outport_next$dPulse,
       scemi_dut_softrst_resp_outport_next$sEN,
       scemi_dut_softrst_resp_outport_next$sRDY;

  // ports of submodule scemi_dut_softrst_resp_outport_nocResetUClock
  wire scemi_dut_softrst_resp_outport_nocResetUClock$OUT_RST;

  // ports of submodule scemi_dut_softrst_resp_outport_starting_reset
  wire scemi_dut_softrst_resp_outport_starting_reset$dPulse,
       scemi_dut_softrst_resp_outport_starting_reset$sEN;

  // ports of submodule scemi_dut_softrst_resp_res_fifo
  wire scemi_dut_softrst_resp_res_fifo$dDEQ,
       scemi_dut_softrst_resp_res_fifo$dD_OUT,
       scemi_dut_softrst_resp_res_fifo$dEMPTY_N,
       scemi_dut_softrst_resp_res_fifo$sD_IN,
       scemi_dut_softrst_resp_res_fifo$sENQ,
       scemi_dut_softrst_resp_res_fifo$sFULL_N;

  // ports of submodule scemi_epReset125
  wire scemi_epReset125$OUT_RST;

  // ports of submodule scemi_epReset250
  wire scemi_epReset250$OUT_RST;

  // ports of submodule scemi_fToBridgeBeat
  reg [31 : 0] scemi_fToBridgeBeat$D_IN;
  wire [31 : 0] scemi_fToBridgeBeat$D_OUT;
  wire scemi_fToBridgeBeat$CLR,
       scemi_fToBridgeBeat$DEQ,
       scemi_fToBridgeBeat$EMPTY_N,
       scemi_fToBridgeBeat$ENQ,
       scemi_fToBridgeBeat$FULL_N;

  // ports of submodule scemi_fifoRxData_dCombinedReset
  wire scemi_fifoRxData_dCombinedReset$RST_OUT;

  // ports of submodule scemi_fifoRxData_dCrossedsReset
  wire scemi_fifoRxData_dCrossedsReset$OUT_RST;

  // ports of submodule scemi_fifoRxData_sCombinedReset
  wire scemi_fifoRxData_sCombinedReset$RST_OUT;

  // ports of submodule scemi_fifoRxData_sCrosseddReset
  wire scemi_fifoRxData_sCrosseddReset$OUT_RST;

  // ports of submodule scemi_inFifo
  wire [80 : 0] scemi_inFifo$D_IN, scemi_inFifo$D_OUT;
  wire scemi_inFifo$CLR,
       scemi_inFifo$DEQ,
       scemi_inFifo$EMPTY_N,
       scemi_inFifo$ENQ,
       scemi_inFifo$FULL_N;

  // ports of submodule scemi_init_state_msgFIFO
  reg [73 : 0] scemi_init_state_msgFIFO$sD_IN;
  wire [73 : 0] scemi_init_state_msgFIFO$dD_OUT;
  wire scemi_init_state_msgFIFO$dDEQ,
       scemi_init_state_msgFIFO$dEMPTY_N,
       scemi_init_state_msgFIFO$sENQ,
       scemi_init_state_msgFIFO$sFULL_N;

  // ports of submodule scemi_network_status
  wire scemi_network_status$ASSERT_IN, scemi_network_status$OUT_RST;

  // ports of submodule scemi_pcie_ep
  wire [127 : 0] scemi_pcie_ep$cfg_err_aer_headerlog;
  wire [63 : 0] scemi_pcie_ep$cfg_dsn,
		scemi_pcie_ep$m_axis_rx_tdata,
		scemi_pcie_ep$s_axis_tx_tdata;
  wire [47 : 0] scemi_pcie_ep$cfg_err_tlp_cpl_header;
  wire [31 : 0] scemi_pcie_ep$cfg_mgmt_di;
  wire [21 : 0] scemi_pcie_ep$m_axis_rx_tuser;
  wire [15 : 0] scemi_pcie_ep$cfg_command,
		scemi_pcie_ep$cfg_dcommand,
		scemi_pcie_ep$cfg_lcommand;
  wire [9 : 0] scemi_pcie_ep$cfg_mgmt_dwaddr;
  wire [7 : 0] scemi_pcie_ep$cfg_bus_number,
	       scemi_pcie_ep$cfg_interrupt_di,
	       scemi_pcie_ep$m_axis_rx_tkeep,
	       scemi_pcie_ep$pci_exp_rxn,
	       scemi_pcie_ep$pci_exp_rxp,
	       scemi_pcie_ep$pci_exp_txn,
	       scemi_pcie_ep$pci_exp_txp,
	       scemi_pcie_ep$s_axis_tx_tkeep;
  wire [4 : 0] scemi_pcie_ep$cfg_aer_interrupt_msgnum,
	       scemi_pcie_ep$cfg_device_number,
	       scemi_pcie_ep$cfg_pciecap_interrupt_msgnum;
  wire [3 : 0] scemi_pcie_ep$cfg_mgmt_byte_en, scemi_pcie_ep$s_axis_tx_tuser;
  wire [2 : 0] scemi_pcie_ep$cfg_function_number, scemi_pcie_ep$fc_sel;
  wire [1 : 0] scemi_pcie_ep$cfg_pm_force_state,
	       scemi_pcie_ep$pl_directed_link_change,
	       scemi_pcie_ep$pl_directed_link_width;
  wire scemi_pcie_ep$cfg_err_acs,
       scemi_pcie_ep$cfg_err_atomic_egress_blocked,
       scemi_pcie_ep$cfg_err_cor,
       scemi_pcie_ep$cfg_err_cpl_abort,
       scemi_pcie_ep$cfg_err_cpl_timeout,
       scemi_pcie_ep$cfg_err_cpl_unexpect,
       scemi_pcie_ep$cfg_err_ecrc,
       scemi_pcie_ep$cfg_err_internal_cor,
       scemi_pcie_ep$cfg_err_internal_uncor,
       scemi_pcie_ep$cfg_err_locked,
       scemi_pcie_ep$cfg_err_malformed,
       scemi_pcie_ep$cfg_err_mc_blocked,
       scemi_pcie_ep$cfg_err_norecovery,
       scemi_pcie_ep$cfg_err_poisoned,
       scemi_pcie_ep$cfg_err_posted,
       scemi_pcie_ep$cfg_err_ur,
       scemi_pcie_ep$cfg_interrupt,
       scemi_pcie_ep$cfg_interrupt_assert,
       scemi_pcie_ep$cfg_interrupt_msixenable,
       scemi_pcie_ep$cfg_interrupt_msixfm,
       scemi_pcie_ep$cfg_interrupt_stat,
       scemi_pcie_ep$cfg_mgmt_rd_en,
       scemi_pcie_ep$cfg_mgmt_wr_en,
       scemi_pcie_ep$cfg_mgmt_wr_readonly,
       scemi_pcie_ep$cfg_pm_force_state_en,
       scemi_pcie_ep$cfg_pm_halt_aspm_l0s,
       scemi_pcie_ep$cfg_pm_halt_aspm_l1,
       scemi_pcie_ep$cfg_pm_wake,
       scemi_pcie_ep$cfg_trn_pending,
       scemi_pcie_ep$cfg_turnoff_ok,
       scemi_pcie_ep$m_axis_rx_tlast,
       scemi_pcie_ep$m_axis_rx_tready,
       scemi_pcie_ep$m_axis_rx_tvalid,
       scemi_pcie_ep$pl_directed_link_auton,
       scemi_pcie_ep$pl_directed_link_speed,
       scemi_pcie_ep$pl_upstream_prefer_deemph,
       scemi_pcie_ep$rx_np_ok,
       scemi_pcie_ep$rx_np_req,
       scemi_pcie_ep$s_axis_tx_tlast,
       scemi_pcie_ep$s_axis_tx_tready,
       scemi_pcie_ep$s_axis_tx_tvalid,
       scemi_pcie_ep$tx_cfg_gnt,
       scemi_pcie_ep$user_clk_out,
       scemi_pcie_ep$user_lnk_up,
       scemi_pcie_ep$user_reset_out;

  // ports of submodule scemi_pcie_ep_sys_reset
  wire scemi_pcie_ep_sys_reset$RESET_OUT;

  // ports of submodule scemi_reqFifo
  wire [600 : 0] scemi_reqFifo$dD_OUT, scemi_reqFifo$sD_IN;
  wire scemi_reqFifo$dDEQ,
       scemi_reqFifo$dEMPTY_N,
       scemi_reqFifo$sENQ,
       scemi_reqFifo$sFULL_N;

  // ports of submodule scemi_respFifo
  wire [511 : 0] scemi_respFifo$dD_OUT, scemi_respFifo$sD_IN;
  wire scemi_respFifo$dDEQ,
       scemi_respFifo$dEMPTY_N,
       scemi_respFifo$sENQ,
       scemi_respFifo$sFULL_N;

  // ports of submodule scemi_rstgen_final_reset
  wire scemi_rstgen_final_reset$RST_OUT;

  // ports of submodule scemi_rstgen_inv_clk
  wire scemi_rstgen_inv_clk$CLK_OUT;

  // ports of submodule scemi_rstgen_inv_rstgen
  wire scemi_rstgen_inv_rstgen$ASSERT_IN, scemi_rstgen_inv_rstgen$OUT_RST;

  // ports of submodule scemi_rstgen_inv_rstn
  wire scemi_rstgen_inv_rstn$OUT_RST;

  // ports of submodule scemi_rstgen_rstgen
  wire scemi_rstgen_rstgen$ASSERT_IN, scemi_rstgen_rstgen$OUT_RST;

  // ports of submodule scemi_scemi_clkgen_clkfbbuf
  wire scemi_scemi_clkgen_clkfbbuf$O;

  // ports of submodule scemi_scemi_clkgen_clkout0buf
  wire scemi_scemi_clkgen_clkout0buf$O;

  // ports of submodule scemi_scemi_clkgen_fRequest
  wire [21 : 0] scemi_scemi_clkgen_fRequest$D_IN,
		scemi_scemi_clkgen_fRequest$D_OUT;
  wire scemi_scemi_clkgen_fRequest$CLR,
       scemi_scemi_clkgen_fRequest$DEQ,
       scemi_scemi_clkgen_fRequest$EMPTY_N,
       scemi_scemi_clkgen_fRequest$ENQ,
       scemi_scemi_clkgen_fRequest$FULL_N;

  // ports of submodule scemi_scemi_clkgen_fResponse
  reg [15 : 0] scemi_scemi_clkgen_fResponse$D_IN;
  wire [15 : 0] scemi_scemi_clkgen_fResponse$D_OUT;
  wire scemi_scemi_clkgen_fResponse$CLR,
       scemi_scemi_clkgen_fResponse$DEQ,
       scemi_scemi_clkgen_fResponse$EMPTY_N,
       scemi_scemi_clkgen_fResponse$ENQ,
       scemi_scemi_clkgen_fResponse$FULL_N;

  // ports of submodule scemi_scemi_clkgen_mmcm
  wire [15 : 0] scemi_scemi_clkgen_mmcm$DI, scemi_scemi_clkgen_mmcm$DO;
  wire [6 : 0] scemi_scemi_clkgen_mmcm$DADDR;
  wire scemi_scemi_clkgen_mmcm$CLKFBIN,
       scemi_scemi_clkgen_mmcm$CLKFBOUT,
       scemi_scemi_clkgen_mmcm$CLKOUT0,
       scemi_scemi_clkgen_mmcm$CLKOUT0B,
       scemi_scemi_clkgen_mmcm$CLKOUT1,
       scemi_scemi_clkgen_mmcm$CLKOUT1B,
       scemi_scemi_clkgen_mmcm$CLKOUT2,
       scemi_scemi_clkgen_mmcm$CLKOUT2B,
       scemi_scemi_clkgen_mmcm$CLKOUT3,
       scemi_scemi_clkgen_mmcm$CLKOUT3B,
       scemi_scemi_clkgen_mmcm$CLKOUT4,
       scemi_scemi_clkgen_mmcm$CLKOUT5,
       scemi_scemi_clkgen_mmcm$CLKOUT6,
       scemi_scemi_clkgen_mmcm$DEN,
       scemi_scemi_clkgen_mmcm$DRDY,
       scemi_scemi_clkgen_mmcm$DWE,
       scemi_scemi_clkgen_mmcm$LOCKED,
       scemi_scemi_clkgen_mmcm$RST;

  // ports of submodule scemi_shutdown_ctrl_in_buffer_empty_sp
  wire scemi_shutdown_ctrl_in_buffer_empty_sp$dPulse,
       scemi_shutdown_ctrl_in_buffer_empty_sp$sEN,
       scemi_shutdown_ctrl_in_buffer_empty_sp$sRDY;

  // ports of submodule scemi_shutdown_ctrl_in_buffer_full_sp
  wire scemi_shutdown_ctrl_in_buffer_full_sp$dPulse,
       scemi_shutdown_ctrl_in_buffer_full_sp$sEN,
       scemi_shutdown_ctrl_in_buffer_full_sp$sRDY;

  // ports of submodule scemi_shutdown_ctrl_in_ending_reset
  wire scemi_shutdown_ctrl_in_ending_reset$dPulse,
       scemi_shutdown_ctrl_in_ending_reset$sEN;

  // ports of submodule scemi_shutdown_ctrl_in_next_sp
  wire scemi_shutdown_ctrl_in_next_sp$dPulse,
       scemi_shutdown_ctrl_in_next_sp$sEN,
       scemi_shutdown_ctrl_in_next_sp$sRDY;

  // ports of submodule scemi_shutdown_ctrl_in_nocResetUClock
  wire scemi_shutdown_ctrl_in_nocResetUClock$OUT_RST;

  // ports of submodule scemi_shutdown_ctrl_in_starting_reset
  wire scemi_shutdown_ctrl_in_starting_reset$dPulse,
       scemi_shutdown_ctrl_in_starting_reset$sEN;

  // ports of submodule scemi_shutdown_ctrl_in_wait_sp
  wire scemi_shutdown_ctrl_in_wait_sp$dPulse,
       scemi_shutdown_ctrl_in_wait_sp$sEN,
       scemi_shutdown_ctrl_in_wait_sp$sRDY;

  // ports of submodule scemi_shutdown_ctrl_out_ending_reset
  wire scemi_shutdown_ctrl_out_ending_reset$dPulse,
       scemi_shutdown_ctrl_out_ending_reset$sEN;

  // ports of submodule scemi_shutdown_ctrl_out_finished
  wire scemi_shutdown_ctrl_out_finished$dPulse,
       scemi_shutdown_ctrl_out_finished$sEN,
       scemi_shutdown_ctrl_out_finished$sRDY;

  // ports of submodule scemi_shutdown_ctrl_out_next
  wire scemi_shutdown_ctrl_out_next$dPulse,
       scemi_shutdown_ctrl_out_next$sEN,
       scemi_shutdown_ctrl_out_next$sRDY;

  // ports of submodule scemi_shutdown_ctrl_out_nocResetUClock
  wire scemi_shutdown_ctrl_out_nocResetUClock$OUT_RST;

  // ports of submodule scemi_shutdown_ctrl_out_starting_reset
  wire scemi_shutdown_ctrl_out_starting_reset$dPulse,
       scemi_shutdown_ctrl_out_starting_reset$sEN;

  // ports of submodule scemi_start_inport_buffer_empty_sp
  wire scemi_start_inport_buffer_empty_sp$dPulse,
       scemi_start_inport_buffer_empty_sp$sEN,
       scemi_start_inport_buffer_empty_sp$sRDY;

  // ports of submodule scemi_start_inport_buffer_full_sp
  wire scemi_start_inport_buffer_full_sp$dPulse,
       scemi_start_inport_buffer_full_sp$sEN,
       scemi_start_inport_buffer_full_sp$sRDY;

  // ports of submodule scemi_start_inport_ending_reset
  wire scemi_start_inport_ending_reset$dPulse,
       scemi_start_inport_ending_reset$sEN;

  // ports of submodule scemi_start_inport_next_sp
  wire scemi_start_inport_next_sp$dPulse,
       scemi_start_inport_next_sp$sEN,
       scemi_start_inport_next_sp$sRDY;

  // ports of submodule scemi_start_inport_nocResetUClock
  wire scemi_start_inport_nocResetUClock$OUT_RST;

  // ports of submodule scemi_start_inport_starting_reset
  wire scemi_start_inport_starting_reset$dPulse,
       scemi_start_inport_starting_reset$sEN;

  // ports of submodule scemi_start_inport_wait_sp
  wire scemi_start_inport_wait_sp$dPulse,
       scemi_start_inport_wait_sp$sEN,
       scemi_start_inport_wait_sp$sRDY;

  // ports of submodule scemi_start_res_fifo
  wire scemi_start_res_fifo$dDEQ,
       scemi_start_res_fifo$dD_OUT,
       scemi_start_res_fifo$dEMPTY_N,
       scemi_start_res_fifo$sD_IN,
       scemi_start_res_fifo$sENQ,
       scemi_start_res_fifo$sFULL_N;

  // ports of submodule scemi_sys_clk_buf
  wire scemi_sys_clk_buf$O;

  // ports of submodule scemi_uclkgen
  wire scemi_uclkgen$CLK_IN,
       scemi_uclkgen$CLK_IN_EN,
       scemi_uclkgen$CLK_OUT,
       scemi_uclkgen$CLK_VAL_OUT,
       scemi_uclkgen$COND_IN,
       scemi_uclkgen$COND_IN_EN;

  // ports of submodule scemi_user_reset_half
  wire scemi_user_reset_half$OUT_RST;

  // ports of submodule scemi_user_reset_n
  wire scemi_user_reset_n$RESET_OUT;

  // ports of submodule scemi_wIsOutOfReset
  wire scemi_wIsOutOfReset$DOUT;

  // ports of submodule sys_clk
  wire sys_clk$O;

  // rule scheduling signals
  wire CAN_FIRE_RL_always_accept_beat,
       CAN_FIRE_RL_clk_gen_pll_connect_feedback,
       CAN_FIRE_RL_connectDDR3_connectReqUser_mkConnectionGetPut,
       CAN_FIRE_RL_connectDDR3_connectRespUser_mkConnectionGetPut,
       CAN_FIRE_RL_connectDDR3_connect_requests,
       CAN_FIRE_RL_connectDDR3_connect_responses,
       CAN_FIRE_RL_ddr3_ctrl_dly_reset_n_count_down,
       CAN_FIRE_RL_ddr3_ctrl_drive_data_signals,
       CAN_FIRE_RL_ddr3_ctrl_drive_enables,
       CAN_FIRE_RL_ddr3_ctrl_ready_process_read_request,
       CAN_FIRE_RL_ddr3_ctrl_ready_process_read_response_first,
       CAN_FIRE_RL_ddr3_ctrl_ready_process_read_response_second,
       CAN_FIRE_RL_ddr3_ctrl_ready_process_write_request_first,
       CAN_FIRE_RL_ddr3_ctrl_ready_process_write_request_second,
       CAN_FIRE_RL_drive_memory_calibration,
       CAN_FIRE_RL_scemi_1_every,
       CAN_FIRE_RL_scemi_1_fifoTxData_dInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_scemi_1_fifoTxData_launder_dInReset,
       CAN_FIRE_RL_scemi_1_fifoTxData_launder_sInReset,
       CAN_FIRE_RL_scemi_1_fifoTxData_sInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_scemi_1_get_data,
       CAN_FIRE_RL_scemi_1_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_1_process_outgoing_packets,
       CAN_FIRE_RL_scemi_1_send_data,
       CAN_FIRE_RL_scemi_1_tie_off_inputs,
       CAN_FIRE_RL_scemi_2_1_connect_data,
       CAN_FIRE_RL_scemi_2_1_connect_dst_rdy,
       CAN_FIRE_RL_scemi_2_1_connect_src_rdy,
       CAN_FIRE_RL_scemi_2_connect_data,
       CAN_FIRE_RL_scemi_2_connect_dst_rdy,
       CAN_FIRE_RL_scemi_2_connect_src_rdy,
       CAN_FIRE_RL_scemi_2_tie_off_inputs,
       CAN_FIRE_RL_scemi_3_tie_off_inputs,
       CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_forward,
       CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_request,
       CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_response,
       CAN_FIRE_RL_scemi_accept_data,
       CAN_FIRE_RL_scemi_clk_port_rstgen_trigger,
       CAN_FIRE_RL_scemi_clkgen_pll_connect_feedback,
       CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall,
       CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_incr,
       CAN_FIRE_RL_scemi_clockGenerators_clock_gens_do_stall_scemi,
       CAN_FIRE_RL_scemi_clockGenerators_clock_gens_do_ticks,
       CAN_FIRE_RL_scemi_clockGenerators_clock_gens_is_allowed_sync_clock_domain_crossing,
       CAN_FIRE_RL_scemi_clockGenerators_clock_gens_manage_reset,
       CAN_FIRE_RL_scemi_clockGenerators_clock_gens_tick_clock,
       CAN_FIRE_RL_scemi_clockGenerators_clock_gens_update_stalled,
       CAN_FIRE_RL_scemi_clockGenerators_handle_reset,
       CAN_FIRE_RL_scemi_clockGenerators_incr_cycle_stamp,
       CAN_FIRE_RL_scemi_clockGenerators_one_to_one_cclock_incr,
       CAN_FIRE_RL_scemi_clockGenerators_stall_one_to_one_cclock,
       CAN_FIRE_RL_scemi_clockGenerators_track_reset,
       CAN_FIRE_RL_scemi_count_connect_get_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_count_outport_complete_reset_sequence,
       CAN_FIRE_RL_scemi_count_outport_deassert_after_reset,
       CAN_FIRE_RL_scemi_count_outport_detect_end_of_scemi_reset,
       CAN_FIRE_RL_scemi_count_outport_detect_scemi_reset,
       CAN_FIRE_RL_scemi_count_outport_handle_scemi_reset,
       CAN_FIRE_RL_scemi_count_outport_initiate_reset_sequence,
       CAN_FIRE_RL_scemi_count_outport_pok_mkConnectionVtoAf,
       CAN_FIRE_RL_scemi_count_outport_setOK,
       CAN_FIRE_RL_scemi_count_outport_update_count,
       CAN_FIRE_RL_scemi_cross_config_values,
       CAN_FIRE_RL_scemi_data_req_connect_put_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_data_req_connect_res_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_data_req_inport_complete_reset_sequence,
       CAN_FIRE_RL_scemi_data_req_inport_data_ready,
       CAN_FIRE_RL_scemi_data_req_inport_deassert_after_reset,
       CAN_FIRE_RL_scemi_data_req_inport_detect_end_of_scemi_reset,
       CAN_FIRE_RL_scemi_data_req_inport_detect_scemi_reset,
       CAN_FIRE_RL_scemi_data_req_inport_first_request,
       CAN_FIRE_RL_scemi_data_req_inport_handle_scemi_reset,
       CAN_FIRE_RL_scemi_data_req_inport_initiate_reset_sequence,
       CAN_FIRE_RL_scemi_data_req_inport_port_reset,
       CAN_FIRE_RL_scemi_data_req_inport_read_complete,
       CAN_FIRE_RL_scemi_data_req_inport_receive,
       CAN_FIRE_RL_scemi_data_req_inport_receive_ready,
       CAN_FIRE_RL_scemi_data_req_inport_update_remaining,
       CAN_FIRE_RL_scemi_data_req_request,
       CAN_FIRE_RL_scemi_data_resp_connect_get_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_data_resp_outport_complete_reset_sequence,
       CAN_FIRE_RL_scemi_data_resp_outport_deassert_after_reset,
       CAN_FIRE_RL_scemi_data_resp_outport_detect_end_of_scemi_reset,
       CAN_FIRE_RL_scemi_data_resp_outport_detect_scemi_reset,
       CAN_FIRE_RL_scemi_data_resp_outport_handle_scemi_reset,
       CAN_FIRE_RL_scemi_data_resp_outport_initiate_reset_sequence,
       CAN_FIRE_RL_scemi_data_resp_outport_pok_mkConnectionVtoAf,
       CAN_FIRE_RL_scemi_data_resp_outport_setOK,
       CAN_FIRE_RL_scemi_data_resp_outport_update_count,
       CAN_FIRE_RL_scemi_drive_axi_rx_ready,
       CAN_FIRE_RL_scemi_drive_axi_tx,
       CAN_FIRE_RL_scemi_drive_axi_tx_info,
       CAN_FIRE_RL_scemi_drive_status_bluenoc_link_up,
       CAN_FIRE_RL_scemi_drive_status_interrupts_enabled,
       CAN_FIRE_RL_scemi_drive_status_memory_enabled,
       CAN_FIRE_RL_scemi_drive_status_out_of_reset,
       CAN_FIRE_RL_scemi_drive_status_pcie_link_up,
       CAN_FIRE_RL_scemi_dut_dut_dutIfc_donerest,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_announceCclock,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_contextToPrbStr_connectCommitAck,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_contextToPrbStr_connectData,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_complete_reset_sequence,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_data_ready,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_deassert_after_reset,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_detect_end_of_scemi_reset,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_detect_scemi_reset,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_first_request,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_handle_scemi_reset,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_initiate_reset_sequence,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_port_reset,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_read_complete,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive_ready,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_update_remaining,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_complete_reset_sequence,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_deassert_after_reset,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_detect_end_of_scemi_reset,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_detect_scemi_reset,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_handle_scemi_reset,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_initiate_reset_sequence,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_pok_mkConnectionVtoAf,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_setOK,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_update_count,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_dutclkctrl_nconnect_mkConnectionVtoAf,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_dutclkctrl_pconnect_mkConnectionVtoAf,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_flagSample,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_prb_str_recv_doEnq,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveControl,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_requestInput,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_respondToPing,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_sendAck,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_send_en,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_setSample,
       CAN_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag,
       CAN_FIRE_RL_scemi_dut_softrst_req_connect_put_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_dut_softrst_req_connect_res_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_complete_reset_sequence,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_data_ready,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_deassert_after_reset,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_detect_end_of_scemi_reset,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_detect_scemi_reset,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_first_request,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_handle_scemi_reset,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_initiate_reset_sequence,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_port_reset,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_read_complete,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_receive,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_receive_ready,
       CAN_FIRE_RL_scemi_dut_softrst_req_inport_update_remaining,
       CAN_FIRE_RL_scemi_dut_softrst_req_request,
       CAN_FIRE_RL_scemi_dut_softrst_resp_connect_get_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_dut_softrst_resp_outport_complete_reset_sequence,
       CAN_FIRE_RL_scemi_dut_softrst_resp_outport_deassert_after_reset,
       CAN_FIRE_RL_scemi_dut_softrst_resp_outport_detect_end_of_scemi_reset,
       CAN_FIRE_RL_scemi_dut_softrst_resp_outport_detect_scemi_reset,
       CAN_FIRE_RL_scemi_dut_softrst_resp_outport_handle_scemi_reset,
       CAN_FIRE_RL_scemi_dut_softrst_resp_outport_initiate_reset_sequence,
       CAN_FIRE_RL_scemi_dut_softrst_resp_outport_pok_mkConnectionVtoAf,
       CAN_FIRE_RL_scemi_dut_softrst_resp_outport_setOK,
       CAN_FIRE_RL_scemi_dut_softrst_resp_outport_update_count,
       CAN_FIRE_RL_scemi_every,
       CAN_FIRE_RL_scemi_fFromBridgeBeat_ifc_update,
       CAN_FIRE_RL_scemi_fFromContinueBeat_ifc_update,
       CAN_FIRE_RL_scemi_fS1MsgOut_ifc_update,
       CAN_FIRE_RL_scemi_fS1OutPortAcks_ifc_update,
       CAN_FIRE_RL_scemi_fS2MsgOut_ifc_update,
       CAN_FIRE_RL_scemi_fToContinueBeat_ifc_update,
       CAN_FIRE_RL_scemi_fifoRxData_dInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_scemi_fifoRxData_launder_dInReset,
       CAN_FIRE_RL_scemi_fifoRxData_launder_sInReset,
       CAN_FIRE_RL_scemi_fifoRxData_sInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_scemi_init_state_track_reset,
       CAN_FIRE_RL_scemi_intr_ifc_ctl,
       CAN_FIRE_RL_scemi_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb,
       CAN_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks,
       CAN_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data,
       CAN_FIRE_RL_scemi_msg_sink_noc_active_receive_beat_from_bridge,
       CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header,
       CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_disregard_packet,
       CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data,
       CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb,
       CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb,
       CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi2_disregard_packet,
       CAN_FIRE_RL_scemi_msg_sink_noc_inactive,
       CAN_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages,
       CAN_FIRE_RL_scemi_msg_source_noc_active_continue_other,
       CAN_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1,
       CAN_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2,
       CAN_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other,
       CAN_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1,
       CAN_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2,
       CAN_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests,
       CAN_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group,
       CAN_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message,
       CAN_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector,
       CAN_FIRE_RL_scemi_msg_source_noc_active_inports_start_next_request,
       CAN_FIRE_RL_scemi_msg_source_noc_active_move_to_next_output_beat,
       CAN_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data,
       CAN_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header,
       CAN_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message,
       CAN_FIRE_RL_scemi_msg_source_noc_active_transmit_beat_to_bridge,
       CAN_FIRE_RL_scemi_msg_source_noc_inactive,
       CAN_FIRE_RL_scemi_msg_source_noc_inactive_inports,
       CAN_FIRE_RL_scemi_others,
       CAN_FIRE_RL_scemi_process_incoming_packets,
       CAN_FIRE_RL_scemi_register_config_values,
       CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive,
       CAN_FIRE_RL_scemi_rstgen_trigger,
       CAN_FIRE_RL_scemi_scan_output_ports,
       CAN_FIRE_RL_scemi_scemi_clkgen_address_state,
       CAN_FIRE_RL_scemi_scemi_clkgen_mmcm_drp_inputs,
       CAN_FIRE_RL_scemi_scemi_clkgen_mmcm_drp_outputs,
       CAN_FIRE_RL_scemi_scemi_clkgen_mmcm_feedback,
       CAN_FIRE_RL_scemi_scemi_clkgen_modify_state,
       CAN_FIRE_RL_scemi_scemi_clkgen_process_read_request,
       CAN_FIRE_RL_scemi_scemi_clkgen_process_start_delay,
       CAN_FIRE_RL_scemi_scemi_clkgen_process_write_request,
       CAN_FIRE_RL_scemi_scemi_clkgen_rSel__dreg_update,
       CAN_FIRE_RL_scemi_scemi_clkgen_rWrEn__dreg_update,
       CAN_FIRE_RL_scemi_scemi_clkgen_read_state,
       CAN_FIRE_RL_scemi_scemi_clkgen_restart_state,
       CAN_FIRE_RL_scemi_scemi_clkgen_wait_lock_state,
       CAN_FIRE_RL_scemi_scemi_clkgen_wait_start_state,
       CAN_FIRE_RL_scemi_scemi_clkgen_wait_write_ready,
       CAN_FIRE_RL_scemi_scemi_clkgen_write_state,
       CAN_FIRE_RL_scemi_send_data,
       CAN_FIRE_RL_scemi_send_invalid_packets,
       CAN_FIRE_RL_scemi_shutdown_ack,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_complete_reset_sequence,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_data_ready,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_deassert_after_reset,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_detect_end_of_scemi_reset,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_detect_scemi_reset,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_first_request,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_handle_scemi_reset,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_initiate_reset_sequence,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_port_reset,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_read_complete,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_receive,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_receive_ready,
       CAN_FIRE_RL_scemi_shutdown_ctrl_in_update_remaining,
       CAN_FIRE_RL_scemi_shutdown_ctrl_out_complete_reset_sequence,
       CAN_FIRE_RL_scemi_shutdown_ctrl_out_deassert_after_reset,
       CAN_FIRE_RL_scemi_shutdown_ctrl_out_detect_end_of_scemi_reset,
       CAN_FIRE_RL_scemi_shutdown_ctrl_out_detect_scemi_reset,
       CAN_FIRE_RL_scemi_shutdown_ctrl_out_handle_scemi_reset,
       CAN_FIRE_RL_scemi_shutdown_ctrl_out_initiate_reset_sequence,
       CAN_FIRE_RL_scemi_shutdown_ctrl_out_pok_mkConnectionVtoAf,
       CAN_FIRE_RL_scemi_shutdown_ctrl_out_setOK,
       CAN_FIRE_RL_scemi_shutdown_ctrl_out_update_count,
       CAN_FIRE_RL_scemi_shutdown_request,
       CAN_FIRE_RL_scemi_shutdown_shutdown,
       CAN_FIRE_RL_scemi_sink_axi_rx,
       CAN_FIRE_RL_scemi_start_connect_put_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_start_connect_res_mkConnectionGetPut,
       CAN_FIRE_RL_scemi_start_inport_complete_reset_sequence,
       CAN_FIRE_RL_scemi_start_inport_data_ready,
       CAN_FIRE_RL_scemi_start_inport_deassert_after_reset,
       CAN_FIRE_RL_scemi_start_inport_detect_end_of_scemi_reset,
       CAN_FIRE_RL_scemi_start_inport_detect_scemi_reset,
       CAN_FIRE_RL_scemi_start_inport_first_request,
       CAN_FIRE_RL_scemi_start_inport_handle_scemi_reset,
       CAN_FIRE_RL_scemi_start_inport_initiate_reset_sequence,
       CAN_FIRE_RL_scemi_start_inport_port_reset,
       CAN_FIRE_RL_scemi_start_inport_read_complete,
       CAN_FIRE_RL_scemi_start_inport_receive,
       CAN_FIRE_RL_scemi_start_inport_receive_ready,
       CAN_FIRE_RL_scemi_start_inport_update_remaining,
       CAN_FIRE_RL_scemi_start_request,
       CAN_FIRE_RL_scemi_swap_scemi1_outport_grant,
       CAN_FIRE_RL_scemi_tie_off_inputs,
       CAN_FIRE_RL_scemi_toggle_uclock,
       CAN_FIRE_RL_send_whatever,
       CAN_FIRE_pcie_rxn,
       CAN_FIRE_pcie_rxp,
       WILL_FIRE_RL_always_accept_beat,
       WILL_FIRE_RL_clk_gen_pll_connect_feedback,
       WILL_FIRE_RL_connectDDR3_connectReqUser_mkConnectionGetPut,
       WILL_FIRE_RL_connectDDR3_connectRespUser_mkConnectionGetPut,
       WILL_FIRE_RL_connectDDR3_connect_requests,
       WILL_FIRE_RL_connectDDR3_connect_responses,
       WILL_FIRE_RL_ddr3_ctrl_dly_reset_n_count_down,
       WILL_FIRE_RL_ddr3_ctrl_drive_data_signals,
       WILL_FIRE_RL_ddr3_ctrl_drive_enables,
       WILL_FIRE_RL_ddr3_ctrl_ready_process_read_request,
       WILL_FIRE_RL_ddr3_ctrl_ready_process_read_response_first,
       WILL_FIRE_RL_ddr3_ctrl_ready_process_read_response_second,
       WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_first,
       WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_second,
       WILL_FIRE_RL_drive_memory_calibration,
       WILL_FIRE_RL_scemi_1_every,
       WILL_FIRE_RL_scemi_1_fifoTxData_dInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_scemi_1_fifoTxData_launder_dInReset,
       WILL_FIRE_RL_scemi_1_fifoTxData_launder_sInReset,
       WILL_FIRE_RL_scemi_1_fifoTxData_sInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_scemi_1_get_data,
       WILL_FIRE_RL_scemi_1_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_1_process_outgoing_packets,
       WILL_FIRE_RL_scemi_1_send_data,
       WILL_FIRE_RL_scemi_1_tie_off_inputs,
       WILL_FIRE_RL_scemi_2_1_connect_data,
       WILL_FIRE_RL_scemi_2_1_connect_dst_rdy,
       WILL_FIRE_RL_scemi_2_1_connect_src_rdy,
       WILL_FIRE_RL_scemi_2_connect_data,
       WILL_FIRE_RL_scemi_2_connect_dst_rdy,
       WILL_FIRE_RL_scemi_2_connect_src_rdy,
       WILL_FIRE_RL_scemi_2_tie_off_inputs,
       WILL_FIRE_RL_scemi_3_tie_off_inputs,
       WILL_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_forward,
       WILL_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_request,
       WILL_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_response,
       WILL_FIRE_RL_scemi_accept_data,
       WILL_FIRE_RL_scemi_clk_port_rstgen_trigger,
       WILL_FIRE_RL_scemi_clkgen_pll_connect_feedback,
       WILL_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall,
       WILL_FIRE_RL_scemi_clockGenerators_clock_gens_counters_incr,
       WILL_FIRE_RL_scemi_clockGenerators_clock_gens_do_stall_scemi,
       WILL_FIRE_RL_scemi_clockGenerators_clock_gens_do_ticks,
       WILL_FIRE_RL_scemi_clockGenerators_clock_gens_is_allowed_sync_clock_domain_crossing,
       WILL_FIRE_RL_scemi_clockGenerators_clock_gens_manage_reset,
       WILL_FIRE_RL_scemi_clockGenerators_clock_gens_tick_clock,
       WILL_FIRE_RL_scemi_clockGenerators_clock_gens_update_stalled,
       WILL_FIRE_RL_scemi_clockGenerators_handle_reset,
       WILL_FIRE_RL_scemi_clockGenerators_incr_cycle_stamp,
       WILL_FIRE_RL_scemi_clockGenerators_one_to_one_cclock_incr,
       WILL_FIRE_RL_scemi_clockGenerators_stall_one_to_one_cclock,
       WILL_FIRE_RL_scemi_clockGenerators_track_reset,
       WILL_FIRE_RL_scemi_count_connect_get_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_count_outport_complete_reset_sequence,
       WILL_FIRE_RL_scemi_count_outport_deassert_after_reset,
       WILL_FIRE_RL_scemi_count_outport_detect_end_of_scemi_reset,
       WILL_FIRE_RL_scemi_count_outport_detect_scemi_reset,
       WILL_FIRE_RL_scemi_count_outport_handle_scemi_reset,
       WILL_FIRE_RL_scemi_count_outport_initiate_reset_sequence,
       WILL_FIRE_RL_scemi_count_outport_pok_mkConnectionVtoAf,
       WILL_FIRE_RL_scemi_count_outport_setOK,
       WILL_FIRE_RL_scemi_count_outport_update_count,
       WILL_FIRE_RL_scemi_cross_config_values,
       WILL_FIRE_RL_scemi_data_req_connect_put_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_data_req_connect_res_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_data_req_inport_complete_reset_sequence,
       WILL_FIRE_RL_scemi_data_req_inport_data_ready,
       WILL_FIRE_RL_scemi_data_req_inport_deassert_after_reset,
       WILL_FIRE_RL_scemi_data_req_inport_detect_end_of_scemi_reset,
       WILL_FIRE_RL_scemi_data_req_inport_detect_scemi_reset,
       WILL_FIRE_RL_scemi_data_req_inport_first_request,
       WILL_FIRE_RL_scemi_data_req_inport_handle_scemi_reset,
       WILL_FIRE_RL_scemi_data_req_inport_initiate_reset_sequence,
       WILL_FIRE_RL_scemi_data_req_inport_port_reset,
       WILL_FIRE_RL_scemi_data_req_inport_read_complete,
       WILL_FIRE_RL_scemi_data_req_inport_receive,
       WILL_FIRE_RL_scemi_data_req_inport_receive_ready,
       WILL_FIRE_RL_scemi_data_req_inport_update_remaining,
       WILL_FIRE_RL_scemi_data_req_request,
       WILL_FIRE_RL_scemi_data_resp_connect_get_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_data_resp_outport_complete_reset_sequence,
       WILL_FIRE_RL_scemi_data_resp_outport_deassert_after_reset,
       WILL_FIRE_RL_scemi_data_resp_outport_detect_end_of_scemi_reset,
       WILL_FIRE_RL_scemi_data_resp_outport_detect_scemi_reset,
       WILL_FIRE_RL_scemi_data_resp_outport_handle_scemi_reset,
       WILL_FIRE_RL_scemi_data_resp_outport_initiate_reset_sequence,
       WILL_FIRE_RL_scemi_data_resp_outport_pok_mkConnectionVtoAf,
       WILL_FIRE_RL_scemi_data_resp_outport_setOK,
       WILL_FIRE_RL_scemi_data_resp_outport_update_count,
       WILL_FIRE_RL_scemi_drive_axi_rx_ready,
       WILL_FIRE_RL_scemi_drive_axi_tx,
       WILL_FIRE_RL_scemi_drive_axi_tx_info,
       WILL_FIRE_RL_scemi_drive_status_bluenoc_link_up,
       WILL_FIRE_RL_scemi_drive_status_interrupts_enabled,
       WILL_FIRE_RL_scemi_drive_status_memory_enabled,
       WILL_FIRE_RL_scemi_drive_status_out_of_reset,
       WILL_FIRE_RL_scemi_drive_status_pcie_link_up,
       WILL_FIRE_RL_scemi_dut_dut_dutIfc_donerest,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_announceCclock,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_contextToPrbStr_connectCommitAck,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_contextToPrbStr_connectData,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_complete_reset_sequence,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_data_ready,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_deassert_after_reset,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_detect_end_of_scemi_reset,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_detect_scemi_reset,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_first_request,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_handle_scemi_reset,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_initiate_reset_sequence,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_port_reset,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_read_complete,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive_ready,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_update_remaining,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_complete_reset_sequence,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_deassert_after_reset,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_detect_end_of_scemi_reset,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_detect_scemi_reset,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_handle_scemi_reset,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_initiate_reset_sequence,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_pok_mkConnectionVtoAf,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_setOK,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_update_count,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_dutclkctrl_nconnect_mkConnectionVtoAf,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_dutclkctrl_pconnect_mkConnectionVtoAf,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_flagSample,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_prb_str_recv_doEnq,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_requestInput,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_send_en,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample,
       WILL_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag,
       WILL_FIRE_RL_scemi_dut_softrst_req_connect_put_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_dut_softrst_req_connect_res_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_complete_reset_sequence,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_data_ready,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_deassert_after_reset,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_detect_end_of_scemi_reset,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_detect_scemi_reset,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_first_request,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_handle_scemi_reset,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_initiate_reset_sequence,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_port_reset,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_read_complete,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_receive,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_receive_ready,
       WILL_FIRE_RL_scemi_dut_softrst_req_inport_update_remaining,
       WILL_FIRE_RL_scemi_dut_softrst_req_request,
       WILL_FIRE_RL_scemi_dut_softrst_resp_connect_get_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_dut_softrst_resp_outport_complete_reset_sequence,
       WILL_FIRE_RL_scemi_dut_softrst_resp_outport_deassert_after_reset,
       WILL_FIRE_RL_scemi_dut_softrst_resp_outport_detect_end_of_scemi_reset,
       WILL_FIRE_RL_scemi_dut_softrst_resp_outport_detect_scemi_reset,
       WILL_FIRE_RL_scemi_dut_softrst_resp_outport_handle_scemi_reset,
       WILL_FIRE_RL_scemi_dut_softrst_resp_outport_initiate_reset_sequence,
       WILL_FIRE_RL_scemi_dut_softrst_resp_outport_pok_mkConnectionVtoAf,
       WILL_FIRE_RL_scemi_dut_softrst_resp_outport_setOK,
       WILL_FIRE_RL_scemi_dut_softrst_resp_outport_update_count,
       WILL_FIRE_RL_scemi_every,
       WILL_FIRE_RL_scemi_fFromBridgeBeat_ifc_update,
       WILL_FIRE_RL_scemi_fFromContinueBeat_ifc_update,
       WILL_FIRE_RL_scemi_fS1MsgOut_ifc_update,
       WILL_FIRE_RL_scemi_fS1OutPortAcks_ifc_update,
       WILL_FIRE_RL_scemi_fS2MsgOut_ifc_update,
       WILL_FIRE_RL_scemi_fToContinueBeat_ifc_update,
       WILL_FIRE_RL_scemi_fifoRxData_dInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_scemi_fifoRxData_launder_dInReset,
       WILL_FIRE_RL_scemi_fifoRxData_launder_sInReset,
       WILL_FIRE_RL_scemi_fifoRxData_sInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_scemi_init_state_track_reset,
       WILL_FIRE_RL_scemi_intr_ifc_ctl,
       WILL_FIRE_RL_scemi_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb,
       WILL_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks,
       WILL_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data,
       WILL_FIRE_RL_scemi_msg_sink_noc_active_receive_beat_from_bridge,
       WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header,
       WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_disregard_packet,
       WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data,
       WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb,
       WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb,
       WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_disregard_packet,
       WILL_FIRE_RL_scemi_msg_sink_noc_inactive,
       WILL_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages,
       WILL_FIRE_RL_scemi_msg_source_noc_active_continue_other,
       WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1,
       WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2,
       WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other,
       WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1,
       WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2,
       WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests,
       WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group,
       WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message,
       WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector,
       WILL_FIRE_RL_scemi_msg_source_noc_active_inports_start_next_request,
       WILL_FIRE_RL_scemi_msg_source_noc_active_move_to_next_output_beat,
       WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data,
       WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header,
       WILL_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message,
       WILL_FIRE_RL_scemi_msg_source_noc_active_transmit_beat_to_bridge,
       WILL_FIRE_RL_scemi_msg_source_noc_inactive,
       WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports,
       WILL_FIRE_RL_scemi_others,
       WILL_FIRE_RL_scemi_process_incoming_packets,
       WILL_FIRE_RL_scemi_register_config_values,
       WILL_FIRE_RL_scemi_reset_scemi_if_network_is_inactive,
       WILL_FIRE_RL_scemi_rstgen_trigger,
       WILL_FIRE_RL_scemi_scan_output_ports,
       WILL_FIRE_RL_scemi_scemi_clkgen_address_state,
       WILL_FIRE_RL_scemi_scemi_clkgen_mmcm_drp_inputs,
       WILL_FIRE_RL_scemi_scemi_clkgen_mmcm_drp_outputs,
       WILL_FIRE_RL_scemi_scemi_clkgen_mmcm_feedback,
       WILL_FIRE_RL_scemi_scemi_clkgen_modify_state,
       WILL_FIRE_RL_scemi_scemi_clkgen_process_read_request,
       WILL_FIRE_RL_scemi_scemi_clkgen_process_start_delay,
       WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request,
       WILL_FIRE_RL_scemi_scemi_clkgen_rSel__dreg_update,
       WILL_FIRE_RL_scemi_scemi_clkgen_rWrEn__dreg_update,
       WILL_FIRE_RL_scemi_scemi_clkgen_read_state,
       WILL_FIRE_RL_scemi_scemi_clkgen_restart_state,
       WILL_FIRE_RL_scemi_scemi_clkgen_wait_lock_state,
       WILL_FIRE_RL_scemi_scemi_clkgen_wait_start_state,
       WILL_FIRE_RL_scemi_scemi_clkgen_wait_write_ready,
       WILL_FIRE_RL_scemi_scemi_clkgen_write_state,
       WILL_FIRE_RL_scemi_send_data,
       WILL_FIRE_RL_scemi_send_invalid_packets,
       WILL_FIRE_RL_scemi_shutdown_ack,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_complete_reset_sequence,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_data_ready,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_deassert_after_reset,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_detect_end_of_scemi_reset,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_detect_scemi_reset,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_first_request,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_handle_scemi_reset,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_initiate_reset_sequence,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_port_reset,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_read_complete,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_receive,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_receive_ready,
       WILL_FIRE_RL_scemi_shutdown_ctrl_in_update_remaining,
       WILL_FIRE_RL_scemi_shutdown_ctrl_out_complete_reset_sequence,
       WILL_FIRE_RL_scemi_shutdown_ctrl_out_deassert_after_reset,
       WILL_FIRE_RL_scemi_shutdown_ctrl_out_detect_end_of_scemi_reset,
       WILL_FIRE_RL_scemi_shutdown_ctrl_out_detect_scemi_reset,
       WILL_FIRE_RL_scemi_shutdown_ctrl_out_handle_scemi_reset,
       WILL_FIRE_RL_scemi_shutdown_ctrl_out_initiate_reset_sequence,
       WILL_FIRE_RL_scemi_shutdown_ctrl_out_pok_mkConnectionVtoAf,
       WILL_FIRE_RL_scemi_shutdown_ctrl_out_setOK,
       WILL_FIRE_RL_scemi_shutdown_ctrl_out_update_count,
       WILL_FIRE_RL_scemi_shutdown_request,
       WILL_FIRE_RL_scemi_shutdown_shutdown,
       WILL_FIRE_RL_scemi_sink_axi_rx,
       WILL_FIRE_RL_scemi_start_connect_put_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_start_connect_res_mkConnectionGetPut,
       WILL_FIRE_RL_scemi_start_inport_complete_reset_sequence,
       WILL_FIRE_RL_scemi_start_inport_data_ready,
       WILL_FIRE_RL_scemi_start_inport_deassert_after_reset,
       WILL_FIRE_RL_scemi_start_inport_detect_end_of_scemi_reset,
       WILL_FIRE_RL_scemi_start_inport_detect_scemi_reset,
       WILL_FIRE_RL_scemi_start_inport_first_request,
       WILL_FIRE_RL_scemi_start_inport_handle_scemi_reset,
       WILL_FIRE_RL_scemi_start_inport_initiate_reset_sequence,
       WILL_FIRE_RL_scemi_start_inport_port_reset,
       WILL_FIRE_RL_scemi_start_inport_read_complete,
       WILL_FIRE_RL_scemi_start_inport_receive,
       WILL_FIRE_RL_scemi_start_inport_receive_ready,
       WILL_FIRE_RL_scemi_start_inport_update_remaining,
       WILL_FIRE_RL_scemi_start_request,
       WILL_FIRE_RL_scemi_swap_scemi1_outport_grant,
       WILL_FIRE_RL_scemi_tie_off_inputs,
       WILL_FIRE_RL_scemi_toggle_uclock,
       WILL_FIRE_RL_send_whatever,
       WILL_FIRE_pcie_rxn,
       WILL_FIRE_pcie_rxp;

  // inputs to muxes for submodule ports
  reg [18 : 0] MUX_scemi_rS1BitsRem$write_1__VAL_2;
  reg [6 : 0] MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1;
  wire [139 : 0] MUX_scemi_fS1OutPortAcks_ifc_rwEnqData$wset_1__VAL_1,
		 MUX_scemi_fS1OutPortAcks_ifc_rwEnqMask$wset_1__VAL_1;
  wire [127 : 0] MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_1,
		 MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_2,
		 MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_3,
		 MUX_scemi_fS1MsgOut_ifc_rwEnqMask$wset_1__VAL_1,
		 MUX_scemi_fToContinueBeat_ifc_rwEnqData$wset_1__VAL_1;
  wire [80 : 0] MUX_scemi_fifoRxData_elem_0$_write_1__VAL_1,
		MUX_scemi_fifoRxData_elem_0$_write_1__VAL_2,
		MUX_scemi_fifoRxData_elem_1$_write_1__VAL_1,
		MUX_scemi_fifoRxData_elem_1$_write_1__VAL_2,
		MUX_scemi_fifoRxData_elem_2$_write_1__VAL_1,
		MUX_scemi_fifoRxData_elem_2$_write_1__VAL_2,
		MUX_scemi_fifoRxData_elem_3$_write_1__VAL_1,
		MUX_scemi_fifoRxData_elem_3$_write_1__VAL_2;
  wire [73 : 0] MUX_scemi_init_state_msgFIFO$enq_1__VAL_1,
		MUX_scemi_init_state_msgFIFO$enq_1__VAL_2,
		MUX_scemi_init_state_msgFIFO$enq_1__VAL_3,
		MUX_scemi_init_state_msgFIFO$enq_1__VAL_4,
		MUX_scemi_init_state_msgFIFO$enq_1__VAL_5;
  wire [63 : 0] MUX_scemi_dut_dut_prb_control_nextSample$write_1__VAL_1;
  wire [31 : 0] MUX_scemi_dut_dut_prb_control_data_out_beats$_write_1__VAL_2;
  wire [18 : 0] MUX_scemi_dut_dut_prb_control_enff$enq_1__VAL_1,
		MUX_scemi_dut_dut_prb_control_enff$enq_1__VAL_2,
		MUX_scemi_rS1BitsRem$write_1__VAL_1;
  wire [15 : 0] MUX_scemi_dut_dut_prb_control_count$write_1__VAL_2,
		MUX_scemi_scemi_clkgen_rWrData$write_1__VAL_1;
  wire [9 : 0] MUX_scemi_rS1RequestedPort$write_1__VAL_1;
  wire [7 : 0] MUX_scemi_rInMsgBytes$write_1__VAL_2,
	       MUX_scemi_rOutMsgBytes$write_1__VAL_4,
	       MUX_scemi_rS1OutMsgSize$write_1__VAL_1,
	       MUX_scemi_rS1OutMsgSize$write_1__VAL_2,
	       MUX_scemi_rS1OutMsgSize$write_1__VAL_3;
  wire [5 : 0] MUX_scemi_fS1MsgOut_ifc_rwEnqCount$wset_1__VAL_1;
  wire [4 : 0] MUX_scemi_fS1OutPortAcks_ifc_rwEnqCount$wset_1__VAL_1,
	       MUX_scemi_scemi_clkgen_rCount$write_1__VAL_1;
  wire [2 : 0] MUX_scemi_rvPrevMsgGrant$write_1__VAL_1,
	       MUX_scemi_scemi_clkgen_rState$write_1__VAL_2;
  wire [1 : 0] MUX_scemi_count_outport_count$write_1__VAL_1;
  wire MUX_scemi_data_req_inport_remaining$write_1__SEL_1,
       MUX_scemi_data_req_inport_remaining$write_1__VAL_1,
       MUX_scemi_data_req_inport_status$_write_1__SEL_1,
       MUX_scemi_data_resp_outport_count$write_1__VAL_1,
       MUX_scemi_dut_dut_prb_control_control_in_remaining$write_1__SEL_1,
       MUX_scemi_dut_dut_prb_control_control_in_remaining$write_1__VAL_1,
       MUX_scemi_dut_dut_prb_control_control_in_status$_write_1__SEL_1,
       MUX_scemi_dut_dut_prb_control_data_out_beats$_write_1__SEL_3,
       MUX_scemi_dut_dut_prb_control_data_out_count$write_1__VAL_1,
       MUX_scemi_dut_dut_prb_control_enff$enq_1__SEL_1,
       MUX_scemi_dut_dut_prb_control_enff$enq_1__SEL_3,
       MUX_scemi_dut_dut_prb_control_nextSample$write_1__SEL_1,
       MUX_scemi_dut_dut_prb_control_nextSample$write_1__SEL_2,
       MUX_scemi_dut_dut_prb_control_pinged$write_1__SEL_3,
       MUX_scemi_dut_softrst_req_inport_remaining$write_1__SEL_1,
       MUX_scemi_dut_softrst_req_inport_remaining$write_1__VAL_1,
       MUX_scemi_dut_softrst_req_inport_status$_write_1__SEL_1,
       MUX_scemi_dut_softrst_resp_outport_count$write_1__VAL_1,
       MUX_scemi_fS1OutPortAcks_ifc_rwEnqCount$wset_1__SEL_1,
       MUX_scemi_fToBridgeBeat$enq_1__SEL_1,
       MUX_scemi_fToBridgeBeat$enq_1__SEL_2,
       MUX_scemi_fToBridgeBeat$enq_1__SEL_3,
       MUX_scemi_fToContinueBeat_ifc_rwEnqCount$wset_1__SEL_1,
       MUX_scemi_init_state_msgFIFO$enq_1__SEL_1,
       MUX_scemi_init_state_msgFIFO$enq_1__SEL_2,
       MUX_scemi_lrS1ActiveRequests$write_1__SEL_3,
       MUX_scemi_lrS1PendingRequests$write_1__VAL_2,
       MUX_scemi_lrS1PendingRequests_1$write_1__VAL_2,
       MUX_scemi_lrS1PendingRequests_2$write_1__VAL_2,
       MUX_scemi_lrS1PendingRequests_3$write_1__VAL_2,
       MUX_scemi_lrS1PendingRequests_4$write_1__VAL_2,
       MUX_scemi_rDecodeSceMi$write_1__SEL_1,
       MUX_scemi_rInMsgBytes$write_1__SEL_2,
       MUX_scemi_rOtherMsgIn$write_1__VAL_2,
       MUX_scemi_rOtherMsgOut$write_1__SEL_3,
       MUX_scemi_rOutMsgBytes$write_1__SEL_4,
       MUX_scemi_rS1BitsRem$write_1__SEL_1,
       MUX_scemi_rS1MsgInIsAck$write_1__SEL_1,
       MUX_scemi_rS1MsgInIsAck$write_1__VAL_1,
       MUX_scemi_rS1MsgInIsData$write_1__VAL_1,
       MUX_scemi_rS1MsgOutDataReq$write_1__SEL_1,
       MUX_scemi_rS1MsgOutReqReq$write_1__SEL_1,
       MUX_scemi_rS1OutDataHeader$write_1__SEL_1,
       MUX_scemi_rSceMi1MsgIn$write_1__SEL_2,
       MUX_scemi_rSceMi1MsgOut$write_1__SEL_3,
       MUX_scemi_rSceMi2MsgIn$write_1__SEL_2,
       MUX_scemi_rSceMi2MsgOut$write_1__SEL_3,
       MUX_scemi_rSendInvalid$write_1__VAL_1,
       MUX_scemi_scemi_clkgen_rReset$write_1__SEL_2,
       MUX_scemi_scemi_clkgen_rState$write_1__SEL_1,
       MUX_scemi_shutdown_ctrl_in_remaining$write_1__SEL_1,
       MUX_scemi_shutdown_ctrl_in_remaining$write_1__VAL_1,
       MUX_scemi_shutdown_ctrl_in_status$_write_1__SEL_1,
       MUX_scemi_shutdown_ctrl_out_count$write_1__VAL_1,
       MUX_scemi_start_inport_remaining$write_1__SEL_1,
       MUX_scemi_start_inport_remaining$write_1__VAL_1,
       MUX_scemi_start_inport_status$_write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_x42005_0_scemi_count_outport_beats_1_1_sc_ETC__q1,
	       value__h243322;
  reg [15 : 0] CASE_scemi_dut_dut_prb_control_ackFifoD_OUT_B_ETC__q2,
	       CASE_scemi_dut_dut_prb_control_control_in_scem_ETC__q6,
	       CASE_scemi_dut_dut_prb_control_enffD_OUT_BITS_ETC__q7,
	       CASE_scemi_dut_dut_prb_control_prb_strD_OUT_B_ETC__q3,
	       IF_scemi_dut_dut_prb_control_control_in_dataF__ETC___d904,
	       mask__h13959,
	       x__h14234,
	       y__h14235;
  reg IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2050,
      IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2070,
      IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2097,
      IF_scemi_fS1OutPortAcks_ifc_rStorage_618_BITS__ETC___d1836,
      IF_scemi_rS1InPortNum_784_EQ_0_785_THEN_scemi__ETC___d1794;
  wire [255 : 0] enqData__h168593,
		 enqData__h170810,
		 enqData__h172069,
		 enqData__h90802,
		 enqData__h91890,
		 enqMask__h168594,
		 enqMask__h170811,
		 enqMask__h172070,
		 enqMask__h90803,
		 enqMask__h91891,
		 nextMask__h168588,
		 nextMask__h168596,
		 nextMask__h170805,
		 nextMask__h170813,
		 nextMask__h172064,
		 nextMask__h172072,
		 nextMask__h90797,
		 nextMask__h90805,
		 nextMask__h91885,
		 nextMask__h91893,
		 nextStorage__h168587,
		 nextStorage__h168595,
		 nextStorage__h170804,
		 nextStorage__h170812,
		 nextStorage__h172063,
		 nextStorage__h172071,
		 nextStorage__h90796,
		 nextStorage__h90804,
		 nextStorage__h91884,
		 nextStorage__h91892,
		 x__h168655,
		 x__h170872,
		 x__h171035,
		 x__h171162,
		 x__h172131,
		 x__h90864,
		 x__h91027,
		 x__h91154,
		 x__h91952,
		 x__h92115,
		 x__h92242,
		 x_wget__h3651,
		 y__h168656,
		 y__h170873,
		 y__h172132,
		 y__h90865,
		 y__h91953;
  wire [159 : 0] enqData__h93557,
		 enqMask__h93558,
		 nextMask__h93552,
		 nextMask__h93560,
		 nextStorage__h93551,
		 nextStorage__h93559,
		 x__h93619,
		 x__h93781,
		 x__h93907,
		 y__h93620;
  wire [139 : 0] value__h93782, value__h93908;
  wire [127 : 0] value__h171036,
		 value__h171163,
		 value__h91028,
		 value__h91155,
		 value__h92116,
		 value__h92243;
  wire [80 : 0] IF_scemi_fifoRxData_elem0_status_1__read__92_E_ETC___d433,
		IF_scemi_fifoRxData_elem1_status_1__read__03_E_ETC___d440,
		NOT_scemi_fifoRxData_elem0_status_1__read__92__ETC___d463,
		NOT_scemi_fifoRxData_elem1_status_1__read__03__ETC___d480;
  wire [79 : 0] IF_scemi_rS1OutMsgIsCont_289_THEN_2_CONCAT_sce_ETC___d2306;
  wire [63 : 0] _0_CONCAT_IF_scemi_fS1OutPortAcks_ifc_rwDeqCoun_ETC___d1623,
		_0_CONCAT_scemi_fS1OutPortAcks_ifc_rDataCount_6_ETC___d1636,
		c_data__h20823,
		mask__h248733,
		v_data__h36359;
  wire [31 : 0] IF_scemi_clockGenerators_clock_gens_counters_c_ETC___d1480,
		IF_scemi_clockGenerators_one_to_one_cclock_cou_ETC___d1530,
		b__h93641,
		b__h93848,
		x__h168782,
		x__h168937,
		x__h170999,
		x__h171154,
		x__h172258,
		x__h172413,
		x__h198010,
		x__h202540,
		x__h207061,
		x__h90991,
		x__h91146,
		x__h92234,
		x_wget__h3575;
  wire [28 : 0] addr__h248732;
  wire [19 : 0] value__h135329;
  wire [18 : 0] MUX_scemi_rS1BitsRemwrite_1__VAL_2_PLUS_7_SRL_3__q5,
		scemi_rS1BitsRem_MINUS_25_SRL_3__q4;
  wire [15 : 0] x__h12089, x__h12296, x__h13993, x__h18315, y__h13994;
  wire [13 : 0] _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744;
  wire [8 : 0] b__h199757,
	       b__h204287,
	       b__h208808,
	       value__h197969,
	       value__h202501,
	       value__h207022;
  wire [7 : 0] c_be__h20822,
	       scemi_rS1OutMsgSize_290_MINUS_4___d2291,
	       v_keep__h36358;
  wire [5 : 0] b__h168716,
	       b__h170933,
	       b__h171294,
	       b__h172192,
	       b__h90925,
	       b__h91286,
	       b__h92374,
	       scemi_rS1BitsRem_295_PLUS_IF_scemi_rS1OutMsgIs_ETC___d2300,
	       value__h168887,
	       value__h171104,
	       value__h172363,
	       value__h91096,
	       value__h92184,
	       x__h174137,
	       x__h181737;
  wire [4 : 0] b__h93680, b__h94039, value__h93850;
  wire [3 : 0] value__h134037, x__h249621;
  wire [2 : 0] IF_NOT_IF_scemi_fFromContinueBeat_ifc_rDataCou_ETC___d2103,
	       x_wget__h3421;
  wire [1 : 0] IF_NOT_IF_scemi_fFromContinueBeat_ifc_rDataCou_ETC___d2100,
	       IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999,
	       ab__h89164,
	       b__h195344,
	       value__h12437,
	       value__h12544,
	       x__h21832,
	       x__h22294,
	       x__h242005,
	       x__h27757,
	       x__h28141,
	       x__h31734,
	       x__h32186,
	       x__h33660,
	       x__h34039;
  wire IF_scemi_data_req_inport_got_beat_pw_whas__170_ETC___d1179,
       IF_scemi_dut_dut_prb_control_control_in_got_be_ETC___d748,
       IF_scemi_dut_softrst_req_inport_got_beat_pw_wh_ETC___d1074,
       IF_scemi_shutdown_ctrl_in_got_beat_pw_whas__38_ETC___d1396,
       IF_scemi_start_inport_got_beat_pw_whas__280_TH_ETC___d1289,
       NOT_scemi_1_fifoTxData_read_block_83_84_AND_NO_ETC___d606,
       NOT_scemi_1_fifoTxData_write_block_42_43_AND_s_ETC___d563,
       NOT_scemi_clockGenerators_clock_gens_in_reset__ETC___d1535,
       NOT_scemi_clockGenerators_clock_gens_stall_pw__ETC___d2422,
       NOT_scemi_dut_dut_prb_control_flag_04_05_AND_N_ETC___d806,
       NOT_scemi_dut_dut_prb_control_sampleIntervalV__ETC___d800,
       NOT_scemi_fFromBridgeBeat_ifc_rDataAvail_576_U_ETC___d1660,
       NOT_scemi_fFromBridgeBeat_ifc_rDataCount_557_U_ETC___d1677,
       NOT_scemi_fS1OutPortAcks_ifc_rDataAvail_654_UL_ETC___d1714,
       NOT_scemi_fifoRxData_read_block_82_83_AND_NOT__ETC___d507,
       NOT_scemi_fifoRxData_write_block_90_91_AND_NOT_ETC___d417,
       _dor1scemi_fifoRxData_elem0_status_0$EN__write,
       _dor1scemi_fifoRxData_elem0_status_1$EN__write,
       _dor1scemi_fifoRxData_elem1_status_0$EN__write,
       _dor1scemi_fifoRxData_elem1_status_1$EN__write,
       _dor1scemi_fifoRxData_write_block$EN_write,
       scemi_1_fifoTxData_elem0_status_0__read__88_EQ_ETC___d589,
       scemi_1_fifoTxData_elem0_status_1__read__85_EQ_ETC___d587,
       scemi_1_fifoTxData_elem1_status_0__read__97_EQ_ETC___d598,
       scemi_1_fifoTxData_elem1_status_1__read__94_EQ_ETC___d596,
       scemi_bridge_is_activated__72_AND_scemi_rOther_ETC___d1869,
       scemi_bridge_is_activated__72_AND_scemi_rSceMi_ETC___d1717,
       scemi_clockGenerators_clock_gens_reset_counter_ETC___d1490,
       scemi_clockGenerators_clock_gens_stalled_511_A_ETC___d1518,
       scemi_count_outport_ok_338_AND_NOT_scemi_init__ETC___d1342,
       scemi_data_resp_outport_ok_232_AND_NOT_scemi_i_ETC___d1236,
       scemi_dut_dut_prb_control_control_in_dataF_rv__ETC___d878,
       scemi_dut_dut_prb_control_control_in_dataF_rv__ETC___d908,
       scemi_dut_dut_prb_control_data_out_next_RDY_se_ETC___d979,
       scemi_dut_dut_prb_control_data_out_ok_01_AND_N_ETC___d709,
       scemi_dut_softrst_resp_outport_ok_122_AND_NOT__ETC___d1126,
       scemi_fFromContinueBeat_ifc_rDataCount_886_ULT_4___d1992,
       scemi_fS1MsgOut_ifc_rDataCount_923_ULT_32___d2241,
       scemi_fS1MsgOut_ifc_rDataCount_923_ULT_4___d1994,
       scemi_fS1OutPortAcks_ifc_rDataCount_633_ULT_16___d1693,
       scemi_fS2MsgOut_ifc_rDataCount_960_ULT_4___d1997,
       scemi_fToContinueBeat_ifc_rDataCount_594_ULT_32___d1672,
       scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397,
       scemi_fifoRxData_elem0_status_1__read__92_EQ_s_ETC___d394,
       scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408,
       scemi_fifoRxData_elem1_status_1__read__03_EQ_s_ETC___d405,
       scemi_init_state_cycle_stamp_crossed__97_EQ_sc_ETC___d799,
       scemi_lrS1ActiveRequests_1_202_OR_scemi_lrS1Ac_ETC___d2225,
       scemi_rInMsgBytes_678_ULE_4___d1721,
       scemi_rOutMsgBytes_989_ULE_4___d2183,
       scemi_rS1BitsRem_295_ULE_32___d2353,
       scemi_rS1OutMsgSize_290_ULE_4___d2355,
       scemi_rSceMi1MsgIn_696_AND_NOT_scemi_rSceMi2Ms_ETC___d1704,
       scemi_rSceMi2MsgIn_697_AND_NOT_scemi_rSceMi1Ms_ETC___d1842,
       scemi_shutdown_ctrl_out_ok_435_AND_NOT_scemi_i_ETC___d1439,
       x1__h37881;

  // action method pcie_rxp
  assign CAN_FIRE_pcie_rxp = 1'd1 ;
  assign WILL_FIRE_pcie_rxp = 1'd1 ;

  // action method pcie_rxn
  assign CAN_FIRE_pcie_rxn = 1'd1 ;
  assign WILL_FIRE_pcie_rxn = 1'd1 ;

  // value method pcie_txp
  assign PCIE_txp = scemi_pcie_ep$pci_exp_txp ;

  // value method pcie_txn
  assign PCIE_txn = scemi_pcie_ep$pci_exp_txn ;

  // value method ddr3_clk_p
  assign DDR3_CLK_P = ddr3_ctrl$ddr3_ck_p ;

  // value method ddr3_clk_n
  assign DDR3_CLK_N = ddr3_ctrl$ddr3_ck_n ;

  // value method ddr3_a
  assign DDR3_A = ddr3_ctrl$ddr3_addr ;

  // value method ddr3_ba
  assign DDR3_BA = ddr3_ctrl$ddr3_ba ;

  // value method ddr3_ras_n
  assign DDR3_RAS_N = ddr3_ctrl$ddr3_ras_n ;

  // value method ddr3_cas_n
  assign DDR3_CAS_N = ddr3_ctrl$ddr3_cas_n ;

  // value method ddr3_we_n
  assign DDR3_WE_N = ddr3_ctrl$ddr3_we_n ;

  // value method ddr3_reset_n
  assign DDR3_RESET_N = ddr3_ctrl$ddr3_reset_n ;

  // value method ddr3_cs_n
  assign DDR3_CS_N = ddr3_ctrl$ddr3_cs_n ;

  // value method ddr3_odt
  assign DDR3_ODT = ddr3_ctrl$ddr3_odt ;

  // value method ddr3_cke
  assign DDR3_CKE = ddr3_ctrl$ddr3_cke ;

  // value method ddr3_dm
  assign DDR3_DM = ddr3_ctrl$ddr3_dm ;

  // value method leds
  assign leds = { 4'd0, x__h249621 } ;

  // submodule _unnamed_
  SyncWire #(.width(32'd1)) _unnamed_(.DIN(scemi_pcie_ep$user_lnk_up),
				      .DOUT(_unnamed_$DOUT));

  // submodule _unnamed__1
  SyncWire #(.width(32'd1)) _unnamed__1(.DIN(NOT_scemi_clockGenerators_clock_gens_in_reset__ETC___d1535),
					.DOUT(_unnamed__1$DOUT));

  // submodule _unnamed__2
  SyncWire #(.width(32'd1)) _unnamed__2(.DIN(NOT_scemi_clockGenerators_clock_gens_stall_pw__ETC___d2422),
					.DOUT(_unnamed__2$DOUT));

  // submodule _unnamed__3
  SyncWire #(.width(32'd1)) _unnamed__3(.DIN(ddr3_ctrl$init_calib_complete),
					.DOUT(_unnamed__3$DOUT));

  // submodule clk_gen_clkout0buffer
  BUFG clk_gen_clkout0buffer(.I(clk_gen_pll$CLKOUT0),
			     .O(clk_gen_clkout0buffer$O));

  // submodule clk_gen_clkout0nbuffer
  BUFG clk_gen_clkout0nbuffer(.I(clk_gen_pll$CLKOUT0B), .O());

  // submodule clk_gen_clkout1buffer
  BUFG clk_gen_clkout1buffer(.I(clk_gen_pll$CLKOUT1),
			     .O(clk_gen_clkout1buffer$O));

  // submodule clk_gen_clkout1nbuffer
  BUFG clk_gen_clkout1nbuffer(.I(clk_gen_pll$CLKOUT1B), .O());

  // submodule clk_gen_clkout2buffer
  BUFG clk_gen_clkout2buffer(.I(clk_gen_pll$CLKOUT2), .O());

  // submodule clk_gen_clkout2nbuffer
  BUFG clk_gen_clkout2nbuffer(.I(clk_gen_pll$CLKOUT2B), .O());

  // submodule clk_gen_clkout3buffer
  BUFG clk_gen_clkout3buffer(.I(clk_gen_pll$CLKOUT3), .O());

  // submodule clk_gen_clkout3nbuffer
  BUFG clk_gen_clkout3nbuffer(.I(clk_gen_pll$CLKOUT3B), .O());

  // submodule clk_gen_clkout4buffer
  BUFG clk_gen_clkout4buffer(.I(clk_gen_pll$CLKOUT4), .O());

  // submodule clk_gen_clkout5buffer
  BUFG clk_gen_clkout5buffer(.I(clk_gen_pll$CLKOUT5), .O());

  // submodule clk_gen_clkout6buffer
  BUFG clk_gen_clkout6buffer(.I(clk_gen_pll$CLKOUT6), .O());

  // submodule clk_gen_pll
  MMCME2_ADV #(.BANDWIDTH("OPTIMIZED"),
	       .CLKFBOUT_USE_FINE_PS("FALSE"),
	       .CLKOUT0_USE_FINE_PS("FALSE"),
	       .CLKOUT1_USE_FINE_PS("FALSE"),
	       .CLKOUT2_USE_FINE_PS("FALSE"),
	       .CLKOUT3_USE_FINE_PS("FALSE"),
	       .CLKOUT4_CASCADE("FALSE"),
	       .CLKOUT4_USE_FINE_PS("FALSE"),
	       .CLKOUT5_USE_FINE_PS("FALSE"),
	       .CLKOUT6_USE_FINE_PS("FALSE"),
	       .COMPENSATION("ZHOLD"),
	       .STARTUP_WAIT("FALSE"),
	       .CLKFBOUT_MULT_F(5.0),
	       .CLKFBOUT_PHASE(0.0),
	       .CLKIN1_PERIOD(5.0),
	       .CLKIN2_PERIOD(0.0),
	       .DIVCLK_DIVIDE(32'd1),
	       .CLKOUT0_DIVIDE_F(10.0),
	       .CLKOUT0_DUTY_CYCLE(0.5),
	       .CLKOUT0_PHASE(0.0),
	       .CLKOUT1_DIVIDE(32'd5),
	       .CLKOUT1_DUTY_CYCLE(0.5),
	       .CLKOUT1_PHASE(0.0),
	       .CLKOUT2_DIVIDE(32'd10),
	       .CLKOUT2_DUTY_CYCLE(0.5),
	       .CLKOUT2_PHASE(0.0),
	       .CLKOUT3_DIVIDE(32'd10),
	       .CLKOUT3_DUTY_CYCLE(0.5),
	       .CLKOUT3_PHASE(0.0),
	       .CLKOUT4_DIVIDE(32'd10),
	       .CLKOUT4_DUTY_CYCLE(0.5),
	       .CLKOUT4_PHASE(0.0),
	       .CLKOUT5_DIVIDE(32'd10),
	       .CLKOUT5_DUTY_CYCLE(0.5),
	       .CLKOUT5_PHASE(0.0),
	       .CLKOUT6_DIVIDE(32'd10),
	       .CLKOUT6_DUTY_CYCLE(0.5),
	       .CLKOUT6_PHASE(0.0),
	       .REF_JITTER1(1.0e-2),
	       .REF_JITTER2(1.0e-2)) clk_gen_pll(.CLKIN1(sys_clk$O),
						 .RST(clk_gen_pll_reset$RESET_OUT),
						 .CLKIN2(1'd0),
						 .CLKINSEL(1'd1),
						 .DADDR(7'd0),
						 .DCLK(1'd0),
						 .DEN(1'd0),
						 .DI(16'd0),
						 .DWE(1'd0),
						 .PSCLK(1'd0),
						 .PSEN(1'd0),
						 .PSINCDEC(1'd0),
						 .PWRDWN(1'd0),
						 .CLKFBIN(clk_gen_pll$CLKFBIN),
						 .LOCKED(),
						 .CLKFBOUT(clk_gen_pll$CLKFBOUT),
						 .CLKFBOUTB(),
						 .CLKOUT0(clk_gen_pll$CLKOUT0),
						 .CLKOUT0B(clk_gen_pll$CLKOUT0B),
						 .CLKOUT1(clk_gen_pll$CLKOUT1),
						 .CLKOUT1B(clk_gen_pll$CLKOUT1B),
						 .CLKOUT2(clk_gen_pll$CLKOUT2),
						 .CLKOUT2B(clk_gen_pll$CLKOUT2B),
						 .CLKOUT3(clk_gen_pll$CLKOUT3),
						 .CLKOUT3B(clk_gen_pll$CLKOUT3B),
						 .CLKOUT4(clk_gen_pll$CLKOUT4),
						 .CLKOUT5(clk_gen_pll$CLKOUT5),
						 .CLKOUT6(clk_gen_pll$CLKOUT6));

  // submodule clk_gen_pll_clkfbbuf
  BUFG clk_gen_pll_clkfbbuf(.I(clk_gen_pll$CLKFBOUT),
			    .O(clk_gen_pll_clkfbbuf$O));

  // submodule clk_gen_pll_reset
  ResetInverter clk_gen_pll_reset(.RESET_IN(RST_N_pci_sys_reset_n),
				  .RESET_OUT(clk_gen_pll_reset$RESET_OUT));

  // submodule clk_gen_rst
  ResetInverter clk_gen_rst(.RESET_IN(clk_gen_rst_n$OUT_RST), .RESET_OUT());

  // submodule clk_gen_rst_n
  SyncReset0 clk_gen_rst_n(.IN_RST(RST_N_pci_sys_reset_n),
			   .OUT_RST(clk_gen_rst_n$OUT_RST));

  // submodule connectDDR3_jointReset
  SyncResetA #(.RSTDELAY(32'd1)) connectDDR3_jointReset(.CLK(ddr3_ctrl$ui_clk),
							.IN_RST(connectDDR3_jointReset1$RST_OUT),
							.OUT_RST(connectDDR3_jointReset$OUT_RST));

  // submodule connectDDR3_jointReset1
  ResetEither connectDDR3_jointReset1(.A_RST(ddr3_ctrl_user_reset_n$OUT_RST),
				      .B_RST(connectDDR3_uRst_dclk$OUT_RST),
				      .RST_OUT(connectDDR3_jointReset1$RST_OUT));

  // submodule connectDDR3_reqFIFO
  SyncFIFO1 #(.dataWidth(32'd601)) connectDDR3_reqFIFO(.sCLK(scemi_uclkgen$CLK_OUT),
						       .dCLK(ddr3_ctrl$ui_clk),
						       .sRST(scemi_rstgen_final_reset$RST_OUT),
						       .sD_IN(connectDDR3_reqFIFO$sD_IN),
						       .sENQ(connectDDR3_reqFIFO$sENQ),
						       .dDEQ(connectDDR3_reqFIFO$dDEQ),
						       .sFULL_N(connectDDR3_reqFIFO$sFULL_N),
						       .dEMPTY_N(connectDDR3_reqFIFO$dEMPTY_N),
						       .dD_OUT(connectDDR3_reqFIFO$dD_OUT));

  // submodule connectDDR3_respFIFO
  SyncFIFO1 #(.dataWidth(32'd512)) connectDDR3_respFIFO(.sCLK(ddr3_ctrl$ui_clk),
							.dCLK(scemi_uclkgen$CLK_OUT),
							.sRST(connectDDR3_jointReset$OUT_RST),
							.sD_IN(connectDDR3_respFIFO$sD_IN),
							.sENQ(connectDDR3_respFIFO$sENQ),
							.dDEQ(connectDDR3_respFIFO$dDEQ),
							.sFULL_N(connectDDR3_respFIFO$sFULL_N),
							.dEMPTY_N(connectDDR3_respFIFO$dEMPTY_N),
							.dD_OUT(connectDDR3_respFIFO$dD_OUT));

  // submodule connectDDR3_uRst_dclk
  SyncResetA #(.RSTDELAY(32'd1)) connectDDR3_uRst_dclk(.CLK(ddr3_ctrl$ui_clk),
						       .IN_RST(scemi_rstgen_final_reset$RST_OUT),
						       .OUT_RST(connectDDR3_uRst_dclk$OUT_RST));

  // submodule ddr3_ctrl
  ddr3_wrapper #(.SIM_BYPASS_INIT_CAL("OFF"),
		 .SIMULATION("FALSE")) ddr3_ctrl(.sys_clk_i(clk_gen_clkout1buffer$O),
						 .sys_rst(ddr3ref_rst_n$OUT_RST),
						 .clk_ref_i(clk_gen_clkout1buffer$O),
						 .app_addr(ddr3_ctrl$app_addr),
						 .app_cmd(ddr3_ctrl$app_cmd),
						 .app_en(ddr3_ctrl$app_en),
						 .app_wdf_data(ddr3_ctrl$app_wdf_data),
						 .app_wdf_end(ddr3_ctrl$app_wdf_end),
						 .app_wdf_mask(ddr3_ctrl$app_wdf_mask),
						 .app_wdf_wren(ddr3_ctrl$app_wdf_wren),
						 .ddr3_ck_p(ddr3_ctrl$ddr3_ck_p),
						 .ddr3_ck_n(ddr3_ctrl$ddr3_ck_n),
						 .ddr3_cke(ddr3_ctrl$ddr3_cke),
						 .ddr3_cs_n(ddr3_ctrl$ddr3_cs_n),
						 .ddr3_ras_n(ddr3_ctrl$ddr3_ras_n),
						 .ddr3_cas_n(ddr3_ctrl$ddr3_cas_n),
						 .ddr3_we_n(ddr3_ctrl$ddr3_we_n),
						 .ddr3_reset_n(ddr3_ctrl$ddr3_reset_n),
						 .ddr3_dm(ddr3_ctrl$ddr3_dm),
						 .ddr3_ba(ddr3_ctrl$ddr3_ba),
						 .ddr3_addr(ddr3_ctrl$ddr3_addr),
						 .ddr3_odt(ddr3_ctrl$ddr3_odt),
						 .init_calib_complete(ddr3_ctrl$init_calib_complete),
						 .app_rd_data(ddr3_ctrl$app_rd_data),
						 .app_rd_data_end(),
						 .app_rd_data_valid(ddr3_ctrl$app_rd_data_valid),
						 .app_rdy(ddr3_ctrl$app_rdy),
						 .app_wdf_rdy(ddr3_ctrl$app_wdf_rdy),
						 .ui_clk(ddr3_ctrl$ui_clk),
						 .ui_clk_sync_rst(ddr3_ctrl$ui_clk_sync_rst),
						 .ddr3_dq(ddr3_ctrl$ddr3_dq),
						 .ddr3_dqs_p(ddr3_ctrl$ddr3_dqs_p),
						 .ddr3_dqs_n(ddr3_ctrl$ddr3_dqs_n));

  // submodule ddr3_ctrl_dly_reset_n_rstifc
  MakeReset0 #(.init(1'd0)) ddr3_ctrl_dly_reset_n_rstifc(.CLK(clk_gen_clkout1buffer$O),
							 .RST(ddr3ref_rst_n$OUT_RST),
							 .ASSERT_IN(ddr3_ctrl_dly_reset_n_rstifc$ASSERT_IN),
							 .ASSERT_OUT(),
							 .OUT_RST());

  // submodule ddr3_ctrl_fRequest
  FIFO2 #(.width(32'd605),
	  .guarded(32'd1)) ddr3_ctrl_fRequest(.RST(ddr3_ctrl_user_reset_n$OUT_RST),
					      .CLK(ddr3_ctrl$ui_clk),
					      .D_IN(ddr3_ctrl_fRequest$D_IN),
					      .ENQ(ddr3_ctrl_fRequest$ENQ),
					      .DEQ(ddr3_ctrl_fRequest$DEQ),
					      .CLR(ddr3_ctrl_fRequest$CLR),
					      .D_OUT(ddr3_ctrl_fRequest$D_OUT),
					      .FULL_N(ddr3_ctrl_fRequest$FULL_N),
					      .EMPTY_N(ddr3_ctrl_fRequest$EMPTY_N));

  // submodule ddr3_ctrl_fResponse
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) ddr3_ctrl_fResponse(.RST(ddr3_ctrl_user_reset_n$OUT_RST),
					       .CLK(ddr3_ctrl$ui_clk),
					       .D_IN(ddr3_ctrl_fResponse$D_IN),
					       .ENQ(ddr3_ctrl_fResponse$ENQ),
					       .DEQ(ddr3_ctrl_fResponse$DEQ),
					       .CLR(ddr3_ctrl_fResponse$CLR),
					       .D_OUT(ddr3_ctrl_fResponse$D_OUT),
					       .FULL_N(ddr3_ctrl_fResponse$FULL_N),
					       .EMPTY_N(ddr3_ctrl_fResponse$EMPTY_N));

  // submodule ddr3_ctrl_rReadsPending
  Counter #(.width(32'd32),
	    .init(32'd0)) ddr3_ctrl_rReadsPending(.CLK(ddr3_ctrl$ui_clk),
						  .RST(ddr3_ctrl_user_reset_n$OUT_RST),
						  .DATA_A(ddr3_ctrl_rReadsPending$DATA_A),
						  .DATA_B(ddr3_ctrl_rReadsPending$DATA_B),
						  .DATA_C(ddr3_ctrl_rReadsPending$DATA_C),
						  .DATA_F(ddr3_ctrl_rReadsPending$DATA_F),
						  .ADDA(ddr3_ctrl_rReadsPending$ADDA),
						  .ADDB(ddr3_ctrl_rReadsPending$ADDB),
						  .SETC(ddr3_ctrl_rReadsPending$SETC),
						  .SETF(ddr3_ctrl_rReadsPending$SETF),
						  .Q_OUT());

  // submodule ddr3_ctrl_user_reset0_n
  ResetInverter ddr3_ctrl_user_reset0_n(.RESET_IN(ddr3_ctrl$ui_clk_sync_rst),
					.RESET_OUT(ddr3_ctrl_user_reset0_n$RESET_OUT));

  // submodule ddr3_ctrl_user_reset_n
  SyncResetA #(.RSTDELAY(32'd1)) ddr3_ctrl_user_reset_n(.CLK(ddr3_ctrl$ui_clk),
							.IN_RST(ddr3_ctrl_user_reset0_n$RESET_OUT),
							.OUT_RST(ddr3_ctrl_user_reset_n$OUT_RST));

  // submodule ddr3ref_rst_n
  SyncResetA #(.RSTDELAY(32'd0)) ddr3ref_rst_n(.CLK(clk_gen_clkout1buffer$O),
					       .IN_RST(rst_n$OUT_RST),
					       .OUT_RST(ddr3ref_rst_n$OUT_RST));

  // submodule rst_n
  SyncResetA #(.RSTDELAY(32'd0)) rst_n(.CLK(clk_gen_clkout0buffer$O),
				       .IN_RST(RST_N_pci_sys_reset_n),
				       .OUT_RST(rst_n$OUT_RST));

  // submodule scemi_1_fifoTxData_dCombinedReset
  ResetEither scemi_1_fifoTxData_dCombinedReset(.A_RST(scemi_epReset250$OUT_RST),
						.B_RST(scemi_1_fifoTxData_dCrossedsReset$OUT_RST),
						.RST_OUT(scemi_1_fifoTxData_dCombinedReset$RST_OUT));

  // submodule scemi_1_fifoTxData_dCrossedsReset
  SyncReset0 scemi_1_fifoTxData_dCrossedsReset(.IN_RST(scemi_epReset125$OUT_RST),
					       .OUT_RST(scemi_1_fifoTxData_dCrossedsReset$OUT_RST));

  // submodule scemi_1_fifoTxData_sCombinedReset
  ResetEither scemi_1_fifoTxData_sCombinedReset(.A_RST(scemi_epReset125$OUT_RST),
						.B_RST(scemi_1_fifoTxData_sCrosseddReset$OUT_RST),
						.RST_OUT(scemi_1_fifoTxData_sCombinedReset$RST_OUT));

  // submodule scemi_1_fifoTxData_sCrosseddReset
  SyncReset0 scemi_1_fifoTxData_sCrosseddReset(.IN_RST(scemi_epReset250$OUT_RST),
					       .OUT_RST(scemi_1_fifoTxData_sCrosseddReset$OUT_RST));

  // submodule scemi_1_outFifo
  FIFO2 #(.width(32'd81),
	  .guarded(32'd1)) scemi_1_outFifo(.RST(scemi_epReset250$OUT_RST),
					   .CLK(scemi_pcie_ep$user_clk_out),
					   .D_IN(scemi_1_outFifo$D_IN),
					   .ENQ(scemi_1_outFifo$ENQ),
					   .DEQ(scemi_1_outFifo$DEQ),
					   .CLR(scemi_1_outFifo$CLR),
					   .D_OUT(scemi_1_outFifo$D_OUT),
					   .FULL_N(scemi_1_outFifo$FULL_N),
					   .EMPTY_N(scemi_1_outFifo$EMPTY_N));

  // submodule scemi_Prelude_inst_changeSpecialWires_outstanding
  Counter #(.width(32'd5),
	    .init(5'd0)) scemi_Prelude_inst_changeSpecialWires_outstanding(.CLK(scemi_clk_port_clkgen$CLK_OUT),
									   .RST(scemi_clk_port_cReset$O),
									   .DATA_A(scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_A),
									   .DATA_B(scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_B),
									   .DATA_C(scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_C),
									   .DATA_F(scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_F),
									   .ADDA(scemi_Prelude_inst_changeSpecialWires_outstanding$ADDA),
									   .ADDB(scemi_Prelude_inst_changeSpecialWires_outstanding$ADDB),
									   .SETC(scemi_Prelude_inst_changeSpecialWires_outstanding$SETC),
									   .SETF(scemi_Prelude_inst_changeSpecialWires_outstanding$SETF),
									   .Q_OUT(scemi_Prelude_inst_changeSpecialWires_outstanding$Q_OUT));

  // submodule scemi_Prelude_inst_changeSpecialWires_respbuf
  SizedFIFO #(.p1width(32'd512),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) scemi_Prelude_inst_changeSpecialWires_respbuf(.RST(scemi_clk_port_cReset$O),
									     .CLK(scemi_clk_port_clkgen$CLK_OUT),
									     .D_IN(scemi_Prelude_inst_changeSpecialWires_respbuf$D_IN),
									     .ENQ(scemi_Prelude_inst_changeSpecialWires_respbuf$ENQ),
									     .DEQ(scemi_Prelude_inst_changeSpecialWires_respbuf$DEQ),
									     .CLR(scemi_Prelude_inst_changeSpecialWires_respbuf$CLR),
									     .D_OUT(scemi_Prelude_inst_changeSpecialWires_respbuf$D_OUT),
									     .FULL_N(scemi_Prelude_inst_changeSpecialWires_respbuf$FULL_N),
									     .EMPTY_N(scemi_Prelude_inst_changeSpecialWires_respbuf$EMPTY_N));

  // submodule scemi_bridge
  mkPCIEtoBNoCSceMi_4 scemi_bridge(.board_content_id(64'h05CE000600080000),
				   .my_id(x__h18315),
				   .max_read_req_bytes(scemi_max_read_req_bytes),
				   .max_payload_bytes(scemi_max_payload_bytes),
				   .rcb_mask(scemi_rcb_mask),
				   .msix_enabled(scemi_msix_enable),
				   .msix_mask_all_intr(scemi_msix_masked),
				   .msi_enabled(1'd0),
				   .CLK(scemi_clkgen_clkout0buffer$O),
				   .RST_N(scemi_epReset125$OUT_RST),
				   .clocks_response_put(scemi_bridge$clocks_response_put),
				   .noc_in_beat_v(scemi_bridge$noc_in_beat_v),
				   .noc_in_src_rdy_b(scemi_bridge$noc_in_src_rdy_b),
				   .noc_out_dst_rdy_b(scemi_bridge$noc_out_dst_rdy_b),
				   .status_bluenoc_link_is_up_i(scemi_bridge$status_bluenoc_link_is_up_i),
				   .status_interrupts_enabled_i(scemi_bridge$status_interrupts_enabled_i),
				   .status_memory_enabled_i(scemi_bridge$status_memory_enabled_i),
				   .status_out_of_reset_i(scemi_bridge$status_out_of_reset_i),
				   .status_pcie_link_is_up_i(scemi_bridge$status_pcie_link_is_up_i),
				   .tlps_snd_put(scemi_bridge$tlps_snd_put),
				   .EN_tlps_fst_get(scemi_bridge$EN_tlps_fst_get),
				   .EN_tlps_snd_put(scemi_bridge$EN_tlps_snd_put),
				   .EN_msi_interrupt_clear(scemi_bridge$EN_msi_interrupt_clear),
				   .EN_clocks_request_get(scemi_bridge$EN_clocks_request_get),
				   .EN_clocks_response_put(scemi_bridge$EN_clocks_response_put),
				   .tlps_fst_get(scemi_bridge$tlps_fst_get),
				   .RDY_tlps_fst_get(scemi_bridge$RDY_tlps_fst_get),
				   .RDY_tlps_snd_put(scemi_bridge$RDY_tlps_snd_put),
				   .noc_in_dst_rdy(scemi_bridge$noc_in_dst_rdy),
				   .noc_out_src_rdy(scemi_bridge$noc_out_src_rdy),
				   .noc_out_beat(scemi_bridge$noc_out_beat),
				   .is_activated(scemi_bridge$is_activated),
				   .rx_activity(),
				   .tx_activity(),
				   .msi_interrupt_req(),
				   .clocks_request_get(scemi_bridge$clocks_request_get),
				   .RDY_clocks_request_get(scemi_bridge$RDY_clocks_request_get),
				   .RDY_clocks_response_put(scemi_bridge$RDY_clocks_response_put));

  // submodule scemi_clk_port_cReset
  BUFG scemi_clk_port_cReset(.I(scemi_clk_port_rstgen_final_reset$RST_OUT),
			     .O(scemi_clk_port_cReset$O));

  // submodule scemi_clk_port_clkgen
  MakeClock #(.initVal(1'd0),
	      .initGate(1'd1)) scemi_clk_port_clkgen(.CLK(scemi_scemi_clkgen_clkout0buf$O),
						     .RST(scemi_network_status$OUT_RST),
						     .CLK_IN(scemi_clk_port_clkgen$CLK_IN),
						     .COND_IN(scemi_clk_port_clkgen$COND_IN),
						     .CLK_IN_EN(scemi_clk_port_clkgen$CLK_IN_EN),
						     .COND_IN_EN(scemi_clk_port_clkgen$COND_IN_EN),
						     .CLK_VAL_OUT(),
						     .COND_OUT(),
						     .CLK_GATE_OUT(),
						     .CLK_OUT(scemi_clk_port_clkgen$CLK_OUT));

  // submodule scemi_clk_port_param_clockGroup
  mkSceMiUInt32Parameter #(.n(32'hFFFFFFFF)) scemi_clk_port_param_clockGroup(.not_used());

  // submodule scemi_clk_port_param_clockNum
  mkSceMiUInt32Parameter #(.n(32'd0)) scemi_clk_port_param_clockNum(.not_used());

  // submodule scemi_clk_port_param_dutyHi
  mkSceMiUInt32Parameter #(.n(32'd0)) scemi_clk_port_param_dutyHi(.not_used());

  // submodule scemi_clk_port_param_dutyLo
  mkSceMiUInt32Parameter #(.n(32'd100)) scemi_clk_port_param_dutyLo(.not_used());

  // submodule scemi_clk_port_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_clk_port_param_link_type(.not_used());

  // submodule scemi_clk_port_param_phase
  mkSceMiUInt32Parameter #(.n(32'd0)) scemi_clk_port_param_phase(.not_used());

  // submodule scemi_clk_port_param_ratioDen
  mkSceMiUInt64Parameter #(.n(64'd1)) scemi_clk_port_param_ratioDen(.not_used());

  // submodule scemi_clk_port_param_ratioNum
  mkSceMiUInt64Parameter #(.n(64'd1)) scemi_clk_port_param_ratioNum(.not_used());

  // submodule scemi_clk_port_param_rstStage
  mkSceMiUInt32Parameter #(.n(32'd8)) scemi_clk_port_param_rstStage(.not_used());

  // submodule scemi_clk_port_rstgen_final_reset
  ResetEither scemi_clk_port_rstgen_final_reset(.A_RST(scemi_clk_port_rstgen_inv_rstgen$OUT_RST),
						.B_RST(scemi_clk_port_rstgen_rstgen$OUT_RST),
						.RST_OUT(scemi_clk_port_rstgen_final_reset$RST_OUT));

  // submodule scemi_clk_port_rstgen_inv_clk
  ClockInverter scemi_clk_port_rstgen_inv_clk(.CLK_IN(scemi_scemi_clkgen_clkout0buf$O),
					      .PREEDGE(),
					      .CLK_OUT(scemi_clk_port_rstgen_inv_clk$CLK_OUT));

  // submodule scemi_clk_port_rstgen_inv_rstgen
  MakeResetA #(.RSTDELAY(32'd1),
	       .init(1'd0)) scemi_clk_port_rstgen_inv_rstgen(.CLK(scemi_clk_port_rstgen_inv_clk$CLK_OUT),
							     .RST(scemi_clk_port_rstgen_inv_rstn$OUT_RST),
							     .DST_CLK(scemi_clk_port_clkgen$CLK_OUT),
							     .ASSERT_IN(scemi_clk_port_rstgen_inv_rstgen$ASSERT_IN),
							     .ASSERT_OUT(),
							     .OUT_RST(scemi_clk_port_rstgen_inv_rstgen$OUT_RST));

  // submodule scemi_clk_port_rstgen_inv_rstn
  SyncReset0 scemi_clk_port_rstgen_inv_rstn(.IN_RST(scemi_network_status$OUT_RST),
					    .OUT_RST(scemi_clk_port_rstgen_inv_rstn$OUT_RST));

  // submodule scemi_clk_port_rstgen_rstgen
  MakeReset0 #(.init(1'd0)) scemi_clk_port_rstgen_rstgen(.CLK(scemi_scemi_clkgen_clkout0buf$O),
							 .RST(scemi_network_status$OUT_RST),
							 .ASSERT_IN(scemi_clk_port_rstgen_rstgen$ASSERT_IN),
							 .ASSERT_OUT(),
							 .OUT_RST(scemi_clk_port_rstgen_rstgen$OUT_RST));

  // submodule scemi_clkgen_clkout0buffer
  BUFG scemi_clkgen_clkout0buffer(.I(scemi_clkgen_pll$CLKOUT0),
				  .O(scemi_clkgen_clkout0buffer$O));

  // submodule scemi_clkgen_clkout0nbuffer
  BUFG scemi_clkgen_clkout0nbuffer(.I(scemi_clkgen_pll$CLKOUT0B), .O());

  // submodule scemi_clkgen_clkout1buffer
  BUFG scemi_clkgen_clkout1buffer(.I(scemi_clkgen_pll$CLKOUT1), .O());

  // submodule scemi_clkgen_clkout1nbuffer
  BUFG scemi_clkgen_clkout1nbuffer(.I(scemi_clkgen_pll$CLKOUT1B), .O());

  // submodule scemi_clkgen_clkout2buffer
  BUFG scemi_clkgen_clkout2buffer(.I(scemi_clkgen_pll$CLKOUT2), .O());

  // submodule scemi_clkgen_clkout2nbuffer
  BUFG scemi_clkgen_clkout2nbuffer(.I(scemi_clkgen_pll$CLKOUT2B), .O());

  // submodule scemi_clkgen_clkout3buffer
  BUFG scemi_clkgen_clkout3buffer(.I(scemi_clkgen_pll$CLKOUT3), .O());

  // submodule scemi_clkgen_clkout3nbuffer
  BUFG scemi_clkgen_clkout3nbuffer(.I(scemi_clkgen_pll$CLKOUT3B), .O());

  // submodule scemi_clkgen_clkout4buffer
  BUFG scemi_clkgen_clkout4buffer(.I(scemi_clkgen_pll$CLKOUT4), .O());

  // submodule scemi_clkgen_clkout5buffer
  BUFG scemi_clkgen_clkout5buffer(.I(scemi_clkgen_pll$CLKOUT5), .O());

  // submodule scemi_clkgen_clkout6buffer
  BUFG scemi_clkgen_clkout6buffer(.I(scemi_clkgen_pll$CLKOUT6), .O());

  // submodule scemi_clkgen_pll
  MMCME2_ADV #(.BANDWIDTH("OPTIMIZED"),
	       .CLKFBOUT_USE_FINE_PS("FALSE"),
	       .CLKOUT0_USE_FINE_PS("FALSE"),
	       .CLKOUT1_USE_FINE_PS("FALSE"),
	       .CLKOUT2_USE_FINE_PS("FALSE"),
	       .CLKOUT3_USE_FINE_PS("FALSE"),
	       .CLKOUT4_CASCADE("FALSE"),
	       .CLKOUT4_USE_FINE_PS("FALSE"),
	       .CLKOUT5_USE_FINE_PS("FALSE"),
	       .CLKOUT6_USE_FINE_PS("FALSE"),
	       .COMPENSATION("ZHOLD"),
	       .STARTUP_WAIT("FALSE"),
	       .CLKFBOUT_MULT_F(4.0),
	       .CLKFBOUT_PHASE(0.0),
	       .CLKIN1_PERIOD(4.0),
	       .CLKIN2_PERIOD(0.0),
	       .DIVCLK_DIVIDE(32'd1),
	       .CLKOUT0_DIVIDE_F(8.0),
	       .CLKOUT0_DUTY_CYCLE(0.5),
	       .CLKOUT0_PHASE(0.0),
	       .CLKOUT1_DIVIDE(32'd10),
	       .CLKOUT1_DUTY_CYCLE(0.5),
	       .CLKOUT1_PHASE(0.0),
	       .CLKOUT2_DIVIDE(32'd10),
	       .CLKOUT2_DUTY_CYCLE(0.5),
	       .CLKOUT2_PHASE(0.0),
	       .CLKOUT3_DIVIDE(32'd10),
	       .CLKOUT3_DUTY_CYCLE(0.5),
	       .CLKOUT3_PHASE(0.0),
	       .CLKOUT4_DIVIDE(32'd10),
	       .CLKOUT4_DUTY_CYCLE(0.5),
	       .CLKOUT4_PHASE(0.0),
	       .CLKOUT5_DIVIDE(32'd10),
	       .CLKOUT5_DUTY_CYCLE(0.5),
	       .CLKOUT5_PHASE(0.0),
	       .CLKOUT6_DIVIDE(32'd10),
	       .CLKOUT6_DUTY_CYCLE(0.5),
	       .CLKOUT6_PHASE(0.0),
	       .REF_JITTER1(1.0e-2),
	       .REF_JITTER2(1.0e-2)) scemi_clkgen_pll(.CLKIN1(scemi_pcie_ep$user_clk_out),
						      .RST(scemi_clkgen_pll_reset$RESET_OUT),
						      .CLKIN2(1'd0),
						      .CLKINSEL(1'd1),
						      .DADDR(7'd0),
						      .DCLK(1'd0),
						      .DEN(1'd0),
						      .DI(16'd0),
						      .DWE(1'd0),
						      .PSCLK(1'd0),
						      .PSEN(1'd0),
						      .PSINCDEC(1'd0),
						      .PWRDWN(1'd0),
						      .CLKFBIN(scemi_clkgen_pll$CLKFBIN),
						      .LOCKED(),
						      .CLKFBOUT(scemi_clkgen_pll$CLKFBOUT),
						      .CLKFBOUTB(),
						      .CLKOUT0(scemi_clkgen_pll$CLKOUT0),
						      .CLKOUT0B(scemi_clkgen_pll$CLKOUT0B),
						      .CLKOUT1(scemi_clkgen_pll$CLKOUT1),
						      .CLKOUT1B(scemi_clkgen_pll$CLKOUT1B),
						      .CLKOUT2(scemi_clkgen_pll$CLKOUT2),
						      .CLKOUT2B(scemi_clkgen_pll$CLKOUT2B),
						      .CLKOUT3(scemi_clkgen_pll$CLKOUT3),
						      .CLKOUT3B(scemi_clkgen_pll$CLKOUT3B),
						      .CLKOUT4(scemi_clkgen_pll$CLKOUT4),
						      .CLKOUT5(scemi_clkgen_pll$CLKOUT5),
						      .CLKOUT6(scemi_clkgen_pll$CLKOUT6));

  // submodule scemi_clkgen_pll_clkfbbuf
  BUFG scemi_clkgen_pll_clkfbbuf(.I(scemi_clkgen_pll$CLKFBOUT),
				 .O(scemi_clkgen_pll_clkfbbuf$O));

  // submodule scemi_clkgen_pll_reset
  ResetInverter scemi_clkgen_pll_reset(.RESET_IN(scemi_user_reset_n$RESET_OUT),
				       .RESET_OUT(scemi_clkgen_pll_reset$RESET_OUT));

  // submodule scemi_clkgen_rst
  ResetInverter scemi_clkgen_rst(.RESET_IN(scemi_clkgen_rst_n$OUT_RST),
				 .RESET_OUT());

  // submodule scemi_clkgen_rst_n
  SyncResetA #(.RSTDELAY(32'd2)) scemi_clkgen_rst_n(.CLK(scemi_pcie_ep$user_clk_out),
						    .IN_RST(scemi_user_reset_n$RESET_OUT),
						    .OUT_RST(scemi_clkgen_rst_n$OUT_RST));

  // submodule scemi_clockGenerators_clock_gens_counters_pre_negedge_uclk
  SyncBit05 #(.init(1'd0)) scemi_clockGenerators_clock_gens_counters_pre_negedge_uclk(.sCLK(scemi_scemi_clkgen_clkout0buf$O),
										      .dCLK(scemi_uclkgen$CLK_OUT),
										      .sRST(scemi_network_status$OUT_RST),
										      .sD_IN(scemi_clockGenerators_clock_gens_counters_pre_negedge_uclk$sD_IN),
										      .sEN(scemi_clockGenerators_clock_gens_counters_pre_negedge_uclk$sEN),
										      .dD_OUT());

  // submodule scemi_clockGenerators_clock_gens_counters_pre_posedge_uclk
  SyncBit05 #(.init(1'd0)) scemi_clockGenerators_clock_gens_counters_pre_posedge_uclk(.sCLK(scemi_scemi_clkgen_clkout0buf$O),
										      .dCLK(scemi_uclkgen$CLK_OUT),
										      .sRST(scemi_network_status$OUT_RST),
										      .sD_IN(scemi_clockGenerators_clock_gens_counters_pre_posedge_uclk$sD_IN),
										      .sEN(scemi_clockGenerators_clock_gens_counters_pre_posedge_uclk$sEN),
										      .dD_OUT());

  // submodule scemi_clockGenerators_one_to_one_cclock_pre_negedge_uclk
  SyncBit05 #(.init(1'd0)) scemi_clockGenerators_one_to_one_cclock_pre_negedge_uclk(.sCLK(scemi_scemi_clkgen_clkout0buf$O),
										    .dCLK(scemi_uclkgen$CLK_OUT),
										    .sRST(scemi_network_status$OUT_RST),
										    .sD_IN(scemi_clockGenerators_one_to_one_cclock_pre_negedge_uclk$sD_IN),
										    .sEN(scemi_clockGenerators_one_to_one_cclock_pre_negedge_uclk$sEN),
										    .dD_OUT());

  // submodule scemi_clockGenerators_one_to_one_cclock_pre_posedge_uclk
  SyncBit05 #(.init(1'd0)) scemi_clockGenerators_one_to_one_cclock_pre_posedge_uclk(.sCLK(scemi_scemi_clkgen_clkout0buf$O),
										    .dCLK(scemi_uclkgen$CLK_OUT),
										    .sRST(scemi_network_status$OUT_RST),
										    .sD_IN(scemi_clockGenerators_one_to_one_cclock_pre_posedge_uclk$sD_IN),
										    .sEN(scemi_clockGenerators_one_to_one_cclock_pre_posedge_uclk$sEN),
										    .dD_OUT());

  // submodule scemi_count_outport_ending_reset
  SyncPulse scemi_count_outport_ending_reset(.sCLK(scemi_uclkgen$CLK_OUT),
					     .dCLK(scemi_clkgen_clkout0buffer$O),
					     .sRST(scemi_count_outport_nocResetUClock$OUT_RST),
					     .sEN(scemi_count_outport_ending_reset$sEN),
					     .dPulse(scemi_count_outport_ending_reset$dPulse));

  // submodule scemi_count_outport_finished
  SyncHandshake scemi_count_outport_finished(.sCLK(scemi_clkgen_clkout0buffer$O),
					     .dCLK(scemi_uclkgen$CLK_OUT),
					     .sRST(scemi_epReset125$OUT_RST),
					     .sEN(scemi_count_outport_finished$sEN),
					     .sRDY(scemi_count_outport_finished$sRDY),
					     .dPulse(scemi_count_outport_finished$dPulse));

  // submodule scemi_count_outport_next
  SyncHandshake scemi_count_outport_next(.sCLK(scemi_uclkgen$CLK_OUT),
					 .dCLK(scemi_clkgen_clkout0buffer$O),
					 .sRST(scemi_rstgen_final_reset$RST_OUT),
					 .sEN(scemi_count_outport_next$sEN),
					 .sRDY(scemi_count_outport_next$sRDY),
					 .dPulse(scemi_count_outport_next$dPulse));

  // submodule scemi_count_outport_nocResetUClock
  SyncReset0 scemi_count_outport_nocResetUClock(.IN_RST(scemi_epReset125$OUT_RST),
						.OUT_RST(scemi_count_outport_nocResetUClock$OUT_RST));

  // submodule scemi_count_outport_param_channelId
  mkSceMiUInt32Parameter #(.n(32'd3)) scemi_count_outport_param_channelId(.not_used());

  // submodule scemi_count_outport_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_count_outport_param_link_type(.not_used());

  // submodule scemi_count_outport_starting_reset
  SyncPulse scemi_count_outport_starting_reset(.sCLK(scemi_uclkgen$CLK_OUT),
					       .dCLK(scemi_clkgen_clkout0buffer$O),
					       .sRST(scemi_count_outport_nocResetUClock$OUT_RST),
					       .sEN(scemi_count_outport_starting_reset$sEN),
					       .dPulse(scemi_count_outport_starting_reset$dPulse));

  // submodule scemi_count_res_fifo
  SyncFIFO #(.dataWidth(32'd64),
	     .depth(32'd2),
	     .indxWidth(32'd1)) scemi_count_res_fifo(.sCLK(scemi_clk_port_clkgen$CLK_OUT),
						     .dCLK(scemi_uclkgen$CLK_OUT),
						     .sRST(scemi_clk_port_cReset$O),
						     .sD_IN(scemi_count_res_fifo$sD_IN),
						     .sENQ(scemi_count_res_fifo$sENQ),
						     .dDEQ(scemi_count_res_fifo$dDEQ),
						     .sFULL_N(scemi_count_res_fifo$sFULL_N),
						     .dEMPTY_N(scemi_count_res_fifo$dEMPTY_N),
						     .dD_OUT(scemi_count_res_fifo$dD_OUT));

  // submodule scemi_data_req_inport_buffer_empty_sp
  SyncHandshake scemi_data_req_inport_buffer_empty_sp(.sCLK(scemi_clkgen_clkout0buffer$O),
						      .dCLK(scemi_uclkgen$CLK_OUT),
						      .sRST(scemi_epReset125$OUT_RST),
						      .sEN(scemi_data_req_inport_buffer_empty_sp$sEN),
						      .sRDY(scemi_data_req_inport_buffer_empty_sp$sRDY),
						      .dPulse(scemi_data_req_inport_buffer_empty_sp$dPulse));

  // submodule scemi_data_req_inport_buffer_full_sp
  SyncHandshake scemi_data_req_inport_buffer_full_sp(.sCLK(scemi_clkgen_clkout0buffer$O),
						     .dCLK(scemi_uclkgen$CLK_OUT),
						     .sRST(scemi_epReset125$OUT_RST),
						     .sEN(scemi_data_req_inport_buffer_full_sp$sEN),
						     .sRDY(scemi_data_req_inport_buffer_full_sp$sRDY),
						     .dPulse(scemi_data_req_inport_buffer_full_sp$dPulse));

  // submodule scemi_data_req_inport_ending_reset
  SyncPulse scemi_data_req_inport_ending_reset(.sCLK(scemi_uclkgen$CLK_OUT),
					       .dCLK(scemi_clkgen_clkout0buffer$O),
					       .sRST(scemi_data_req_inport_nocResetUClock$OUT_RST),
					       .sEN(scemi_data_req_inport_ending_reset$sEN),
					       .dPulse(scemi_data_req_inport_ending_reset$dPulse));

  // submodule scemi_data_req_inport_next_sp
  SyncHandshake scemi_data_req_inport_next_sp(.sCLK(scemi_uclkgen$CLK_OUT),
					      .dCLK(scemi_clkgen_clkout0buffer$O),
					      .sRST(scemi_rstgen_final_reset$RST_OUT),
					      .sEN(scemi_data_req_inport_next_sp$sEN),
					      .sRDY(scemi_data_req_inport_next_sp$sRDY),
					      .dPulse(scemi_data_req_inport_next_sp$dPulse));

  // submodule scemi_data_req_inport_nocResetUClock
  SyncReset0 scemi_data_req_inport_nocResetUClock(.IN_RST(scemi_epReset125$OUT_RST),
						  .OUT_RST(scemi_data_req_inport_nocResetUClock$OUT_RST));

  // submodule scemi_data_req_inport_param_channelId
  mkSceMiUInt32Parameter #(.n(32'd2)) scemi_data_req_inport_param_channelId(.not_used());

  // submodule scemi_data_req_inport_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_data_req_inport_param_link_type(.not_used());

  // submodule scemi_data_req_inport_starting_reset
  SyncPulse scemi_data_req_inport_starting_reset(.sCLK(scemi_uclkgen$CLK_OUT),
						 .dCLK(scemi_clkgen_clkout0buffer$O),
						 .sRST(scemi_data_req_inport_nocResetUClock$OUT_RST),
						 .sEN(scemi_data_req_inport_starting_reset$sEN),
						 .dPulse(scemi_data_req_inport_starting_reset$dPulse));

  // submodule scemi_data_req_inport_wait_sp
  SyncHandshake scemi_data_req_inport_wait_sp(.sCLK(scemi_uclkgen$CLK_OUT),
					      .dCLK(scemi_clkgen_clkout0buffer$O),
					      .sRST(scemi_rstgen_final_reset$RST_OUT),
					      .sEN(scemi_data_req_inport_wait_sp$sEN),
					      .sRDY(scemi_data_req_inport_wait_sp$sRDY),
					      .dPulse(scemi_data_req_inport_wait_sp$dPulse));

  // submodule scemi_data_req_res_fifo
  SyncFIFO #(.dataWidth(32'd4),
	     .depth(32'd2),
	     .indxWidth(32'd1)) scemi_data_req_res_fifo(.sCLK(scemi_uclkgen$CLK_OUT),
							.dCLK(scemi_clk_port_clkgen$CLK_OUT),
							.sRST(scemi_rstgen_final_reset$RST_OUT),
							.sD_IN(scemi_data_req_res_fifo$sD_IN),
							.sENQ(scemi_data_req_res_fifo$sENQ),
							.dDEQ(scemi_data_req_res_fifo$dDEQ),
							.sFULL_N(scemi_data_req_res_fifo$sFULL_N),
							.dEMPTY_N(scemi_data_req_res_fifo$dEMPTY_N),
							.dD_OUT(scemi_data_req_res_fifo$dD_OUT));

  // submodule scemi_data_resp_outport_ending_reset
  SyncPulse scemi_data_resp_outport_ending_reset(.sCLK(scemi_uclkgen$CLK_OUT),
						 .dCLK(scemi_clkgen_clkout0buffer$O),
						 .sRST(scemi_data_resp_outport_nocResetUClock$OUT_RST),
						 .sEN(scemi_data_resp_outport_ending_reset$sEN),
						 .dPulse(scemi_data_resp_outport_ending_reset$dPulse));

  // submodule scemi_data_resp_outport_finished
  SyncHandshake scemi_data_resp_outport_finished(.sCLK(scemi_clkgen_clkout0buffer$O),
						 .dCLK(scemi_uclkgen$CLK_OUT),
						 .sRST(scemi_epReset125$OUT_RST),
						 .sEN(scemi_data_resp_outport_finished$sEN),
						 .sRDY(scemi_data_resp_outport_finished$sRDY),
						 .dPulse(scemi_data_resp_outport_finished$dPulse));

  // submodule scemi_data_resp_outport_next
  SyncHandshake scemi_data_resp_outport_next(.sCLK(scemi_uclkgen$CLK_OUT),
					     .dCLK(scemi_clkgen_clkout0buffer$O),
					     .sRST(scemi_rstgen_final_reset$RST_OUT),
					     .sEN(scemi_data_resp_outport_next$sEN),
					     .sRDY(scemi_data_resp_outport_next$sRDY),
					     .dPulse(scemi_data_resp_outport_next$dPulse));

  // submodule scemi_data_resp_outport_nocResetUClock
  SyncReset0 scemi_data_resp_outport_nocResetUClock(.IN_RST(scemi_epReset125$OUT_RST),
						    .OUT_RST(scemi_data_resp_outport_nocResetUClock$OUT_RST));

  // submodule scemi_data_resp_outport_param_channelId
  mkSceMiUInt32Parameter #(.n(32'd2)) scemi_data_resp_outport_param_channelId(.not_used());

  // submodule scemi_data_resp_outport_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_data_resp_outport_param_link_type(.not_used());

  // submodule scemi_data_resp_outport_starting_reset
  SyncPulse scemi_data_resp_outport_starting_reset(.sCLK(scemi_uclkgen$CLK_OUT),
						   .dCLK(scemi_clkgen_clkout0buffer$O),
						   .sRST(scemi_data_resp_outport_nocResetUClock$OUT_RST),
						   .sEN(scemi_data_resp_outport_starting_reset$sEN),
						   .dPulse(scemi_data_resp_outport_starting_reset$dPulse));

  // submodule scemi_data_resp_res_fifo
  SyncFIFO #(.dataWidth(32'd4),
	     .depth(32'd2),
	     .indxWidth(32'd1)) scemi_data_resp_res_fifo(.sCLK(scemi_clk_port_clkgen$CLK_OUT),
							 .dCLK(scemi_uclkgen$CLK_OUT),
							 .sRST(scemi_clk_port_cReset$O),
							 .sD_IN(scemi_data_resp_res_fifo$sD_IN),
							 .sENQ(scemi_data_resp_res_fifo$sENQ),
							 .dDEQ(scemi_data_resp_res_fifo$dDEQ),
							 .sFULL_N(scemi_data_resp_res_fifo$sFULL_N),
							 .dEMPTY_N(scemi_data_resp_res_fifo$dEMPTY_N),
							 .dD_OUT(scemi_data_resp_res_fifo$dD_OUT));

  // submodule scemi_dut_dut_dutIfc_didreset
  FIFO2 #(.width(32'd1),
	  .guarded(32'd1)) scemi_dut_dut_dutIfc_didreset(.RST(scemi_clk_port_cReset$O),
							 .CLK(scemi_clk_port_clkgen$CLK_OUT),
							 .D_IN(scemi_dut_dut_dutIfc_didreset$D_IN),
							 .ENQ(scemi_dut_dut_dutIfc_didreset$ENQ),
							 .DEQ(scemi_dut_dut_dutIfc_didreset$DEQ),
							 .CLR(scemi_dut_dut_dutIfc_didreset$CLR),
							 .D_OUT(scemi_dut_dut_dutIfc_didreset$D_OUT),
							 .FULL_N(scemi_dut_dut_dutIfc_didreset$FULL_N),
							 .EMPTY_N(scemi_dut_dut_dutIfc_didreset$EMPTY_N));

  // submodule scemi_dut_dut_dutIfc_m_dut
  mkDutWrapper scemi_dut_dut_dutIfc_m_dut(.CLK(scemi_clk_port_clkgen$CLK_OUT),
					  .RST_N(scemi_dut_dut_dutIfc_myrst$OUT_RST),
					  .data_request_put(scemi_dut_dut_dutIfc_m_dut$data_request_put),
					  .ddr3client_response_put(scemi_dut_dut_dutIfc_m_dut$ddr3client_response_put),
					  .start_put(scemi_dut_dut_dutIfc_m_dut$start_put),
					  .EN_data_request_put(scemi_dut_dut_dutIfc_m_dut$EN_data_request_put),
					  .EN_data_response_get(scemi_dut_dut_dutIfc_m_dut$EN_data_response_get),
					  .EN_start_put(scemi_dut_dut_dutIfc_m_dut$EN_start_put),
					  .EN_count_get(scemi_dut_dut_dutIfc_m_dut$EN_count_get),
					  .EN_ddr3client_request_get(scemi_dut_dut_dutIfc_m_dut$EN_ddr3client_request_get),
					  .EN_ddr3client_response_put(scemi_dut_dut_dutIfc_m_dut$EN_ddr3client_response_put),
					  .RDY_data_request_put(scemi_dut_dut_dutIfc_m_dut$RDY_data_request_put),
					  .data_response_get(scemi_dut_dut_dutIfc_m_dut$data_response_get),
					  .RDY_data_response_get(scemi_dut_dut_dutIfc_m_dut$RDY_data_response_get),
					  .RDY_start_put(),
					  .count_get(scemi_dut_dut_dutIfc_m_dut$count_get),
					  .RDY_count_get(scemi_dut_dut_dutIfc_m_dut$RDY_count_get),
					  .ddr3client_request_get(scemi_dut_dut_dutIfc_m_dut$ddr3client_request_get),
					  .RDY_ddr3client_request_get(scemi_dut_dut_dutIfc_m_dut$RDY_ddr3client_request_get),
					  .RDY_ddr3client_response_put(scemi_dut_dut_dutIfc_m_dut$RDY_ddr3client_response_put));

  // submodule scemi_dut_dut_dutIfc_myrst
  MakeResetA #(.RSTDELAY(32'd6),
	       .init(1'd0)) scemi_dut_dut_dutIfc_myrst(.CLK(scemi_clk_port_clkgen$CLK_OUT),
						       .RST(scemi_clk_port_cReset$O),
						       .DST_CLK(scemi_clk_port_clkgen$CLK_OUT),
						       .ASSERT_IN(scemi_dut_dut_dutIfc_myrst$ASSERT_IN),
						       .ASSERT_OUT(scemi_dut_dut_dutIfc_myrst$ASSERT_OUT),
						       .OUT_RST(scemi_dut_dut_dutIfc_myrst$OUT_RST));

  // submodule scemi_dut_dut_prb_control_ackFifo
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) scemi_dut_dut_prb_control_ackFifo(.RST(scemi_rstgen_final_reset$RST_OUT),
							     .CLK(scemi_uclkgen$CLK_OUT),
							     .D_IN(scemi_dut_dut_prb_control_ackFifo$D_IN),
							     .ENQ(scemi_dut_dut_prb_control_ackFifo$ENQ),
							     .DEQ(scemi_dut_dut_prb_control_ackFifo$DEQ),
							     .CLR(scemi_dut_dut_prb_control_ackFifo$CLR),
							     .D_OUT(scemi_dut_dut_prb_control_ackFifo$D_OUT),
							     .FULL_N(scemi_dut_dut_prb_control_ackFifo$FULL_N),
							     .EMPTY_N(scemi_dut_dut_prb_control_ackFifo$EMPTY_N));

  // submodule scemi_dut_dut_prb_control_control_in_buffer_empty_sp
  SyncHandshake scemi_dut_dut_prb_control_control_in_buffer_empty_sp(.sCLK(scemi_clkgen_clkout0buffer$O),
								     .dCLK(scemi_uclkgen$CLK_OUT),
								     .sRST(scemi_epReset125$OUT_RST),
								     .sEN(scemi_dut_dut_prb_control_control_in_buffer_empty_sp$sEN),
								     .sRDY(scemi_dut_dut_prb_control_control_in_buffer_empty_sp$sRDY),
								     .dPulse(scemi_dut_dut_prb_control_control_in_buffer_empty_sp$dPulse));

  // submodule scemi_dut_dut_prb_control_control_in_buffer_full_sp
  SyncHandshake scemi_dut_dut_prb_control_control_in_buffer_full_sp(.sCLK(scemi_clkgen_clkout0buffer$O),
								    .dCLK(scemi_uclkgen$CLK_OUT),
								    .sRST(scemi_epReset125$OUT_RST),
								    .sEN(scemi_dut_dut_prb_control_control_in_buffer_full_sp$sEN),
								    .sRDY(scemi_dut_dut_prb_control_control_in_buffer_full_sp$sRDY),
								    .dPulse(scemi_dut_dut_prb_control_control_in_buffer_full_sp$dPulse));

  // submodule scemi_dut_dut_prb_control_control_in_ending_reset
  SyncPulse scemi_dut_dut_prb_control_control_in_ending_reset(.sCLK(scemi_uclkgen$CLK_OUT),
							      .dCLK(scemi_clkgen_clkout0buffer$O),
							      .sRST(scemi_dut_dut_prb_control_control_in_nocResetUClock$OUT_RST),
							      .sEN(scemi_dut_dut_prb_control_control_in_ending_reset$sEN),
							      .dPulse(scemi_dut_dut_prb_control_control_in_ending_reset$dPulse));

  // submodule scemi_dut_dut_prb_control_control_in_next_sp
  SyncHandshake scemi_dut_dut_prb_control_control_in_next_sp(.sCLK(scemi_uclkgen$CLK_OUT),
							     .dCLK(scemi_clkgen_clkout0buffer$O),
							     .sRST(scemi_rstgen_final_reset$RST_OUT),
							     .sEN(scemi_dut_dut_prb_control_control_in_next_sp$sEN),
							     .sRDY(scemi_dut_dut_prb_control_control_in_next_sp$sRDY),
							     .dPulse(scemi_dut_dut_prb_control_control_in_next_sp$dPulse));

  // submodule scemi_dut_dut_prb_control_control_in_nocResetUClock
  SyncReset0 scemi_dut_dut_prb_control_control_in_nocResetUClock(.IN_RST(scemi_epReset125$OUT_RST),
								 .OUT_RST(scemi_dut_dut_prb_control_control_in_nocResetUClock$OUT_RST));

  // submodule scemi_dut_dut_prb_control_control_in_param_channelId
  mkSceMiUInt32Parameter #(.n(32'd0)) scemi_dut_dut_prb_control_control_in_param_channelId(.not_used());

  // submodule scemi_dut_dut_prb_control_control_in_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_dut_dut_prb_control_control_in_param_link_type(.not_used());

  // submodule scemi_dut_dut_prb_control_control_in_starting_reset
  SyncPulse scemi_dut_dut_prb_control_control_in_starting_reset(.sCLK(scemi_uclkgen$CLK_OUT),
								.dCLK(scemi_clkgen_clkout0buffer$O),
								.sRST(scemi_dut_dut_prb_control_control_in_nocResetUClock$OUT_RST),
								.sEN(scemi_dut_dut_prb_control_control_in_starting_reset$sEN),
								.dPulse(scemi_dut_dut_prb_control_control_in_starting_reset$dPulse));

  // submodule scemi_dut_dut_prb_control_control_in_wait_sp
  SyncHandshake scemi_dut_dut_prb_control_control_in_wait_sp(.sCLK(scemi_uclkgen$CLK_OUT),
							     .dCLK(scemi_clkgen_clkout0buffer$O),
							     .sRST(scemi_rstgen_final_reset$RST_OUT),
							     .sEN(scemi_dut_dut_prb_control_control_in_wait_sp$sEN),
							     .sRDY(scemi_dut_dut_prb_control_control_in_wait_sp$sRDY),
							     .dPulse(scemi_dut_dut_prb_control_control_in_wait_sp$dPulse));

  // submodule scemi_dut_dut_prb_control_data_out_ending_reset
  SyncPulse scemi_dut_dut_prb_control_data_out_ending_reset(.sCLK(scemi_uclkgen$CLK_OUT),
							    .dCLK(scemi_clkgen_clkout0buffer$O),
							    .sRST(scemi_dut_dut_prb_control_data_out_nocResetUClock$OUT_RST),
							    .sEN(scemi_dut_dut_prb_control_data_out_ending_reset$sEN),
							    .dPulse(scemi_dut_dut_prb_control_data_out_ending_reset$dPulse));

  // submodule scemi_dut_dut_prb_control_data_out_finished
  SyncHandshake scemi_dut_dut_prb_control_data_out_finished(.sCLK(scemi_clkgen_clkout0buffer$O),
							    .dCLK(scemi_uclkgen$CLK_OUT),
							    .sRST(scemi_epReset125$OUT_RST),
							    .sEN(scemi_dut_dut_prb_control_data_out_finished$sEN),
							    .sRDY(scemi_dut_dut_prb_control_data_out_finished$sRDY),
							    .dPulse(scemi_dut_dut_prb_control_data_out_finished$dPulse));

  // submodule scemi_dut_dut_prb_control_data_out_next
  SyncHandshake scemi_dut_dut_prb_control_data_out_next(.sCLK(scemi_uclkgen$CLK_OUT),
							.dCLK(scemi_clkgen_clkout0buffer$O),
							.sRST(scemi_rstgen_final_reset$RST_OUT),
							.sEN(scemi_dut_dut_prb_control_data_out_next$sEN),
							.sRDY(scemi_dut_dut_prb_control_data_out_next$sRDY),
							.dPulse(scemi_dut_dut_prb_control_data_out_next$dPulse));

  // submodule scemi_dut_dut_prb_control_data_out_nocResetUClock
  SyncReset0 scemi_dut_dut_prb_control_data_out_nocResetUClock(.IN_RST(scemi_epReset125$OUT_RST),
							       .OUT_RST(scemi_dut_dut_prb_control_data_out_nocResetUClock$OUT_RST));

  // submodule scemi_dut_dut_prb_control_data_out_param_channelId
  mkSceMiUInt32Parameter #(.n(32'd0)) scemi_dut_dut_prb_control_data_out_param_channelId(.not_used());

  // submodule scemi_dut_dut_prb_control_data_out_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_dut_dut_prb_control_data_out_param_link_type(.not_used());

  // submodule scemi_dut_dut_prb_control_data_out_starting_reset
  SyncPulse scemi_dut_dut_prb_control_data_out_starting_reset(.sCLK(scemi_uclkgen$CLK_OUT),
							      .dCLK(scemi_clkgen_clkout0buffer$O),
							      .sRST(scemi_dut_dut_prb_control_data_out_nocResetUClock$OUT_RST),
							      .sEN(scemi_dut_dut_prb_control_data_out_starting_reset$sEN),
							      .dPulse(scemi_dut_dut_prb_control_data_out_starting_reset$dPulse));

  // submodule scemi_dut_dut_prb_control_dutclkctrl_param_clockNum
  mkSceMiUInt32Parameter #(.n(32'd0)) scemi_dut_dut_prb_control_dutclkctrl_param_clockNum(.not_used());

  // submodule scemi_dut_dut_prb_control_dutclkctrl_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_dut_dut_prb_control_dutclkctrl_param_link_type(.not_used());

  // submodule scemi_dut_dut_prb_control_enff
  FIFO2 #(.width(32'd19),
	  .guarded(32'd1)) scemi_dut_dut_prb_control_enff(.RST(scemi_rstgen_final_reset$RST_OUT),
							  .CLK(scemi_uclkgen$CLK_OUT),
							  .D_IN(scemi_dut_dut_prb_control_enff$D_IN),
							  .ENQ(scemi_dut_dut_prb_control_enff$ENQ),
							  .DEQ(scemi_dut_dut_prb_control_enff$DEQ),
							  .CLR(scemi_dut_dut_prb_control_enff$CLR),
							  .D_OUT(scemi_dut_dut_prb_control_enff$D_OUT),
							  .FULL_N(scemi_dut_dut_prb_control_enff$FULL_N),
							  .EMPTY_N(scemi_dut_dut_prb_control_enff$EMPTY_N));

  // submodule scemi_dut_dut_prb_control_prb_str
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) scemi_dut_dut_prb_control_prb_str(.RST(scemi_rstgen_final_reset$RST_OUT),
							     .CLK(scemi_uclkgen$CLK_OUT),
							     .D_IN(scemi_dut_dut_prb_control_prb_str$D_IN),
							     .ENQ(scemi_dut_dut_prb_control_prb_str$ENQ),
							     .DEQ(scemi_dut_dut_prb_control_prb_str$DEQ),
							     .CLR(scemi_dut_dut_prb_control_prb_str$CLR),
							     .D_OUT(scemi_dut_dut_prb_control_prb_str$D_OUT),
							     .FULL_N(scemi_dut_dut_prb_control_prb_str$FULL_N),
							     .EMPTY_N(scemi_dut_dut_prb_control_prb_str$EMPTY_N));

  // submodule scemi_dut_dut_probeHook
  ProbeHook scemi_dut_dut_probeHook(.UCLK(scemi_uclkgen$CLK_OUT),
				    .URST(scemi_rstgen_final_reset$RST_OUT),
				    .CMD(scemi_dut_dut_probeHook$CMD),
				    .ACK(scemi_dut_dut_probeHook$ACK),
				    .CMDEN(scemi_dut_dut_probeHook$CMDEN),
				    .CTIMER(scemi_dut_dut_probeHook$CTIMER),
				    .DATAUP(scemi_dut_dut_probeHook$DATAUP),
				    .DATAVALID(scemi_dut_dut_probeHook$DATAVALID),
				    .DELAY(scemi_dut_dut_probeHook$DELAY));

  // submodule scemi_dut_softrst_req_inport_buffer_empty_sp
  SyncHandshake scemi_dut_softrst_req_inport_buffer_empty_sp(.sCLK(scemi_clkgen_clkout0buffer$O),
							     .dCLK(scemi_uclkgen$CLK_OUT),
							     .sRST(scemi_epReset125$OUT_RST),
							     .sEN(scemi_dut_softrst_req_inport_buffer_empty_sp$sEN),
							     .sRDY(scemi_dut_softrst_req_inport_buffer_empty_sp$sRDY),
							     .dPulse(scemi_dut_softrst_req_inport_buffer_empty_sp$dPulse));

  // submodule scemi_dut_softrst_req_inport_buffer_full_sp
  SyncHandshake scemi_dut_softrst_req_inport_buffer_full_sp(.sCLK(scemi_clkgen_clkout0buffer$O),
							    .dCLK(scemi_uclkgen$CLK_OUT),
							    .sRST(scemi_epReset125$OUT_RST),
							    .sEN(scemi_dut_softrst_req_inport_buffer_full_sp$sEN),
							    .sRDY(scemi_dut_softrst_req_inport_buffer_full_sp$sRDY),
							    .dPulse(scemi_dut_softrst_req_inport_buffer_full_sp$dPulse));

  // submodule scemi_dut_softrst_req_inport_ending_reset
  SyncPulse scemi_dut_softrst_req_inport_ending_reset(.sCLK(scemi_uclkgen$CLK_OUT),
						      .dCLK(scemi_clkgen_clkout0buffer$O),
						      .sRST(scemi_dut_softrst_req_inport_nocResetUClock$OUT_RST),
						      .sEN(scemi_dut_softrst_req_inport_ending_reset$sEN),
						      .dPulse(scemi_dut_softrst_req_inport_ending_reset$dPulse));

  // submodule scemi_dut_softrst_req_inport_next_sp
  SyncHandshake scemi_dut_softrst_req_inport_next_sp(.sCLK(scemi_uclkgen$CLK_OUT),
						     .dCLK(scemi_clkgen_clkout0buffer$O),
						     .sRST(scemi_rstgen_final_reset$RST_OUT),
						     .sEN(scemi_dut_softrst_req_inport_next_sp$sEN),
						     .sRDY(scemi_dut_softrst_req_inport_next_sp$sRDY),
						     .dPulse(scemi_dut_softrst_req_inport_next_sp$dPulse));

  // submodule scemi_dut_softrst_req_inport_nocResetUClock
  SyncReset0 scemi_dut_softrst_req_inport_nocResetUClock(.IN_RST(scemi_epReset125$OUT_RST),
							 .OUT_RST(scemi_dut_softrst_req_inport_nocResetUClock$OUT_RST));

  // submodule scemi_dut_softrst_req_inport_param_channelId
  mkSceMiUInt32Parameter #(.n(32'd1)) scemi_dut_softrst_req_inport_param_channelId(.not_used());

  // submodule scemi_dut_softrst_req_inport_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_dut_softrst_req_inport_param_link_type(.not_used());

  // submodule scemi_dut_softrst_req_inport_starting_reset
  SyncPulse scemi_dut_softrst_req_inport_starting_reset(.sCLK(scemi_uclkgen$CLK_OUT),
							.dCLK(scemi_clkgen_clkout0buffer$O),
							.sRST(scemi_dut_softrst_req_inport_nocResetUClock$OUT_RST),
							.sEN(scemi_dut_softrst_req_inport_starting_reset$sEN),
							.dPulse(scemi_dut_softrst_req_inport_starting_reset$dPulse));

  // submodule scemi_dut_softrst_req_inport_wait_sp
  SyncHandshake scemi_dut_softrst_req_inport_wait_sp(.sCLK(scemi_uclkgen$CLK_OUT),
						     .dCLK(scemi_clkgen_clkout0buffer$O),
						     .sRST(scemi_rstgen_final_reset$RST_OUT),
						     .sEN(scemi_dut_softrst_req_inport_wait_sp$sEN),
						     .sRDY(scemi_dut_softrst_req_inport_wait_sp$sRDY),
						     .dPulse(scemi_dut_softrst_req_inport_wait_sp$dPulse));

  // submodule scemi_dut_softrst_req_res_fifo
  SyncFIFO #(.dataWidth(32'd1),
	     .depth(32'd2),
	     .indxWidth(32'd1)) scemi_dut_softrst_req_res_fifo(.sCLK(scemi_uclkgen$CLK_OUT),
							       .dCLK(scemi_clk_port_clkgen$CLK_OUT),
							       .sRST(scemi_rstgen_final_reset$RST_OUT),
							       .sD_IN(scemi_dut_softrst_req_res_fifo$sD_IN),
							       .sENQ(scemi_dut_softrst_req_res_fifo$sENQ),
							       .dDEQ(scemi_dut_softrst_req_res_fifo$dDEQ),
							       .sFULL_N(scemi_dut_softrst_req_res_fifo$sFULL_N),
							       .dEMPTY_N(scemi_dut_softrst_req_res_fifo$dEMPTY_N),
							       .dD_OUT());

  // submodule scemi_dut_softrst_resp_outport_ending_reset
  SyncPulse scemi_dut_softrst_resp_outport_ending_reset(.sCLK(scemi_uclkgen$CLK_OUT),
							.dCLK(scemi_clkgen_clkout0buffer$O),
							.sRST(scemi_dut_softrst_resp_outport_nocResetUClock$OUT_RST),
							.sEN(scemi_dut_softrst_resp_outport_ending_reset$sEN),
							.dPulse(scemi_dut_softrst_resp_outport_ending_reset$dPulse));

  // submodule scemi_dut_softrst_resp_outport_finished
  SyncHandshake scemi_dut_softrst_resp_outport_finished(.sCLK(scemi_clkgen_clkout0buffer$O),
							.dCLK(scemi_uclkgen$CLK_OUT),
							.sRST(scemi_epReset125$OUT_RST),
							.sEN(scemi_dut_softrst_resp_outport_finished$sEN),
							.sRDY(scemi_dut_softrst_resp_outport_finished$sRDY),
							.dPulse(scemi_dut_softrst_resp_outport_finished$dPulse));

  // submodule scemi_dut_softrst_resp_outport_next
  SyncHandshake scemi_dut_softrst_resp_outport_next(.sCLK(scemi_uclkgen$CLK_OUT),
						    .dCLK(scemi_clkgen_clkout0buffer$O),
						    .sRST(scemi_rstgen_final_reset$RST_OUT),
						    .sEN(scemi_dut_softrst_resp_outport_next$sEN),
						    .sRDY(scemi_dut_softrst_resp_outport_next$sRDY),
						    .dPulse(scemi_dut_softrst_resp_outport_next$dPulse));

  // submodule scemi_dut_softrst_resp_outport_nocResetUClock
  SyncReset0 scemi_dut_softrst_resp_outport_nocResetUClock(.IN_RST(scemi_epReset125$OUT_RST),
							   .OUT_RST(scemi_dut_softrst_resp_outport_nocResetUClock$OUT_RST));

  // submodule scemi_dut_softrst_resp_outport_param_channelId
  mkSceMiUInt32Parameter #(.n(32'd1)) scemi_dut_softrst_resp_outport_param_channelId(.not_used());

  // submodule scemi_dut_softrst_resp_outport_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_dut_softrst_resp_outport_param_link_type(.not_used());

  // submodule scemi_dut_softrst_resp_outport_starting_reset
  SyncPulse scemi_dut_softrst_resp_outport_starting_reset(.sCLK(scemi_uclkgen$CLK_OUT),
							  .dCLK(scemi_clkgen_clkout0buffer$O),
							  .sRST(scemi_dut_softrst_resp_outport_nocResetUClock$OUT_RST),
							  .sEN(scemi_dut_softrst_resp_outport_starting_reset$sEN),
							  .dPulse(scemi_dut_softrst_resp_outport_starting_reset$dPulse));

  // submodule scemi_dut_softrst_resp_res_fifo
  SyncFIFO #(.dataWidth(32'd1),
	     .depth(32'd2),
	     .indxWidth(32'd1)) scemi_dut_softrst_resp_res_fifo(.sCLK(scemi_clk_port_clkgen$CLK_OUT),
								.dCLK(scemi_uclkgen$CLK_OUT),
								.sRST(scemi_clk_port_cReset$O),
								.sD_IN(scemi_dut_softrst_resp_res_fifo$sD_IN),
								.sENQ(scemi_dut_softrst_resp_res_fifo$sENQ),
								.dDEQ(scemi_dut_softrst_resp_res_fifo$dDEQ),
								.sFULL_N(scemi_dut_softrst_resp_res_fifo$sFULL_N),
								.dEMPTY_N(scemi_dut_softrst_resp_res_fifo$dEMPTY_N),
								.dD_OUT(scemi_dut_softrst_resp_res_fifo$dD_OUT));

  // submodule scemi_epReset125
  SyncResetA #(.RSTDELAY(32'd3)) scemi_epReset125(.CLK(scemi_clkgen_clkout0buffer$O),
						  .IN_RST(scemi_user_reset_n$RESET_OUT),
						  .OUT_RST(scemi_epReset125$OUT_RST));

  // submodule scemi_epReset250
  SyncResetA #(.RSTDELAY(32'd3)) scemi_epReset250(.CLK(scemi_pcie_ep$user_clk_out),
						  .IN_RST(scemi_user_reset_n$RESET_OUT),
						  .OUT_RST(scemi_epReset250$OUT_RST));

  // submodule scemi_fToBridgeBeat
  FIFOL1 #(.width(32'd32)) scemi_fToBridgeBeat(.RST(scemi_epReset125$OUT_RST),
					       .CLK(scemi_clkgen_clkout0buffer$O),
					       .D_IN(scemi_fToBridgeBeat$D_IN),
					       .ENQ(scemi_fToBridgeBeat$ENQ),
					       .DEQ(scemi_fToBridgeBeat$DEQ),
					       .CLR(scemi_fToBridgeBeat$CLR),
					       .D_OUT(scemi_fToBridgeBeat$D_OUT),
					       .FULL_N(scemi_fToBridgeBeat$FULL_N),
					       .EMPTY_N(scemi_fToBridgeBeat$EMPTY_N));

  // submodule scemi_fifoRxData_dCombinedReset
  ResetEither scemi_fifoRxData_dCombinedReset(.A_RST(scemi_epReset125$OUT_RST),
					      .B_RST(scemi_fifoRxData_dCrossedsReset$OUT_RST),
					      .RST_OUT(scemi_fifoRxData_dCombinedReset$RST_OUT));

  // submodule scemi_fifoRxData_dCrossedsReset
  SyncReset0 scemi_fifoRxData_dCrossedsReset(.IN_RST(scemi_epReset250$OUT_RST),
					     .OUT_RST(scemi_fifoRxData_dCrossedsReset$OUT_RST));

  // submodule scemi_fifoRxData_sCombinedReset
  ResetEither scemi_fifoRxData_sCombinedReset(.A_RST(scemi_epReset250$OUT_RST),
					      .B_RST(scemi_fifoRxData_sCrosseddReset$OUT_RST),
					      .RST_OUT(scemi_fifoRxData_sCombinedReset$RST_OUT));

  // submodule scemi_fifoRxData_sCrosseddReset
  SyncReset0 scemi_fifoRxData_sCrosseddReset(.IN_RST(scemi_epReset125$OUT_RST),
					     .OUT_RST(scemi_fifoRxData_sCrosseddReset$OUT_RST));

  // submodule scemi_inFifo
  FIFO2 #(.width(32'd81),
	  .guarded(32'd1)) scemi_inFifo(.RST(scemi_epReset250$OUT_RST),
					.CLK(scemi_pcie_ep$user_clk_out),
					.D_IN(scemi_inFifo$D_IN),
					.ENQ(scemi_inFifo$ENQ),
					.DEQ(scemi_inFifo$DEQ),
					.CLR(scemi_inFifo$CLR),
					.D_OUT(scemi_inFifo$D_OUT),
					.FULL_N(scemi_inFifo$FULL_N),
					.EMPTY_N(scemi_inFifo$EMPTY_N));

  // submodule scemi_init_state_msgFIFO
  SyncFIFO #(.dataWidth(32'd74),
	     .depth(32'd8),
	     .indxWidth(32'd3)) scemi_init_state_msgFIFO(.sCLK(scemi_uclkgen$CLK_OUT),
							 .dCLK(scemi_clkgen_clkout0buffer$O),
							 .sRST(scemi_rstgen_final_reset$RST_OUT),
							 .sD_IN(scemi_init_state_msgFIFO$sD_IN),
							 .sENQ(scemi_init_state_msgFIFO$sENQ),
							 .dDEQ(scemi_init_state_msgFIFO$dDEQ),
							 .sFULL_N(scemi_init_state_msgFIFO$sFULL_N),
							 .dEMPTY_N(scemi_init_state_msgFIFO$dEMPTY_N),
							 .dD_OUT(scemi_init_state_msgFIFO$dD_OUT));

  // submodule scemi_network_status
  MakeResetA #(.RSTDELAY(32'd4),
	       .init(1'd0)) scemi_network_status(.CLK(scemi_clkgen_clkout0buffer$O),
						 .RST(scemi_epReset125$OUT_RST),
						 .DST_CLK(scemi_scemi_clkgen_clkout0buf$O),
						 .ASSERT_IN(scemi_network_status$ASSERT_IN),
						 .ASSERT_OUT(),
						 .OUT_RST(scemi_network_status$OUT_RST));

  // submodule scemi_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_param_link_type(.not_used());

  // submodule scemi_pcie_ep
  xilinx_v7_pcie_wrapper #(.PL_FAST_TRAIN("FALSE"),
			   .PCIE_EXT_CLK("TRUE")) scemi_pcie_ep(.sys_clk(scemi_sys_clk_buf$O),
								.sys_reset(scemi_pcie_ep_sys_reset$RESET_OUT),
								.cfg_aer_interrupt_msgnum(scemi_pcie_ep$cfg_aer_interrupt_msgnum),
								.cfg_dsn(scemi_pcie_ep$cfg_dsn),
								.cfg_err_acs(scemi_pcie_ep$cfg_err_acs),
								.cfg_err_aer_headerlog(scemi_pcie_ep$cfg_err_aer_headerlog),
								.cfg_err_atomic_egress_blocked(scemi_pcie_ep$cfg_err_atomic_egress_blocked),
								.cfg_err_cor(scemi_pcie_ep$cfg_err_cor),
								.cfg_err_cpl_abort(scemi_pcie_ep$cfg_err_cpl_abort),
								.cfg_err_cpl_timeout(scemi_pcie_ep$cfg_err_cpl_timeout),
								.cfg_err_cpl_unexpect(scemi_pcie_ep$cfg_err_cpl_unexpect),
								.cfg_err_ecrc(scemi_pcie_ep$cfg_err_ecrc),
								.cfg_err_internal_cor(scemi_pcie_ep$cfg_err_internal_cor),
								.cfg_err_internal_uncor(scemi_pcie_ep$cfg_err_internal_uncor),
								.cfg_err_locked(scemi_pcie_ep$cfg_err_locked),
								.cfg_err_malformed(scemi_pcie_ep$cfg_err_malformed),
								.cfg_err_mc_blocked(scemi_pcie_ep$cfg_err_mc_blocked),
								.cfg_err_norecovery(scemi_pcie_ep$cfg_err_norecovery),
								.cfg_err_poisoned(scemi_pcie_ep$cfg_err_poisoned),
								.cfg_err_posted(scemi_pcie_ep$cfg_err_posted),
								.cfg_err_tlp_cpl_header(scemi_pcie_ep$cfg_err_tlp_cpl_header),
								.cfg_err_ur(scemi_pcie_ep$cfg_err_ur),
								.cfg_interrupt(scemi_pcie_ep$cfg_interrupt),
								.cfg_interrupt_assert(scemi_pcie_ep$cfg_interrupt_assert),
								.cfg_interrupt_di(scemi_pcie_ep$cfg_interrupt_di),
								.cfg_interrupt_stat(scemi_pcie_ep$cfg_interrupt_stat),
								.cfg_mgmt_byte_en(scemi_pcie_ep$cfg_mgmt_byte_en),
								.cfg_mgmt_di(scemi_pcie_ep$cfg_mgmt_di),
								.cfg_mgmt_dwaddr(scemi_pcie_ep$cfg_mgmt_dwaddr),
								.cfg_mgmt_rd_en(scemi_pcie_ep$cfg_mgmt_rd_en),
								.cfg_mgmt_wr_en(scemi_pcie_ep$cfg_mgmt_wr_en),
								.cfg_mgmt_wr_readonly(scemi_pcie_ep$cfg_mgmt_wr_readonly),
								.cfg_pciecap_interrupt_msgnum(scemi_pcie_ep$cfg_pciecap_interrupt_msgnum),
								.cfg_pm_force_state(scemi_pcie_ep$cfg_pm_force_state),
								.cfg_pm_force_state_en(scemi_pcie_ep$cfg_pm_force_state_en),
								.cfg_pm_halt_aspm_l0s(scemi_pcie_ep$cfg_pm_halt_aspm_l0s),
								.cfg_pm_halt_aspm_l1(scemi_pcie_ep$cfg_pm_halt_aspm_l1),
								.cfg_pm_wake(scemi_pcie_ep$cfg_pm_wake),
								.cfg_trn_pending(scemi_pcie_ep$cfg_trn_pending),
								.cfg_turnoff_ok(scemi_pcie_ep$cfg_turnoff_ok),
								.fc_sel(scemi_pcie_ep$fc_sel),
								.m_axis_rx_tready(scemi_pcie_ep$m_axis_rx_tready),
								.pci_exp_rxn(scemi_pcie_ep$pci_exp_rxn),
								.pci_exp_rxp(scemi_pcie_ep$pci_exp_rxp),
								.pl_directed_link_auton(scemi_pcie_ep$pl_directed_link_auton),
								.pl_directed_link_change(scemi_pcie_ep$pl_directed_link_change),
								.pl_directed_link_speed(scemi_pcie_ep$pl_directed_link_speed),
								.pl_directed_link_width(scemi_pcie_ep$pl_directed_link_width),
								.pl_upstream_prefer_deemph(scemi_pcie_ep$pl_upstream_prefer_deemph),
								.rx_np_ok(scemi_pcie_ep$rx_np_ok),
								.rx_np_req(scemi_pcie_ep$rx_np_req),
								.s_axis_tx_tdata(scemi_pcie_ep$s_axis_tx_tdata),
								.s_axis_tx_tkeep(scemi_pcie_ep$s_axis_tx_tkeep),
								.s_axis_tx_tlast(scemi_pcie_ep$s_axis_tx_tlast),
								.s_axis_tx_tuser(scemi_pcie_ep$s_axis_tx_tuser),
								.s_axis_tx_tvalid(scemi_pcie_ep$s_axis_tx_tvalid),
								.tx_cfg_gnt(scemi_pcie_ep$tx_cfg_gnt),
								.pci_exp_txp(scemi_pcie_ep$pci_exp_txp),
								.pci_exp_txn(scemi_pcie_ep$pci_exp_txn),
								.user_lnk_up(scemi_pcie_ep$user_lnk_up),
								.fc_ph(),
								.fc_pd(),
								.fc_nph(),
								.fc_npd(),
								.fc_cplh(),
								.fc_cpld(),
								.s_axis_tx_tready(scemi_pcie_ep$s_axis_tx_tready),
								.tx_buf_av(),
								.tx_err_drop(),
								.tx_cfg_req(),
								.m_axis_rx_tlast(scemi_pcie_ep$m_axis_rx_tlast),
								.m_axis_rx_tdata(scemi_pcie_ep$m_axis_rx_tdata),
								.m_axis_rx_tkeep(scemi_pcie_ep$m_axis_rx_tkeep),
								.m_axis_rx_tuser(scemi_pcie_ep$m_axis_rx_tuser),
								.m_axis_rx_tvalid(scemi_pcie_ep$m_axis_rx_tvalid),
								.pl_initial_link_width(),
								.pl_phy_lnk_up(),
								.pl_lane_reversal_mode(),
								.pl_link_gen2_cap(),
								.pl_link_partner_gen2_supported(),
								.pl_link_upcfg_cap(),
								.pl_sel_lnk_rate(),
								.pl_sel_lnk_width(),
								.pl_ltssm_state(),
								.pl_rx_pm_state(),
								.pl_tx_pm_state(),
								.pl_directed_change_done(),
								.pl_received_hot_rst(),
								.cfg_mgmt_do(),
								.cfg_mgmt_rd_wr_done(),
								.cfg_bus_number(scemi_pcie_ep$cfg_bus_number),
								.cfg_device_number(scemi_pcie_ep$cfg_device_number),
								.cfg_function_number(scemi_pcie_ep$cfg_function_number),
								.cfg_status(),
								.cfg_command(scemi_pcie_ep$cfg_command),
								.cfg_dstatus(),
								.cfg_dcommand(scemi_pcie_ep$cfg_dcommand),
								.cfg_dcommand2(),
								.cfg_lstatus(),
								.cfg_lcommand(scemi_pcie_ep$cfg_lcommand),
								.cfg_aer_ecrc_gen_en(),
								.cfg_aer_ecrc_check_en(),
								.cfg_pcie_link_state(),
								.cfg_pmcsr_pme_en(),
								.cfg_pmcsr_pme_status(),
								.cfg_pmcsr_powerstate(),
								.cfg_received_func_lvl_rst(),
								.cfg_vc_tcvc_map(),
								.cfg_to_turnoff(),
								.cfg_interrupt_rdy(),
								.cfg_interrupt_do(),
								.cfg_interrupt_mmenable(),
								.cfg_interrupt_msienable(),
								.cfg_interrupt_msixenable(scemi_pcie_ep$cfg_interrupt_msixenable),
								.cfg_interrupt_msixfm(scemi_pcie_ep$cfg_interrupt_msixfm),
								.cfg_err_cpl_rdy(),
								.cfg_err_aer_headerlog_set(),
								.user_clk_out(scemi_pcie_ep$user_clk_out),
								.user_reset_out(scemi_pcie_ep$user_reset_out));

  // submodule scemi_pcie_ep_sys_reset
  ResetInverter scemi_pcie_ep_sys_reset(.RESET_IN(RST_N_pci_sys_reset_n),
					.RESET_OUT(scemi_pcie_ep_sys_reset$RESET_OUT));

  // submodule scemi_reqFifo
  SyncFIFO #(.dataWidth(32'd601),
	     .depth(32'd2),
	     .indxWidth(32'd1)) scemi_reqFifo(.sCLK(scemi_clk_port_clkgen$CLK_OUT),
					      .dCLK(scemi_uclkgen$CLK_OUT),
					      .sRST(scemi_clk_port_cReset$O),
					      .sD_IN(scemi_reqFifo$sD_IN),
					      .sENQ(scemi_reqFifo$sENQ),
					      .dDEQ(scemi_reqFifo$dDEQ),
					      .sFULL_N(scemi_reqFifo$sFULL_N),
					      .dEMPTY_N(scemi_reqFifo$dEMPTY_N),
					      .dD_OUT(scemi_reqFifo$dD_OUT));

  // submodule scemi_respFifo
  SyncFIFO #(.dataWidth(32'd512),
	     .depth(32'd2),
	     .indxWidth(32'd1)) scemi_respFifo(.sCLK(scemi_uclkgen$CLK_OUT),
					       .dCLK(scemi_clk_port_clkgen$CLK_OUT),
					       .sRST(scemi_rstgen_final_reset$RST_OUT),
					       .sD_IN(scemi_respFifo$sD_IN),
					       .sENQ(scemi_respFifo$sENQ),
					       .dDEQ(scemi_respFifo$dDEQ),
					       .sFULL_N(scemi_respFifo$sFULL_N),
					       .dEMPTY_N(scemi_respFifo$dEMPTY_N),
					       .dD_OUT(scemi_respFifo$dD_OUT));

  // submodule scemi_rstgen_final_reset
  ResetEither scemi_rstgen_final_reset(.A_RST(scemi_rstgen_inv_rstgen$OUT_RST),
				       .B_RST(scemi_rstgen_rstgen$OUT_RST),
				       .RST_OUT(scemi_rstgen_final_reset$RST_OUT));

  // submodule scemi_rstgen_inv_clk
  ClockInverter scemi_rstgen_inv_clk(.CLK_IN(scemi_scemi_clkgen_clkout0buf$O),
				     .PREEDGE(),
				     .CLK_OUT(scemi_rstgen_inv_clk$CLK_OUT));

  // submodule scemi_rstgen_inv_rstgen
  MakeResetA #(.RSTDELAY(32'd1),
	       .init(1'd0)) scemi_rstgen_inv_rstgen(.CLK(scemi_rstgen_inv_clk$CLK_OUT),
						    .RST(scemi_rstgen_inv_rstn$OUT_RST),
						    .DST_CLK(scemi_uclkgen$CLK_OUT),
						    .ASSERT_IN(scemi_rstgen_inv_rstgen$ASSERT_IN),
						    .ASSERT_OUT(),
						    .OUT_RST(scemi_rstgen_inv_rstgen$OUT_RST));

  // submodule scemi_rstgen_inv_rstn
  SyncReset0 scemi_rstgen_inv_rstn(.IN_RST(scemi_network_status$OUT_RST),
				   .OUT_RST(scemi_rstgen_inv_rstn$OUT_RST));

  // submodule scemi_rstgen_rstgen
  MakeReset0 #(.init(1'd0)) scemi_rstgen_rstgen(.CLK(scemi_scemi_clkgen_clkout0buf$O),
						.RST(scemi_network_status$OUT_RST),
						.ASSERT_IN(scemi_rstgen_rstgen$ASSERT_IN),
						.ASSERT_OUT(),
						.OUT_RST(scemi_rstgen_rstgen$OUT_RST));

  // submodule scemi_scemi_clkgen_clkfbbuf
  BUFG scemi_scemi_clkgen_clkfbbuf(.I(scemi_scemi_clkgen_mmcm$CLKFBOUT),
				   .O(scemi_scemi_clkgen_clkfbbuf$O));

  // submodule scemi_scemi_clkgen_clkout0buf
  BUFG scemi_scemi_clkgen_clkout0buf(.I(scemi_scemi_clkgen_mmcm$CLKOUT0),
				     .O(scemi_scemi_clkgen_clkout0buf$O));

  // submodule scemi_scemi_clkgen_clkout0nbuffer
  BUFG scemi_scemi_clkgen_clkout0nbuffer(.I(scemi_scemi_clkgen_mmcm$CLKOUT0B),
					 .O());

  // submodule scemi_scemi_clkgen_clkout1buffer
  BUFG scemi_scemi_clkgen_clkout1buffer(.I(scemi_scemi_clkgen_mmcm$CLKOUT1),
					.O());

  // submodule scemi_scemi_clkgen_clkout1nbuffer
  BUFG scemi_scemi_clkgen_clkout1nbuffer(.I(scemi_scemi_clkgen_mmcm$CLKOUT1B),
					 .O());

  // submodule scemi_scemi_clkgen_clkout2buffer
  BUFG scemi_scemi_clkgen_clkout2buffer(.I(scemi_scemi_clkgen_mmcm$CLKOUT2),
					.O());

  // submodule scemi_scemi_clkgen_clkout2nbuffer
  BUFG scemi_scemi_clkgen_clkout2nbuffer(.I(scemi_scemi_clkgen_mmcm$CLKOUT2B),
					 .O());

  // submodule scemi_scemi_clkgen_clkout3buffer
  BUFG scemi_scemi_clkgen_clkout3buffer(.I(scemi_scemi_clkgen_mmcm$CLKOUT3),
					.O());

  // submodule scemi_scemi_clkgen_clkout3nbuffer
  BUFG scemi_scemi_clkgen_clkout3nbuffer(.I(scemi_scemi_clkgen_mmcm$CLKOUT3B),
					 .O());

  // submodule scemi_scemi_clkgen_clkout4buffer
  BUFG scemi_scemi_clkgen_clkout4buffer(.I(scemi_scemi_clkgen_mmcm$CLKOUT4),
					.O());

  // submodule scemi_scemi_clkgen_clkout5buffer
  BUFG scemi_scemi_clkgen_clkout5buffer(.I(scemi_scemi_clkgen_mmcm$CLKOUT5),
					.O());

  // submodule scemi_scemi_clkgen_clkout6buffer
  BUFG scemi_scemi_clkgen_clkout6buffer(.I(scemi_scemi_clkgen_mmcm$CLKOUT6),
					.O());

  // submodule scemi_scemi_clkgen_fRequest
  FIFO2 #(.width(32'd22),
	  .guarded(32'd1)) scemi_scemi_clkgen_fRequest(.RST(scemi_user_reset_half$OUT_RST),
						       .CLK(scemi_clkgen_clkout0buffer$O),
						       .D_IN(scemi_scemi_clkgen_fRequest$D_IN),
						       .ENQ(scemi_scemi_clkgen_fRequest$ENQ),
						       .DEQ(scemi_scemi_clkgen_fRequest$DEQ),
						       .CLR(scemi_scemi_clkgen_fRequest$CLR),
						       .D_OUT(scemi_scemi_clkgen_fRequest$D_OUT),
						       .FULL_N(scemi_scemi_clkgen_fRequest$FULL_N),
						       .EMPTY_N(scemi_scemi_clkgen_fRequest$EMPTY_N));

  // submodule scemi_scemi_clkgen_fResponse
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) scemi_scemi_clkgen_fResponse(.RST(scemi_user_reset_half$OUT_RST),
							.CLK(scemi_clkgen_clkout0buffer$O),
							.D_IN(scemi_scemi_clkgen_fResponse$D_IN),
							.ENQ(scemi_scemi_clkgen_fResponse$ENQ),
							.DEQ(scemi_scemi_clkgen_fResponse$DEQ),
							.CLR(scemi_scemi_clkgen_fResponse$CLR),
							.D_OUT(scemi_scemi_clkgen_fResponse$D_OUT),
							.FULL_N(scemi_scemi_clkgen_fResponse$FULL_N),
							.EMPTY_N(scemi_scemi_clkgen_fResponse$EMPTY_N));

  // submodule scemi_scemi_clkgen_mmcm
  MMCME2_ADV #(.BANDWIDTH("OPTIMIZED"),
	       .CLKFBOUT_USE_FINE_PS("FALSE"),
	       .CLKOUT0_USE_FINE_PS("FALSE"),
	       .CLKOUT1_USE_FINE_PS("FALSE"),
	       .CLKOUT2_USE_FINE_PS("FALSE"),
	       .CLKOUT3_USE_FINE_PS("FALSE"),
	       .CLKOUT4_CASCADE("FALSE"),
	       .CLKOUT4_USE_FINE_PS("FALSE"),
	       .CLKOUT5_USE_FINE_PS("FALSE"),
	       .CLKOUT6_USE_FINE_PS("FALSE"),
	       .COMPENSATION("ZHOLD"),
	       .STARTUP_WAIT("FALSE"),
	       .CLKFBOUT_MULT_F(8.0),
	       .CLKFBOUT_PHASE(0.0),
	       .CLKIN1_PERIOD(8.0),
	       .CLKIN2_PERIOD(0.0),
	       .DIVCLK_DIVIDE(32'd1),
	       .CLKOUT0_DIVIDE_F(10.0),
	       .CLKOUT0_DUTY_CYCLE(0.5),
	       .CLKOUT0_PHASE(0.0),
	       .CLKOUT1_DIVIDE(32'd10),
	       .CLKOUT1_DUTY_CYCLE(0.5),
	       .CLKOUT1_PHASE(0.0),
	       .CLKOUT2_DIVIDE(32'd10),
	       .CLKOUT2_DUTY_CYCLE(0.5),
	       .CLKOUT2_PHASE(0.0),
	       .CLKOUT3_DIVIDE(32'd10),
	       .CLKOUT3_DUTY_CYCLE(0.5),
	       .CLKOUT3_PHASE(0.0),
	       .CLKOUT4_DIVIDE(32'd10),
	       .CLKOUT4_DUTY_CYCLE(0.5),
	       .CLKOUT4_PHASE(0.0),
	       .CLKOUT5_DIVIDE(32'd10),
	       .CLKOUT5_DUTY_CYCLE(0.5),
	       .CLKOUT5_PHASE(0.0),
	       .CLKOUT6_DIVIDE(32'd10),
	       .CLKOUT6_DUTY_CYCLE(0.5),
	       .CLKOUT6_PHASE(0.0),
	       .REF_JITTER1(1.0e-2),
	       .REF_JITTER2(1.0e-2)) scemi_scemi_clkgen_mmcm(.DCLK(scemi_clkgen_clkout0buffer$O),
							     .CLKIN1(scemi_clkgen_clkout0buffer$O),
							     .CLKIN2(1'd0),
							     .CLKINSEL(1'd1),
							     .PSCLK(1'd0),
							     .PSEN(1'd0),
							     .PSINCDEC(1'd0),
							     .PWRDWN(1'd0),
							     .CLKFBIN(scemi_scemi_clkgen_mmcm$CLKFBIN),
							     .DADDR(scemi_scemi_clkgen_mmcm$DADDR),
							     .DEN(scemi_scemi_clkgen_mmcm$DEN),
							     .DI(scemi_scemi_clkgen_mmcm$DI),
							     .DWE(scemi_scemi_clkgen_mmcm$DWE),
							     .RST(scemi_scemi_clkgen_mmcm$RST),
							     .LOCKED(scemi_scemi_clkgen_mmcm$LOCKED),
							     .DO(scemi_scemi_clkgen_mmcm$DO),
							     .DRDY(scemi_scemi_clkgen_mmcm$DRDY),
							     .CLKFBOUT(scemi_scemi_clkgen_mmcm$CLKFBOUT),
							     .CLKFBOUTB(),
							     .CLKOUT0(scemi_scemi_clkgen_mmcm$CLKOUT0),
							     .CLKOUT0B(scemi_scemi_clkgen_mmcm$CLKOUT0B),
							     .CLKOUT1(scemi_scemi_clkgen_mmcm$CLKOUT1),
							     .CLKOUT1B(scemi_scemi_clkgen_mmcm$CLKOUT1B),
							     .CLKOUT2(scemi_scemi_clkgen_mmcm$CLKOUT2),
							     .CLKOUT2B(scemi_scemi_clkgen_mmcm$CLKOUT2B),
							     .CLKOUT3(scemi_scemi_clkgen_mmcm$CLKOUT3),
							     .CLKOUT3B(scemi_scemi_clkgen_mmcm$CLKOUT3B),
							     .CLKOUT4(scemi_scemi_clkgen_mmcm$CLKOUT4),
							     .CLKOUT5(scemi_scemi_clkgen_mmcm$CLKOUT5),
							     .CLKOUT6(scemi_scemi_clkgen_mmcm$CLKOUT6));

  // submodule scemi_shutdown_ctrl_in_buffer_empty_sp
  SyncHandshake scemi_shutdown_ctrl_in_buffer_empty_sp(.sCLK(scemi_clkgen_clkout0buffer$O),
						       .dCLK(scemi_uclkgen$CLK_OUT),
						       .sRST(scemi_epReset125$OUT_RST),
						       .sEN(scemi_shutdown_ctrl_in_buffer_empty_sp$sEN),
						       .sRDY(scemi_shutdown_ctrl_in_buffer_empty_sp$sRDY),
						       .dPulse(scemi_shutdown_ctrl_in_buffer_empty_sp$dPulse));

  // submodule scemi_shutdown_ctrl_in_buffer_full_sp
  SyncHandshake scemi_shutdown_ctrl_in_buffer_full_sp(.sCLK(scemi_clkgen_clkout0buffer$O),
						      .dCLK(scemi_uclkgen$CLK_OUT),
						      .sRST(scemi_epReset125$OUT_RST),
						      .sEN(scemi_shutdown_ctrl_in_buffer_full_sp$sEN),
						      .sRDY(scemi_shutdown_ctrl_in_buffer_full_sp$sRDY),
						      .dPulse(scemi_shutdown_ctrl_in_buffer_full_sp$dPulse));

  // submodule scemi_shutdown_ctrl_in_ending_reset
  SyncPulse scemi_shutdown_ctrl_in_ending_reset(.sCLK(scemi_uclkgen$CLK_OUT),
						.dCLK(scemi_clkgen_clkout0buffer$O),
						.sRST(scemi_shutdown_ctrl_in_nocResetUClock$OUT_RST),
						.sEN(scemi_shutdown_ctrl_in_ending_reset$sEN),
						.dPulse(scemi_shutdown_ctrl_in_ending_reset$dPulse));

  // submodule scemi_shutdown_ctrl_in_next_sp
  SyncHandshake scemi_shutdown_ctrl_in_next_sp(.sCLK(scemi_uclkgen$CLK_OUT),
					       .dCLK(scemi_clkgen_clkout0buffer$O),
					       .sRST(scemi_rstgen_final_reset$RST_OUT),
					       .sEN(scemi_shutdown_ctrl_in_next_sp$sEN),
					       .sRDY(scemi_shutdown_ctrl_in_next_sp$sRDY),
					       .dPulse(scemi_shutdown_ctrl_in_next_sp$dPulse));

  // submodule scemi_shutdown_ctrl_in_nocResetUClock
  SyncReset0 scemi_shutdown_ctrl_in_nocResetUClock(.IN_RST(scemi_epReset125$OUT_RST),
						   .OUT_RST(scemi_shutdown_ctrl_in_nocResetUClock$OUT_RST));

  // submodule scemi_shutdown_ctrl_in_param_channelId
  mkSceMiUInt32Parameter #(.n(32'd4)) scemi_shutdown_ctrl_in_param_channelId(.not_used());

  // submodule scemi_shutdown_ctrl_in_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_shutdown_ctrl_in_param_link_type(.not_used());

  // submodule scemi_shutdown_ctrl_in_starting_reset
  SyncPulse scemi_shutdown_ctrl_in_starting_reset(.sCLK(scemi_uclkgen$CLK_OUT),
						  .dCLK(scemi_clkgen_clkout0buffer$O),
						  .sRST(scemi_shutdown_ctrl_in_nocResetUClock$OUT_RST),
						  .sEN(scemi_shutdown_ctrl_in_starting_reset$sEN),
						  .dPulse(scemi_shutdown_ctrl_in_starting_reset$dPulse));

  // submodule scemi_shutdown_ctrl_in_wait_sp
  SyncHandshake scemi_shutdown_ctrl_in_wait_sp(.sCLK(scemi_uclkgen$CLK_OUT),
					       .dCLK(scemi_clkgen_clkout0buffer$O),
					       .sRST(scemi_rstgen_final_reset$RST_OUT),
					       .sEN(scemi_shutdown_ctrl_in_wait_sp$sEN),
					       .sRDY(scemi_shutdown_ctrl_in_wait_sp$sRDY),
					       .dPulse(scemi_shutdown_ctrl_in_wait_sp$dPulse));

  // submodule scemi_shutdown_ctrl_out_ending_reset
  SyncPulse scemi_shutdown_ctrl_out_ending_reset(.sCLK(scemi_uclkgen$CLK_OUT),
						 .dCLK(scemi_clkgen_clkout0buffer$O),
						 .sRST(scemi_shutdown_ctrl_out_nocResetUClock$OUT_RST),
						 .sEN(scemi_shutdown_ctrl_out_ending_reset$sEN),
						 .dPulse(scemi_shutdown_ctrl_out_ending_reset$dPulse));

  // submodule scemi_shutdown_ctrl_out_finished
  SyncHandshake scemi_shutdown_ctrl_out_finished(.sCLK(scemi_clkgen_clkout0buffer$O),
						 .dCLK(scemi_uclkgen$CLK_OUT),
						 .sRST(scemi_epReset125$OUT_RST),
						 .sEN(scemi_shutdown_ctrl_out_finished$sEN),
						 .sRDY(scemi_shutdown_ctrl_out_finished$sRDY),
						 .dPulse(scemi_shutdown_ctrl_out_finished$dPulse));

  // submodule scemi_shutdown_ctrl_out_next
  SyncHandshake scemi_shutdown_ctrl_out_next(.sCLK(scemi_uclkgen$CLK_OUT),
					     .dCLK(scemi_clkgen_clkout0buffer$O),
					     .sRST(scemi_rstgen_final_reset$RST_OUT),
					     .sEN(scemi_shutdown_ctrl_out_next$sEN),
					     .sRDY(scemi_shutdown_ctrl_out_next$sRDY),
					     .dPulse(scemi_shutdown_ctrl_out_next$dPulse));

  // submodule scemi_shutdown_ctrl_out_nocResetUClock
  SyncReset0 scemi_shutdown_ctrl_out_nocResetUClock(.IN_RST(scemi_epReset125$OUT_RST),
						    .OUT_RST(scemi_shutdown_ctrl_out_nocResetUClock$OUT_RST));

  // submodule scemi_shutdown_ctrl_out_param_channelId
  mkSceMiUInt32Parameter #(.n(32'd4)) scemi_shutdown_ctrl_out_param_channelId(.not_used());

  // submodule scemi_shutdown_ctrl_out_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_shutdown_ctrl_out_param_link_type(.not_used());

  // submodule scemi_shutdown_ctrl_out_starting_reset
  SyncPulse scemi_shutdown_ctrl_out_starting_reset(.sCLK(scemi_uclkgen$CLK_OUT),
						   .dCLK(scemi_clkgen_clkout0buffer$O),
						   .sRST(scemi_shutdown_ctrl_out_nocResetUClock$OUT_RST),
						   .sEN(scemi_shutdown_ctrl_out_starting_reset$sEN),
						   .dPulse(scemi_shutdown_ctrl_out_starting_reset$dPulse));

  // submodule scemi_start_inport_buffer_empty_sp
  SyncHandshake scemi_start_inport_buffer_empty_sp(.sCLK(scemi_clkgen_clkout0buffer$O),
						   .dCLK(scemi_uclkgen$CLK_OUT),
						   .sRST(scemi_epReset125$OUT_RST),
						   .sEN(scemi_start_inport_buffer_empty_sp$sEN),
						   .sRDY(scemi_start_inport_buffer_empty_sp$sRDY),
						   .dPulse(scemi_start_inport_buffer_empty_sp$dPulse));

  // submodule scemi_start_inport_buffer_full_sp
  SyncHandshake scemi_start_inport_buffer_full_sp(.sCLK(scemi_clkgen_clkout0buffer$O),
						  .dCLK(scemi_uclkgen$CLK_OUT),
						  .sRST(scemi_epReset125$OUT_RST),
						  .sEN(scemi_start_inport_buffer_full_sp$sEN),
						  .sRDY(scemi_start_inport_buffer_full_sp$sRDY),
						  .dPulse(scemi_start_inport_buffer_full_sp$dPulse));

  // submodule scemi_start_inport_ending_reset
  SyncPulse scemi_start_inport_ending_reset(.sCLK(scemi_uclkgen$CLK_OUT),
					    .dCLK(scemi_clkgen_clkout0buffer$O),
					    .sRST(scemi_start_inport_nocResetUClock$OUT_RST),
					    .sEN(scemi_start_inport_ending_reset$sEN),
					    .dPulse(scemi_start_inport_ending_reset$dPulse));

  // submodule scemi_start_inport_next_sp
  SyncHandshake scemi_start_inport_next_sp(.sCLK(scemi_uclkgen$CLK_OUT),
					   .dCLK(scemi_clkgen_clkout0buffer$O),
					   .sRST(scemi_rstgen_final_reset$RST_OUT),
					   .sEN(scemi_start_inport_next_sp$sEN),
					   .sRDY(scemi_start_inport_next_sp$sRDY),
					   .dPulse(scemi_start_inport_next_sp$dPulse));

  // submodule scemi_start_inport_nocResetUClock
  SyncReset0 scemi_start_inport_nocResetUClock(.IN_RST(scemi_epReset125$OUT_RST),
					       .OUT_RST(scemi_start_inport_nocResetUClock$OUT_RST));

  // submodule scemi_start_inport_param_channelId
  mkSceMiUInt32Parameter #(.n(32'd3)) scemi_start_inport_param_channelId(.not_used());

  // submodule scemi_start_inport_param_link_type
  mkSceMiLinkTypeParameter #(.link_type(4'd7)) scemi_start_inport_param_link_type(.not_used());

  // submodule scemi_start_inport_starting_reset
  SyncPulse scemi_start_inport_starting_reset(.sCLK(scemi_uclkgen$CLK_OUT),
					      .dCLK(scemi_clkgen_clkout0buffer$O),
					      .sRST(scemi_start_inport_nocResetUClock$OUT_RST),
					      .sEN(scemi_start_inport_starting_reset$sEN),
					      .dPulse(scemi_start_inport_starting_reset$dPulse));

  // submodule scemi_start_inport_wait_sp
  SyncHandshake scemi_start_inport_wait_sp(.sCLK(scemi_uclkgen$CLK_OUT),
					   .dCLK(scemi_clkgen_clkout0buffer$O),
					   .sRST(scemi_rstgen_final_reset$RST_OUT),
					   .sEN(scemi_start_inport_wait_sp$sEN),
					   .sRDY(scemi_start_inport_wait_sp$sRDY),
					   .dPulse(scemi_start_inport_wait_sp$dPulse));

  // submodule scemi_start_res_fifo
  SyncFIFO #(.dataWidth(32'd1),
	     .depth(32'd2),
	     .indxWidth(32'd1)) scemi_start_res_fifo(.sCLK(scemi_uclkgen$CLK_OUT),
						     .dCLK(scemi_clk_port_clkgen$CLK_OUT),
						     .sRST(scemi_rstgen_final_reset$RST_OUT),
						     .sD_IN(scemi_start_res_fifo$sD_IN),
						     .sENQ(scemi_start_res_fifo$sENQ),
						     .dDEQ(scemi_start_res_fifo$dDEQ),
						     .sFULL_N(scemi_start_res_fifo$sFULL_N),
						     .dEMPTY_N(scemi_start_res_fifo$dEMPTY_N),
						     .dD_OUT(scemi_start_res_fifo$dD_OUT));

  // submodule scemi_sys_clk_buf
  IBUFDS_GTE2 #(.CLKCM_CFG("TRUE"),
		.CLKRCV_TRST("TRUE"),
		.CLKSWING_CFG(2'b11)) scemi_sys_clk_buf(.I(CLK_pci_sys_clk_p),
							.IB(CLK_pci_sys_clk_n),
							.CEB(1'd0),
							.O(scemi_sys_clk_buf$O),
							.ODIV2());

  // submodule scemi_uclkgen
  MakeClock #(.initVal(1'd0),
	      .initGate(1'd1)) scemi_uclkgen(.CLK(scemi_scemi_clkgen_clkout0buf$O),
					     .RST(scemi_network_status$OUT_RST),
					     .CLK_IN(scemi_uclkgen$CLK_IN),
					     .COND_IN(scemi_uclkgen$COND_IN),
					     .CLK_IN_EN(scemi_uclkgen$CLK_IN_EN),
					     .COND_IN_EN(scemi_uclkgen$COND_IN_EN),
					     .CLK_VAL_OUT(scemi_uclkgen$CLK_VAL_OUT),
					     .COND_OUT(),
					     .CLK_GATE_OUT(),
					     .CLK_OUT(scemi_uclkgen$CLK_OUT));

  // submodule scemi_user_reset_half
  SyncResetA #(.RSTDELAY(32'd0)) scemi_user_reset_half(.CLK(scemi_clkgen_clkout0buffer$O),
						       .IN_RST(scemi_user_reset_n$RESET_OUT),
						       .OUT_RST(scemi_user_reset_half$OUT_RST));

  // submodule scemi_user_reset_n
  ResetInverter scemi_user_reset_n(.RESET_IN(scemi_pcie_ep$user_reset_out),
				   .RESET_OUT(scemi_user_reset_n$RESET_OUT));

  // submodule scemi_wIsOutOfReset
  SyncWire #(.width(32'd1)) scemi_wIsOutOfReset(.DIN(NOT_scemi_clockGenerators_clock_gens_in_reset__ETC___d1535),
						.DOUT(scemi_wIsOutOfReset$DOUT));

  // submodule sys_clk
  IBUFDS #(.CAPACITANCE("DONT_CARE"),
	   .DIFF_TERM("FALSE"),
	   .DQS_BIAS("FALSE"),
	   .IBUF_DELAY_VALUE("0"),
	   .IBUF_LOW_PWR("TRUE"),
	   .IFD_DELAY_VALUE("AUTO"),
	   .IOSTANDARD("DEFAULT")) sys_clk(.I(CLK_sys_clk_p),
					   .IB(CLK_sys_clk_n),
					   .O(sys_clk$O));

  // rule RL_send_whatever
  assign CAN_FIRE_RL_send_whatever = 1'd1 ;
  assign WILL_FIRE_RL_send_whatever = 1'd1 ;

  // rule RL_always_accept_beat
  assign CAN_FIRE_RL_always_accept_beat = 1'd1 ;
  assign WILL_FIRE_RL_always_accept_beat = 1'd1 ;

  // rule RL_drive_memory_calibration
  assign CAN_FIRE_RL_drive_memory_calibration = 1'd1 ;
  assign WILL_FIRE_RL_drive_memory_calibration = 1'd1 ;

  // rule RL_clk_gen_pll_connect_feedback
  assign CAN_FIRE_RL_clk_gen_pll_connect_feedback = 1'd1 ;
  assign WILL_FIRE_RL_clk_gen_pll_connect_feedback = 1'd1 ;

  // rule RL_ddr3_ctrl_ready_process_write_request_first
  assign CAN_FIRE_RL_ddr3_ctrl_ready_process_write_request_first =
	     ddr3_ctrl_fRequest$EMPTY_N && ddr3_ctrl$init_calib_complete &&
	     ddr3_ctrl_fRequest$D_OUT[604:541] != 64'd0 &&
	     !ddr3_ctrl_rDeqWriteReq &&
	     ddr3_ctrl$app_rdy &&
	     ddr3_ctrl$app_wdf_rdy ;
  assign WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_first =
	     CAN_FIRE_RL_ddr3_ctrl_ready_process_write_request_first ;

  // rule RL_ddr3_ctrl_ready_process_write_request_second
  assign CAN_FIRE_RL_ddr3_ctrl_ready_process_write_request_second =
	     ddr3_ctrl_fRequest$EMPTY_N && ddr3_ctrl$init_calib_complete &&
	     ddr3_ctrl_fRequest$D_OUT[604:541] != 64'd0 &&
	     ddr3_ctrl_rDeqWriteReq &&
	     ddr3_ctrl$app_wdf_rdy ;
  assign WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_second =
	     CAN_FIRE_RL_ddr3_ctrl_ready_process_write_request_second ;

  // rule RL_ddr3_ctrl_ready_process_read_request
  assign CAN_FIRE_RL_ddr3_ctrl_ready_process_read_request =
	     ddr3_ctrl_fRequest$EMPTY_N && ddr3_ctrl$init_calib_complete &&
	     ddr3_ctrl_fRequest$D_OUT[604:541] == 64'd0 &&
	     ddr3_ctrl$app_rdy ;
  assign WILL_FIRE_RL_ddr3_ctrl_ready_process_read_request =
	     CAN_FIRE_RL_ddr3_ctrl_ready_process_read_request ;

  // rule RL_ddr3_ctrl_drive_enables
  assign CAN_FIRE_RL_ddr3_ctrl_drive_enables = 1'd1 ;
  assign WILL_FIRE_RL_ddr3_ctrl_drive_enables = 1'd1 ;

  // rule RL_ddr3_ctrl_drive_data_signals
  assign CAN_FIRE_RL_ddr3_ctrl_drive_data_signals = 1'd1 ;
  assign WILL_FIRE_RL_ddr3_ctrl_drive_data_signals = 1'd1 ;

  // rule RL_ddr3_ctrl_ready_process_read_response_first
  assign CAN_FIRE_RL_ddr3_ctrl_ready_process_read_response_first =
	     ddr3_ctrl$init_calib_complete && !ddr3_ctrl_rEnqReadResp &&
	     ddr3_ctrl$app_rd_data_valid ;
  assign WILL_FIRE_RL_ddr3_ctrl_ready_process_read_response_first =
	     CAN_FIRE_RL_ddr3_ctrl_ready_process_read_response_first ;

  // rule RL_ddr3_ctrl_ready_process_read_response_second
  assign CAN_FIRE_RL_ddr3_ctrl_ready_process_read_response_second =
	     ddr3_ctrl_fResponse$FULL_N && ddr3_ctrl$init_calib_complete &&
	     ddr3_ctrl_rEnqReadResp &&
	     ddr3_ctrl$app_rd_data_valid ;
  assign WILL_FIRE_RL_ddr3_ctrl_ready_process_read_response_second =
	     CAN_FIRE_RL_ddr3_ctrl_ready_process_read_response_second ;

  // rule RL_ddr3_ctrl_dly_reset_n_count_down
  assign CAN_FIRE_RL_ddr3_ctrl_dly_reset_n_count_down =
	     ddr3_ctrl_dly_reset_n_count != 32'd0 ;
  assign WILL_FIRE_RL_ddr3_ctrl_dly_reset_n_count_down =
	     CAN_FIRE_RL_ddr3_ctrl_dly_reset_n_count_down ;

  // rule RL_scemi_others
  assign CAN_FIRE_RL_scemi_others = 1'd1 ;
  assign WILL_FIRE_RL_scemi_others = 1'd1 ;

  // rule RL_scemi_drive_axi_rx_ready
  assign CAN_FIRE_RL_scemi_drive_axi_rx_ready = 1'd1 ;
  assign WILL_FIRE_RL_scemi_drive_axi_rx_ready = 1'd1 ;

  // rule RL_scemi_sink_axi_rx
  assign CAN_FIRE_RL_scemi_sink_axi_rx =
	     !scemi_fAxiRx_rv[95] && scemi_pcie_ep$m_axis_rx_tvalid ;
  assign WILL_FIRE_RL_scemi_sink_axi_rx = CAN_FIRE_RL_scemi_sink_axi_rx ;

  // rule RL_scemi_tie_off_inputs
  assign CAN_FIRE_RL_scemi_tie_off_inputs = 1'd1 ;
  assign WILL_FIRE_RL_scemi_tie_off_inputs = 1'd1 ;

  // rule RL_scemi_register_config_values
  assign CAN_FIRE_RL_scemi_register_config_values = 1'd1 ;
  assign WILL_FIRE_RL_scemi_register_config_values = 1'd1 ;

  // rule RL_scemi_intr_ifc_ctl
  assign CAN_FIRE_RL_scemi_intr_ifc_ctl = 1'd1 ;
  assign WILL_FIRE_RL_scemi_intr_ifc_ctl = 1'd1 ;

  // rule RL_scemi_cross_config_values
  assign CAN_FIRE_RL_scemi_cross_config_values = 1'd1 ;
  assign WILL_FIRE_RL_scemi_cross_config_values = 1'd1 ;

  // rule RL_scemi_every
  assign CAN_FIRE_RL_scemi_every = 1'd1 ;
  assign WILL_FIRE_RL_scemi_every = 1'd1 ;

  // rule RL_scemi_accept_data
  assign CAN_FIRE_RL_scemi_accept_data =
	     scemi_fAxiRx_rv$port1__read[95] && scemi_inFifo$FULL_N ;
  assign WILL_FIRE_RL_scemi_accept_data = CAN_FIRE_RL_scemi_accept_data ;

  // rule RL_scemi_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_mkConnectionGetPut =
	     scemi_bridge$RDY_clocks_request_get &&
	     scemi_scemi_clkgen_fRequest$FULL_N ;
  assign WILL_FIRE_RL_scemi_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_mkConnectionGetPut ;

  // rule RL_scemi_reset_scemi_if_network_is_inactive
  assign CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive =
	     !scemi_bridge$is_activated ;
  assign WILL_FIRE_RL_scemi_reset_scemi_if_network_is_inactive =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;

  // rule RL_scemi_toggle_uclock
  assign CAN_FIRE_RL_scemi_toggle_uclock = 1'd1 ;
  assign WILL_FIRE_RL_scemi_toggle_uclock = 1'd1 ;

  // rule RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb
  assign CAN_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb =
	     scemi_fFromBridgeBeat_ifc_rDataCount != 6'd0 &&
	     (scemi_fFromBridgeBeat_ifc_rStorage[31:26] == 6'b101010 ||
	      scemi_fFromBridgeBeat_ifc_rStorage[31:26] == 6'b101011 ||
	      scemi_fToContinueBeat_ifc_rDataCount_594_ULT_32___d1672) &&
	     scemi_bridge$is_activated &&
	     NOT_scemi_fFromBridgeBeat_ifc_rDataCount_557_U_ETC___d1677 &&
	     scemi_rInMsgBytes == 8'd0 ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb ;

  // rule RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header
  assign CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header =
	     scemi_fFromBridgeBeat_ifc_rDataCount != 6'd0 &&
	     (scemi_fFromBridgeBeat_ifc_rStorage[31:30] != 2'd3 ||
	      scemi_fS1OutPortAcks_ifc_rDataCount_633_ULT_16___d1693) &&
	     scemi_bridge_is_activated__72_AND_scemi_rSceMi_ETC___d1717 ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header ;

  // rule RL_scemi_msg_sink_noc_active_scemi1_process_inport_data
  assign CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data =
	     scemi_fFromBridgeBeat_ifc_rDataCount != 6'd0 &&
	     scemi_bridge$is_activated &&
	     scemi_rSceMi1MsgIn_696_AND_NOT_scemi_rSceMi2Ms_ETC___d1704 &&
	     NOT_scemi_fFromBridgeBeat_ifc_rDataCount_557_U_ETC___d1677 &&
	     scemi_rS1MsgInIsData &&
	     !scemi_rS1MsgInIsAck &&
	     IF_scemi_rS1InPortNum_784_EQ_0_785_THEN_scemi__ETC___d1794 ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data ;

  // rule RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb
  assign CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb =
	     scemi_fS1OutPortAcks_ifc_rDataCount_633_ULT_16___d1693 &&
	     scemi_fFromBridgeBeat_ifc_rDataCount != 6'd0 &&
	     scemi_bridge$is_activated &&
	     scemi_rSceMi1MsgIn_696_AND_NOT_scemi_rSceMi2Ms_ETC___d1704 &&
	     NOT_scemi_fFromBridgeBeat_ifc_rDataCount_557_U_ETC___d1677 &&
	     !scemi_rS1MsgInIsData &&
	     scemi_rS1MsgInIsAck &&
	     NOT_scemi_fS1OutPortAcks_ifc_rDataAvail_654_UL_ETC___d1714 ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb ;

  // rule RL_scemi_msg_sink_noc_active_scemi1_disregard_packet
  assign CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_disregard_packet =
	     scemi_fFromBridgeBeat_ifc_rDataCount != 6'd0 &&
	     scemi_bridge$is_activated &&
	     scemi_rSceMi1MsgIn_696_AND_NOT_scemi_rSceMi2Ms_ETC___d1704 &&
	     NOT_scemi_fFromBridgeBeat_ifc_rDataCount_557_U_ETC___d1677 &&
	     !scemi_rS1MsgInIsAck &&
	     !scemi_rS1MsgInIsData &&
	     !scemi_rDecodeSceMi ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_disregard_packet =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi1_disregard_packet ;

  // rule RL_scemi_msg_sink_noc_active_execute_outport_acks
  assign CAN_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks =
	     scemi_fS1OutPortAcks_ifc_rDataCount != 5'd0 &&
	     IF_scemi_fS1OutPortAcks_ifc_rStorage_618_BITS__ETC___d1836 &&
	     scemi_bridge$is_activated ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks ;

  // rule RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb
  assign CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb =
	     scemi_fFromBridgeBeat_ifc_rDataCount != 6'd0 &&
	     scemi_bridge$is_activated &&
	     scemi_rSceMi2MsgIn_697_AND_NOT_scemi_rSceMi1Ms_ETC___d1842 &&
	     NOT_scemi_fFromBridgeBeat_ifc_rDataCount_557_U_ETC___d1677 &&
	     scemi_rDecodeSceMi &&
	     !scemi_rS2MsgInIsData &&
	     !scemi_rS2MsgInIsCred ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb ;

  // rule RL_scemi_msg_sink_noc_active_scemi2_disregard_packet
  assign CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi2_disregard_packet =
	     scemi_fFromBridgeBeat_ifc_rDataCount != 6'd0 &&
	     scemi_bridge$is_activated &&
	     scemi_rSceMi2MsgIn_697_AND_NOT_scemi_rSceMi1Ms_ETC___d1842 &&
	     NOT_scemi_fFromBridgeBeat_ifc_rDataCount_557_U_ETC___d1677 &&
	     !scemi_rS2MsgInIsData &&
	     !scemi_rS2MsgInIsCred &&
	     !scemi_rDecodeSceMi ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_disregard_packet =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi2_disregard_packet ;

  // rule RL_scemi_msg_sink_noc_active_other_process_other_data
  assign CAN_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data =
	     scemi_fToContinueBeat_ifc_rDataCount_594_ULT_32___d1672 &&
	     scemi_fFromBridgeBeat_ifc_rDataCount != 6'd0 &&
	     scemi_bridge_is_activated__72_AND_scemi_rOther_ETC___d1869 ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data ;

  // rule RL_scemi_msg_sink_noc_inactive
  assign CAN_FIRE_RL_scemi_msg_sink_noc_inactive =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_inactive =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;

  // rule RL_scemi_msg_source_noc_active_transmit_beat_to_bridge
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_transmit_beat_to_bridge =
	     scemi_fToBridgeBeat$EMPTY_N && scemi_bridge$is_activated ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_transmit_beat_to_bridge =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_transmit_beat_to_bridge ;

  // rule RL_scemi_msg_source_noc_active_arbitrate_transmit_messages
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages =
	     scemi_bridge$is_activated && scemi_rOutMsgBytes == 8'd0 ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages ;

  // rule RL_scemi_msg_source_noc_active_inports_load_new_request_group
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group =
	     scemi_bridge$is_activated && !scemi_lrS1ActiveRequests &&
	     !scemi_lrS1ActiveRequests_1 &&
	     !scemi_lrS1ActiveRequests_2 &&
	     !scemi_lrS1ActiveRequests_3 &&
	     !scemi_lrS1ActiveRequests_4 &&
	     !scemi_rS1MsgOutReqReq ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ;

  // rule RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests =
	     scemi_bridge$is_activated &&
	     (scemi_lrS1ActiveRequests ||
	      scemi_lrS1ActiveRequests_1_202_OR_scemi_lrS1Ac_ETC___d2225 ||
	      scemi_rS1MsgOutReqReq) ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests ;

  // rule RL_scemi_msg_source_noc_active_inports_shift_new_request_vector
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector =
	     scemi_bridge$is_activated &&
	     scemi_lrS1ActiveRequests_1_202_OR_scemi_lrS1Ac_ETC___d2225 &&
	     !scemi_rS1MsgOutReqReq &&
	     !scemi_lrS1ActiveRequests ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector ;

  // rule RL_scemi_msg_source_noc_active_inports_send_request_message
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message =
	     scemi_fS1MsgOut_ifc_rDataCount_923_ULT_32___d2241 &&
	     scemi_bridge$is_activated &&
	     scemi_rS1MsgOutReqReq &&
	     scemi_rS1MsgOutReqGrant &&
	     scemi_fS1MsgOut_ifc_rDataAvail >= 6'd8 ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message ;

  // rule RL_scemi_msg_source_noc_inactive_inports
  assign CAN_FIRE_RL_scemi_msg_source_noc_inactive_inports =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;

  // rule RL_scemi_msg_source_noc_active_outports_send_data_message_header
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header =
	     scemi_fS1MsgOut_ifc_rDataCount_923_ULT_32___d2241 &&
	     scemi_bridge$is_activated &&
	     scemi_rS1MsgOutDataReq &&
	     !scemi_rS1MsgOutReqGrant &&
	     scemi_rS1OutDataHeader &&
	     scemi_fS1MsgOut_ifc_rDataAvail >= 6'd16 ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header ;

  // rule RL_scemi_msg_source_noc_active_outports_send_data_message_data
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data =
	     scemi_fS1MsgOut_ifc_rDataCount_923_ULT_32___d2241 &&
	     scemi_bridge$is_activated &&
	     scemi_rS1MsgOutDataReq &&
	     !scemi_rS1MsgOutReqGrant &&
	     !scemi_rS1OutDataHeader &&
	     scemi_fS1MsgOut_ifc_rDataAvail >= 6'd4 ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data ;

  // rule RL_scemi_swap_scemi1_outport_grant
  assign CAN_FIRE_RL_scemi_swap_scemi1_outport_grant =
	     scemi_rS1MsgOutReqReq && !scemi_rS1MsgOutReqGrant &&
	     !scemi_rS1MsgOutDataReq ||
	     scemi_rS1MsgOutDataReq && scemi_rS1MsgOutReqGrant &&
	     !scemi_rS1MsgOutReqReq ;
  assign WILL_FIRE_RL_scemi_swap_scemi1_outport_grant =
	     CAN_FIRE_RL_scemi_swap_scemi1_outport_grant ;

  // rule RL_scemi_msg_source_noc_active_inports_start_next_request
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_inports_start_next_request =
	     scemi_bridge$is_activated && !scemi_rS1MsgOutReqReq &&
	     scemi_lrS1ActiveRequests ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_inports_start_next_request =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_inports_start_next_request ;

  // rule RL_scemi_msg_source_noc_active_outports_start_data_message
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message =
	     scemi_init_state_msgFIFO$dEMPTY_N && scemi_bridge$is_activated &&
	     scemi_init_state_msgFIFO$dEMPTY_N &&
	     !scemi_rS1MsgOutDataReq &&
	     !scemi_rS1OutDataHeader ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message ;

  // rule RL_scemi_drive_status_pcie_link_up
  assign CAN_FIRE_RL_scemi_drive_status_pcie_link_up = 1'd1 ;
  assign WILL_FIRE_RL_scemi_drive_status_pcie_link_up = 1'd1 ;

  // rule RL_scemi_drive_status_bluenoc_link_up
  assign CAN_FIRE_RL_scemi_drive_status_bluenoc_link_up = 1'd1 ;
  assign WILL_FIRE_RL_scemi_drive_status_bluenoc_link_up = 1'd1 ;

  // rule RL_scemi_drive_status_interrupts_enabled
  assign CAN_FIRE_RL_scemi_drive_status_interrupts_enabled = 1'd1 ;
  assign WILL_FIRE_RL_scemi_drive_status_interrupts_enabled = 1'd1 ;

  // rule RL_scemi_drive_status_memory_enabled
  assign CAN_FIRE_RL_scemi_drive_status_memory_enabled = 1'd1 ;
  assign WILL_FIRE_RL_scemi_drive_status_memory_enabled = 1'd1 ;

  // rule RL_scemi_drive_status_out_of_reset
  assign CAN_FIRE_RL_scemi_drive_status_out_of_reset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_drive_status_out_of_reset = 1'd1 ;

  // rule RL_scemi_clkgen_pll_connect_feedback
  assign CAN_FIRE_RL_scemi_clkgen_pll_connect_feedback = 1'd1 ;
  assign WILL_FIRE_RL_scemi_clkgen_pll_connect_feedback = 1'd1 ;

  // rule RL_scemi_scemi_clkgen_mmcm_drp_outputs
  assign CAN_FIRE_RL_scemi_scemi_clkgen_mmcm_drp_outputs = 1'd1 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_mmcm_drp_outputs = 1'd1 ;

  // rule RL_scemi_scemi_clkgen_process_read_request
  assign CAN_FIRE_RL_scemi_scemi_clkgen_process_read_request =
	     scemi_scemi_clkgen_fRequest$EMPTY_N &&
	     scemi_scemi_clkgen_fResponse$FULL_N &&
	     scemi_scemi_clkgen_fRequest$D_OUT[21] ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_process_read_request =
	     CAN_FIRE_RL_scemi_scemi_clkgen_process_read_request ;

  // rule RL_scemi_scemi_clkgen_mmcm_feedback
  assign CAN_FIRE_RL_scemi_scemi_clkgen_mmcm_feedback = 1'd1 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_mmcm_feedback = 1'd1 ;

  // rule RL_scemi_scemi_clkgen_mmcm_drp_inputs
  assign CAN_FIRE_RL_scemi_scemi_clkgen_mmcm_drp_inputs = 1'd1 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_mmcm_drp_inputs = 1'd1 ;

  // rule RL_scemi_scemi_clkgen_restart_state
  assign CAN_FIRE_RL_scemi_scemi_clkgen_restart_state =
	     scemi_scemi_clkgen_rState == 3'd0 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_restart_state =
	     CAN_FIRE_RL_scemi_scemi_clkgen_restart_state ;

  // rule RL_scemi_scemi_clkgen_wait_lock_state
  assign CAN_FIRE_RL_scemi_scemi_clkgen_wait_lock_state =
	     scemi_scemi_clkgen_rState == 3'd1 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_wait_lock_state =
	     CAN_FIRE_RL_scemi_scemi_clkgen_wait_lock_state ;

  // rule RL_scemi_scemi_clkgen_wait_start_state
  assign CAN_FIRE_RL_scemi_scemi_clkgen_wait_start_state =
	     scemi_scemi_clkgen_rState == 3'd2 &&
	     scemi_scemi_clkgen_rMMCM_start &&
	     !scemi_scemi_clkgen_rMMCM_start_d1 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_wait_start_state =
	     CAN_FIRE_RL_scemi_scemi_clkgen_wait_start_state ;

  // rule RL_scemi_scemi_clkgen_process_start_delay
  assign CAN_FIRE_RL_scemi_scemi_clkgen_process_start_delay = 1'd1 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_process_start_delay = 1'd1 ;

  // rule RL_scemi_scemi_clkgen_address_state
  assign CAN_FIRE_RL_scemi_scemi_clkgen_address_state =
	     scemi_scemi_clkgen_rState == 3'd3 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_address_state =
	     CAN_FIRE_RL_scemi_scemi_clkgen_address_state ;

  // rule RL_scemi_scemi_clkgen_read_state
  assign CAN_FIRE_RL_scemi_scemi_clkgen_read_state =
	     scemi_scemi_clkgen_rState == 3'd4 &&
	     scemi_scemi_clkgen_mmcm$DRDY ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_read_state =
	     CAN_FIRE_RL_scemi_scemi_clkgen_read_state ;

  // rule RL_scemi_scemi_clkgen_modify_state
  assign CAN_FIRE_RL_scemi_scemi_clkgen_modify_state =
	     scemi_scemi_clkgen_rState == 3'd5 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_modify_state =
	     CAN_FIRE_RL_scemi_scemi_clkgen_modify_state ;

  // rule RL_scemi_scemi_clkgen_process_write_request
  assign CAN_FIRE_RL_scemi_scemi_clkgen_process_write_request =
	     scemi_scemi_clkgen_fRequest$EMPTY_N &&
	     !scemi_scemi_clkgen_fRequest$D_OUT[21] ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request =
	     CAN_FIRE_RL_scemi_scemi_clkgen_process_write_request ;

  // rule RL_scemi_scemi_clkgen_write_state
  assign CAN_FIRE_RL_scemi_scemi_clkgen_write_state =
	     scemi_scemi_clkgen_rState == 3'd6 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_write_state =
	     CAN_FIRE_RL_scemi_scemi_clkgen_write_state ;

  // rule RL_scemi_scemi_clkgen_wait_write_ready
  assign CAN_FIRE_RL_scemi_scemi_clkgen_wait_write_ready =
	     scemi_scemi_clkgen_rState == 3'd7 &&
	     scemi_scemi_clkgen_mmcm$DRDY ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_wait_write_ready =
	     CAN_FIRE_RL_scemi_scemi_clkgen_wait_write_ready ;

  // rule RL_scemi_scemi_clkgen_rSel__dreg_update
  assign CAN_FIRE_RL_scemi_scemi_clkgen_rSel__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_rSel__dreg_update = 1'd1 ;

  // rule RL_scemi_scemi_clkgen_rWrEn__dreg_update
  assign CAN_FIRE_RL_scemi_scemi_clkgen_rWrEn__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_scemi_scemi_clkgen_rWrEn__dreg_update = 1'd1 ;

  // rule RL_scemi_1_tie_off_inputs
  assign CAN_FIRE_RL_scemi_1_tie_off_inputs = 1'd1 ;
  assign WILL_FIRE_RL_scemi_1_tie_off_inputs = 1'd1 ;

  // rule RL_scemi_2_tie_off_inputs
  assign CAN_FIRE_RL_scemi_2_tie_off_inputs = 1'd1 ;
  assign WILL_FIRE_RL_scemi_2_tie_off_inputs = 1'd1 ;

  // rule RL_scemi_3_tie_off_inputs
  assign CAN_FIRE_RL_scemi_3_tie_off_inputs = 1'd1 ;
  assign WILL_FIRE_RL_scemi_3_tie_off_inputs = 1'd1 ;

  // rule RL_scemi_fifoRxData_launder_sInReset
  assign CAN_FIRE_RL_scemi_fifoRxData_launder_sInReset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_fifoRxData_launder_sInReset = 1'd1 ;

  // rule RL_scemi_process_incoming_packets
  assign CAN_FIRE_RL_scemi_process_incoming_packets =
	     NOT_scemi_fifoRxData_write_block_90_91_AND_NOT_ETC___d417 &&
	     scemi_inFifo$EMPTY_N &&
	     !scemi_rSendInvalid ;
  assign WILL_FIRE_RL_scemi_process_incoming_packets =
	     CAN_FIRE_RL_scemi_process_incoming_packets ;

  // rule RL_scemi_send_invalid_packets
  assign CAN_FIRE_RL_scemi_send_invalid_packets =
	     NOT_scemi_fifoRxData_write_block_90_91_AND_NOT_ETC___d417 &&
	     scemi_rSendInvalid ;
  assign WILL_FIRE_RL_scemi_send_invalid_packets =
	     CAN_FIRE_RL_scemi_send_invalid_packets ;

  // rule RL_scemi_fifoRxData_launder_dInReset
  assign CAN_FIRE_RL_scemi_fifoRxData_launder_dInReset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_fifoRxData_launder_dInReset = 1'd1 ;

  // rule RL_scemi_send_data
  assign CAN_FIRE_RL_scemi_send_data =
	     NOT_scemi_fifoRxData_read_block_82_83_AND_NOT__ETC___d507 &&
	     scemi_bridge$RDY_tlps_snd_put ;
  assign WILL_FIRE_RL_scemi_send_data = CAN_FIRE_RL_scemi_send_data ;

  // rule RL_scemi_fifoRxData_sInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_scemi_fifoRxData_sInReset_pre_isResetAssertedUpdate =
	     scemi_fifoRxData_sInReset_pre_isInReset ;
  assign WILL_FIRE_RL_scemi_fifoRxData_sInReset_pre_isResetAssertedUpdate =
	     scemi_fifoRxData_sInReset_pre_isInReset ;

  // rule RL_scemi_fifoRxData_dInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_scemi_fifoRxData_dInReset_pre_isResetAssertedUpdate =
	     scemi_fifoRxData_dInReset_pre_isInReset ;
  assign WILL_FIRE_RL_scemi_fifoRxData_dInReset_pre_isResetAssertedUpdate =
	     scemi_fifoRxData_dInReset_pre_isInReset ;

  // rule RL_scemi_1_every
  assign CAN_FIRE_RL_scemi_1_every = 1'd1 ;
  assign WILL_FIRE_RL_scemi_1_every = 1'd1 ;

  // rule RL_scemi_1_send_data
  assign CAN_FIRE_RL_scemi_1_send_data =
	     scemi_1_outFifo$EMPTY_N &&
	     (scemi_1_outFifo$D_OUT[71:64] == 8'd0 || !scemi_fAxiTx_rv[73]) ;
  assign WILL_FIRE_RL_scemi_1_send_data = CAN_FIRE_RL_scemi_1_send_data ;

  // rule RL_scemi_drive_axi_tx_info
  assign CAN_FIRE_RL_scemi_drive_axi_tx_info =
	     scemi_fAxiTx_rv$port1__read[73] &&
	     scemi_pcie_ep$s_axis_tx_tready ;
  assign WILL_FIRE_RL_scemi_drive_axi_tx_info =
	     CAN_FIRE_RL_scemi_drive_axi_tx_info ;

  // rule RL_scemi_drive_axi_tx
  assign CAN_FIRE_RL_scemi_drive_axi_tx = 1'd1 ;
  assign WILL_FIRE_RL_scemi_drive_axi_tx = 1'd1 ;

  // rule RL_scemi_1_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_1_mkConnectionGetPut =
	     scemi_bridge$RDY_clocks_response_put &&
	     scemi_scemi_clkgen_fResponse$EMPTY_N ;
  assign WILL_FIRE_RL_scemi_1_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_1_mkConnectionGetPut ;

  // rule RL_scemi_1_fifoTxData_launder_sInReset
  assign CAN_FIRE_RL_scemi_1_fifoTxData_launder_sInReset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_1_fifoTxData_launder_sInReset = 1'd1 ;

  // rule RL_scemi_1_get_data
  assign CAN_FIRE_RL_scemi_1_get_data =
	     NOT_scemi_1_fifoTxData_write_block_42_43_AND_s_ETC___d563 &&
	     scemi_bridge$RDY_tlps_fst_get ;
  assign WILL_FIRE_RL_scemi_1_get_data = CAN_FIRE_RL_scemi_1_get_data ;

  // rule RL_scemi_1_fifoTxData_launder_dInReset
  assign CAN_FIRE_RL_scemi_1_fifoTxData_launder_dInReset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_1_fifoTxData_launder_dInReset = 1'd1 ;

  // rule RL_scemi_1_process_outgoing_packets
  assign CAN_FIRE_RL_scemi_1_process_outgoing_packets =
	     NOT_scemi_1_fifoTxData_read_block_83_84_AND_NO_ETC___d606 &&
	     scemi_1_outFifo$FULL_N ;
  assign WILL_FIRE_RL_scemi_1_process_outgoing_packets =
	     CAN_FIRE_RL_scemi_1_process_outgoing_packets ;

  // rule RL_scemi_1_fifoTxData_sInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_scemi_1_fifoTxData_sInReset_pre_isResetAssertedUpdate =
	     scemi_1_fifoTxData_sInReset_pre_isInReset ;
  assign WILL_FIRE_RL_scemi_1_fifoTxData_sInReset_pre_isResetAssertedUpdate =
	     scemi_1_fifoTxData_sInReset_pre_isInReset ;

  // rule RL_scemi_1_fifoTxData_dInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_scemi_1_fifoTxData_dInReset_pre_isResetAssertedUpdate =
	     scemi_1_fifoTxData_dInReset_pre_isInReset ;
  assign WILL_FIRE_RL_scemi_1_fifoTxData_dInReset_pre_isResetAssertedUpdate =
	     scemi_1_fifoTxData_dInReset_pre_isInReset ;

  // rule RL_scemi_rstgen_trigger
  assign CAN_FIRE_RL_scemi_rstgen_trigger = !scemi_rstgen_init ;
  assign WILL_FIRE_RL_scemi_rstgen_trigger =
	     CAN_FIRE_RL_scemi_rstgen_trigger ;

  // rule RL_scemi_clk_port_rstgen_trigger
  assign CAN_FIRE_RL_scemi_clk_port_rstgen_trigger =
	     !scemi_clk_port_rstgen_init ;
  assign WILL_FIRE_RL_scemi_clk_port_rstgen_trigger =
	     CAN_FIRE_RL_scemi_clk_port_rstgen_trigger ;

  // rule RL_scemi_dut_dut_prb_control_setSample
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_setSample =
	     scemi_dut_dut_prb_control_enff$FULL_N &&
	     NOT_scemi_dut_dut_prb_control_sampleIntervalV__ETC___d800 ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_setSample ;

  // rule RL_scemi_dut_dut_prb_control_flagSample
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_flagSample =
	     NOT_scemi_dut_dut_prb_control_flag_04_05_AND_N_ETC___d806 &&
	     scemi_init_state_cycle_stamp_crossed__97_EQ_sc_ETC___d799 ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_flagSample =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_flagSample &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample ;

  // rule RL_scemi_dut_dut_prb_control_unsetFlag
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag =
	     scemi_dut_dut_prb_control_enff$FULL_N &&
	     scemi_dut_dut_prb_control_flag ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample ;

  // rule RL_scemi_dut_dut_prb_control_send_en
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_send_en =
	     scemi_dut_dut_prb_control_enff$EMPTY_N ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_send_en =
	     scemi_dut_dut_prb_control_enff$EMPTY_N ;

  // rule RL_scemi_dut_dut_prb_control_data_out_detect_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_detect_scemi_reset =
	     scemi_dut_dut_prb_control_data_out_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_detect_scemi_reset =
	     scemi_dut_dut_prb_control_data_out_in_reset_uclk ;

  // rule RL_scemi_dut_dut_prb_control_data_out_detect_end_of_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_detect_end_of_scemi_reset =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_detect_end_of_scemi_reset =
	     1'd1 ;

  // rule RL_scemi_dut_dut_prb_control_data_out_deassert_after_reset
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_deassert_after_reset =
	     scemi_dut_dut_prb_control_data_out_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_deassert_after_reset =
	     scemi_dut_dut_prb_control_data_out_in_reset_uclk ;

  // rule RL_scemi_dut_dut_prb_control_data_out_update_count
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_update_count =
	     !scemi_dut_dut_prb_control_data_out_in_reset_noc &&
	     (scemi_dut_dut_prb_control_data_out_decr$whas ||
	      scemi_dut_dut_prb_control_data_out_next$dPulse) ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_update_count =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_update_count ;

  // rule RL_scemi_dut_dut_prb_control_data_out_initiate_reset_sequence
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_initiate_reset_sequence =
	     !scemi_dut_dut_prb_control_data_out_in_reset_noc &&
	     scemi_dut_dut_prb_control_data_out_starting_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_initiate_reset_sequence =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_initiate_reset_sequence ;

  // rule RL_scemi_dut_dut_prb_control_data_out_handle_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_handle_scemi_reset =
	     scemi_dut_dut_prb_control_data_out_in_reset_noc ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_handle_scemi_reset =
	     scemi_dut_dut_prb_control_data_out_in_reset_noc ;

  // rule RL_scemi_dut_dut_prb_control_data_out_complete_reset_sequence
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_complete_reset_sequence =
	     scemi_dut_dut_prb_control_data_out_in_reset_noc &&
	     scemi_dut_dut_prb_control_data_out_ending_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_complete_reset_sequence =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_complete_reset_sequence ;

  // rule RL_scemi_dut_dut_prb_control_data_out_pok_mkConnectionVtoAf
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_pok_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_pok_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_scemi_dut_dut_prb_control_control_in_detect_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_detect_scemi_reset =
	     scemi_dut_dut_prb_control_control_in_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_detect_scemi_reset =
	     scemi_dut_dut_prb_control_control_in_in_reset_uclk ;

  // rule RL_scemi_dut_dut_prb_control_control_in_detect_end_of_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_detect_end_of_scemi_reset =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_detect_end_of_scemi_reset =
	     1'd1 ;

  // rule RL_scemi_dut_dut_prb_control_control_in_deassert_after_reset
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_deassert_after_reset =
	     scemi_dut_dut_prb_control_control_in_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_deassert_after_reset =
	     scemi_dut_dut_prb_control_control_in_in_reset_uclk ;

  // rule RL_scemi_dut_dut_prb_control_control_in_data_ready
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_data_ready =
	     scemi_dut_dut_prb_control_control_in_status == 2'd1 &&
	     scemi_dut_dut_prb_control_control_in_buffer_full_sp$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_data_ready =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_data_ready ;

  // rule RL_scemi_dut_dut_prb_control_control_in_port_reset
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_port_reset =
	     scemi_dut_dut_prb_control_control_in_wait_sp$sRDY &&
	     scemi_dut_dut_prb_control_control_in_status == 2'd3 &&
	     scemi_dut_dut_prb_control_control_in_buffer_empty_sp$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_port_reset =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_port_reset ;

  // rule RL_scemi_dut_dut_prb_control_control_in_handle_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_handle_scemi_reset =
	     scemi_dut_dut_prb_control_control_in_in_reset_noc ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_handle_scemi_reset =
	     scemi_dut_dut_prb_control_control_in_in_reset_noc ;

  // rule RL_scemi_dut_dut_prb_control_control_in_complete_reset_sequence
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_complete_reset_sequence =
	     scemi_dut_dut_prb_control_control_in_in_reset_noc &&
	     scemi_dut_dut_prb_control_control_in_ending_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_complete_reset_sequence =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_complete_reset_sequence ;

  // rule RL_scemi_dut_dut_prb_control_control_in_update_remaining
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_update_remaining =
	     IF_scemi_dut_dut_prb_control_control_in_got_be_ETC___d748 &&
	     !scemi_dut_dut_prb_control_control_in_in_reset_noc &&
	     (scemi_dut_dut_prb_control_control_in_got_beat_pw$whas ||
	      scemi_dut_dut_prb_control_control_in_next_sp$dPulse ||
	      scemi_dut_dut_prb_control_control_in_wait_sp$dPulse) ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_update_remaining =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_update_remaining ;

  // rule RL_scemi_dut_dut_prb_control_control_in_initiate_reset_sequence
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_initiate_reset_sequence =
	     !scemi_dut_dut_prb_control_control_in_in_reset_noc &&
	     scemi_dut_dut_prb_control_control_in_starting_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_initiate_reset_sequence =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_initiate_reset_sequence ;

  // rule RL_scemi_dut_dut_prb_control_control_in_receive_ready
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive_ready =
	     scemi_dut_dut_prb_control_control_in_requestF_rv &&
	     !scemi_dut_dut_prb_control_control_in_dataF_rv[17] ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive_ready =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive_ready ;

  // rule RL_scemi_dut_dut_prb_control_control_in_first_request
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_first_request =
	     scemi_dut_dut_prb_control_control_in_next_sp$sRDY &&
	     scemi_dut_dut_prb_control_control_in_wait_sp$sRDY &&
	     scemi_dut_dut_prb_control_control_in_status == 2'd0 &&
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive_ready ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_first_request =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_first_request ;

  // rule RL_scemi_dut_dut_prb_control_control_in_receive
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive =
	     scemi_dut_dut_prb_control_control_in_status == 2'd2 &&
	     scemi_dut_dut_prb_control_control_in_requestF_rv &&
	     !scemi_dut_dut_prb_control_control_in_dataF_rv[17] ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive ;

  // rule RL_scemi_dut_dut_prb_control_requestInput
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_requestInput =
	     !scemi_dut_dut_prb_control_control_in_requestF_rv$port1__read ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_requestInput =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_requestInput ;

  // rule RL_scemi_dut_dut_prb_control_control_in_read_complete
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_read_complete =
	     scemi_dut_dut_prb_control_control_in_next_sp$sRDY &&
	     scemi_dut_dut_prb_control_control_in_status == 2'd2 &&
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive_ready ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_read_complete =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_read_complete ;

  // rule RL_scemi_dut_dut_prb_control_contextToPrbStr_connectData
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_contextToPrbStr_connectData =
	     scemi_dut_dut_probeHook$DATAVALID ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_contextToPrbStr_connectData =
	     scemi_dut_dut_probeHook$DATAVALID ;

  // rule RL_scemi_dut_dut_prb_control_dutclkctrl_pconnect_mkConnectionVtoAf
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_dutclkctrl_pconnect_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_dutclkctrl_pconnect_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_scemi_dut_dut_prb_control_dutclkctrl_nconnect_mkConnectionVtoAf
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_dutclkctrl_nconnect_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_dutclkctrl_nconnect_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_scemi_dut_dut_dutIfc_donerest
  assign CAN_FIRE_RL_scemi_dut_dut_dutIfc_donerest =
	     scemi_dut_dut_dutIfc_didreset$FULL_N &&
	     scemi_dut_dut_dutIfc_resetting &&
	     !scemi_dut_dut_dutIfc_myrst$ASSERT_OUT ;
  assign WILL_FIRE_RL_scemi_dut_dut_dutIfc_donerest =
	     CAN_FIRE_RL_scemi_dut_dut_dutIfc_donerest ;

  // rule RL_scemi_dut_softrst_req_inport_detect_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_detect_scemi_reset =
	     scemi_dut_softrst_req_inport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_detect_scemi_reset =
	     scemi_dut_softrst_req_inport_in_reset_uclk ;

  // rule RL_scemi_dut_softrst_req_inport_detect_end_of_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_detect_end_of_scemi_reset =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_detect_end_of_scemi_reset =
	     1'd1 ;

  // rule RL_scemi_dut_softrst_req_inport_deassert_after_reset
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_deassert_after_reset =
	     scemi_dut_softrst_req_inport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_deassert_after_reset =
	     scemi_dut_softrst_req_inport_in_reset_uclk ;

  // rule RL_scemi_dut_softrst_req_inport_data_ready
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_data_ready =
	     scemi_dut_softrst_req_inport_status == 2'd1 &&
	     scemi_dut_softrst_req_inport_buffer_full_sp$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_data_ready =
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_data_ready ;

  // rule RL_scemi_dut_softrst_req_inport_port_reset
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_port_reset =
	     scemi_dut_softrst_req_inport_wait_sp$sRDY &&
	     scemi_dut_softrst_req_inport_status == 2'd3 &&
	     scemi_dut_softrst_req_inport_buffer_empty_sp$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_port_reset =
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_port_reset ;

  // rule RL_scemi_dut_softrst_req_inport_handle_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_handle_scemi_reset =
	     scemi_dut_softrst_req_inport_in_reset_noc ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_handle_scemi_reset =
	     scemi_dut_softrst_req_inport_in_reset_noc ;

  // rule RL_scemi_dut_softrst_req_inport_complete_reset_sequence
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_complete_reset_sequence =
	     scemi_dut_softrst_req_inport_in_reset_noc &&
	     scemi_dut_softrst_req_inport_ending_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_complete_reset_sequence =
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_complete_reset_sequence ;

  // rule RL_scemi_dut_softrst_req_inport_update_remaining
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_update_remaining =
	     IF_scemi_dut_softrst_req_inport_got_beat_pw_wh_ETC___d1074 &&
	     !scemi_dut_softrst_req_inport_in_reset_noc &&
	     (scemi_dut_softrst_req_inport_got_beat_pw$whas ||
	      scemi_dut_softrst_req_inport_next_sp$dPulse ||
	      scemi_dut_softrst_req_inport_wait_sp$dPulse) ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_update_remaining =
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_update_remaining ;

  // rule RL_scemi_dut_softrst_req_inport_initiate_reset_sequence
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_initiate_reset_sequence =
	     !scemi_dut_softrst_req_inport_in_reset_noc &&
	     scemi_dut_softrst_req_inport_starting_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_initiate_reset_sequence =
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_initiate_reset_sequence ;

  // rule RL_scemi_dut_softrst_req_inport_receive_ready
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_receive_ready =
	     scemi_dut_softrst_req_inport_requestF_rv &&
	     !scemi_dut_softrst_req_inport_dataF_rv[1] ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_receive_ready =
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_receive_ready ;

  // rule RL_scemi_dut_softrst_req_inport_first_request
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_first_request =
	     scemi_dut_softrst_req_inport_next_sp$sRDY &&
	     scemi_dut_softrst_req_inport_wait_sp$sRDY &&
	     scemi_dut_softrst_req_inport_status == 2'd0 &&
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_receive_ready ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_first_request =
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_first_request ;

  // rule RL_scemi_dut_softrst_req_inport_receive
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_receive =
	     scemi_dut_softrst_req_inport_status == 2'd2 &&
	     scemi_dut_softrst_req_inport_requestF_rv &&
	     !scemi_dut_softrst_req_inport_dataF_rv[1] ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_receive =
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_receive ;

  // rule RL_scemi_dut_softrst_req_request
  assign CAN_FIRE_RL_scemi_dut_softrst_req_request =
	     !scemi_dut_softrst_req_inport_requestF_rv$port1__read ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_request =
	     CAN_FIRE_RL_scemi_dut_softrst_req_request ;

  // rule RL_scemi_dut_softrst_req_inport_read_complete
  assign CAN_FIRE_RL_scemi_dut_softrst_req_inport_read_complete =
	     scemi_dut_softrst_req_inport_next_sp$sRDY &&
	     scemi_dut_softrst_req_inport_status == 2'd2 &&
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_receive_ready ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_inport_read_complete =
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_read_complete ;

  // rule RL_scemi_dut_softrst_req_connect_res_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_dut_softrst_req_connect_res_mkConnectionGetPut =
	     scemi_dut_softrst_req_inport_dataF_rv$port1__read[1] &&
	     scemi_dut_softrst_req_res_fifo$sFULL_N ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_connect_res_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_dut_softrst_req_connect_res_mkConnectionGetPut ;

  // rule RL_scemi_dut_softrst_req_connect_put_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_dut_softrst_req_connect_put_mkConnectionGetPut =
	     scemi_dut_softrst_req_res_fifo$dEMPTY_N ;
  assign WILL_FIRE_RL_scemi_dut_softrst_req_connect_put_mkConnectionGetPut =
	     scemi_dut_softrst_req_res_fifo$dEMPTY_N ;

  // rule RL_scemi_dut_softrst_resp_outport_detect_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_outport_detect_scemi_reset =
	     scemi_dut_softrst_resp_outport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_outport_detect_scemi_reset =
	     scemi_dut_softrst_resp_outport_in_reset_uclk ;

  // rule RL_scemi_dut_softrst_resp_outport_detect_end_of_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_outport_detect_end_of_scemi_reset =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_outport_detect_end_of_scemi_reset =
	     1'd1 ;

  // rule RL_scemi_dut_softrst_resp_outport_deassert_after_reset
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_outport_deassert_after_reset =
	     scemi_dut_softrst_resp_outport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_outport_deassert_after_reset =
	     scemi_dut_softrst_resp_outport_in_reset_uclk ;

  // rule RL_scemi_dut_softrst_resp_outport_update_count
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_outport_update_count =
	     !scemi_dut_softrst_resp_outport_in_reset_noc &&
	     (scemi_dut_softrst_resp_outport_decr$whas ||
	      scemi_dut_softrst_resp_outport_next$dPulse) ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_outport_update_count =
	     CAN_FIRE_RL_scemi_dut_softrst_resp_outport_update_count ;

  // rule RL_scemi_dut_softrst_resp_outport_initiate_reset_sequence
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_outport_initiate_reset_sequence =
	     !scemi_dut_softrst_resp_outport_in_reset_noc &&
	     scemi_dut_softrst_resp_outport_starting_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_outport_initiate_reset_sequence =
	     CAN_FIRE_RL_scemi_dut_softrst_resp_outport_initiate_reset_sequence ;

  // rule RL_scemi_dut_softrst_resp_outport_handle_scemi_reset
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_outport_handle_scemi_reset =
	     scemi_dut_softrst_resp_outport_in_reset_noc ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_outport_handle_scemi_reset =
	     scemi_dut_softrst_resp_outport_in_reset_noc ;

  // rule RL_scemi_dut_softrst_resp_outport_complete_reset_sequence
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_outport_complete_reset_sequence =
	     scemi_dut_softrst_resp_outport_in_reset_noc &&
	     scemi_dut_softrst_resp_outport_ending_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_outport_complete_reset_sequence =
	     CAN_FIRE_RL_scemi_dut_softrst_resp_outport_complete_reset_sequence ;

  // rule RL_scemi_dut_softrst_resp_outport_pok_mkConnectionVtoAf
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_outport_pok_mkConnectionVtoAf =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_outport_pok_mkConnectionVtoAf =
	     1'd1 ;

  // rule RL_scemi_dut_softrst_resp_connect_get_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_connect_get_mkConnectionGetPut =
	     scemi_dut_softrst_resp_res_fifo$sFULL_N &&
	     scemi_dut_dut_dutIfc_didreset$EMPTY_N ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_connect_get_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_dut_softrst_resp_connect_get_mkConnectionGetPut ;

  // rule RL_scemi_data_req_inport_detect_scemi_reset
  assign CAN_FIRE_RL_scemi_data_req_inport_detect_scemi_reset =
	     scemi_data_req_inport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_data_req_inport_detect_scemi_reset =
	     scemi_data_req_inport_in_reset_uclk ;

  // rule RL_scemi_data_req_inport_detect_end_of_scemi_reset
  assign CAN_FIRE_RL_scemi_data_req_inport_detect_end_of_scemi_reset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_data_req_inport_detect_end_of_scemi_reset = 1'd1 ;

  // rule RL_scemi_data_req_inport_deassert_after_reset
  assign CAN_FIRE_RL_scemi_data_req_inport_deassert_after_reset =
	     scemi_data_req_inport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_data_req_inport_deassert_after_reset =
	     scemi_data_req_inport_in_reset_uclk ;

  // rule RL_scemi_data_req_inport_data_ready
  assign CAN_FIRE_RL_scemi_data_req_inport_data_ready =
	     scemi_data_req_inport_status == 2'd1 &&
	     scemi_data_req_inport_buffer_full_sp$dPulse ;
  assign WILL_FIRE_RL_scemi_data_req_inport_data_ready =
	     CAN_FIRE_RL_scemi_data_req_inport_data_ready ;

  // rule RL_scemi_data_req_inport_port_reset
  assign CAN_FIRE_RL_scemi_data_req_inport_port_reset =
	     scemi_data_req_inport_wait_sp$sRDY &&
	     scemi_data_req_inport_status == 2'd3 &&
	     scemi_data_req_inport_buffer_empty_sp$dPulse ;
  assign WILL_FIRE_RL_scemi_data_req_inport_port_reset =
	     CAN_FIRE_RL_scemi_data_req_inport_port_reset ;

  // rule RL_scemi_data_req_inport_handle_scemi_reset
  assign CAN_FIRE_RL_scemi_data_req_inport_handle_scemi_reset =
	     scemi_data_req_inport_in_reset_noc ;
  assign WILL_FIRE_RL_scemi_data_req_inport_handle_scemi_reset =
	     scemi_data_req_inport_in_reset_noc ;

  // rule RL_scemi_data_req_inport_complete_reset_sequence
  assign CAN_FIRE_RL_scemi_data_req_inport_complete_reset_sequence =
	     scemi_data_req_inport_in_reset_noc &&
	     scemi_data_req_inport_ending_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_data_req_inport_complete_reset_sequence =
	     CAN_FIRE_RL_scemi_data_req_inport_complete_reset_sequence ;

  // rule RL_scemi_data_req_inport_update_remaining
  assign CAN_FIRE_RL_scemi_data_req_inport_update_remaining =
	     IF_scemi_data_req_inport_got_beat_pw_whas__170_ETC___d1179 &&
	     !scemi_data_req_inport_in_reset_noc &&
	     (scemi_data_req_inport_got_beat_pw$whas ||
	      scemi_data_req_inport_next_sp$dPulse ||
	      scemi_data_req_inport_wait_sp$dPulse) ;
  assign WILL_FIRE_RL_scemi_data_req_inport_update_remaining =
	     CAN_FIRE_RL_scemi_data_req_inport_update_remaining ;

  // rule RL_scemi_data_req_inport_initiate_reset_sequence
  assign CAN_FIRE_RL_scemi_data_req_inport_initiate_reset_sequence =
	     !scemi_data_req_inport_in_reset_noc &&
	     scemi_data_req_inport_starting_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_data_req_inport_initiate_reset_sequence =
	     CAN_FIRE_RL_scemi_data_req_inport_initiate_reset_sequence ;

  // rule RL_scemi_data_req_inport_receive_ready
  assign CAN_FIRE_RL_scemi_data_req_inport_receive_ready =
	     scemi_data_req_inport_requestF_rv &&
	     !scemi_data_req_inport_dataF_rv[4] ;
  assign WILL_FIRE_RL_scemi_data_req_inport_receive_ready =
	     CAN_FIRE_RL_scemi_data_req_inport_receive_ready ;

  // rule RL_scemi_data_req_inport_first_request
  assign CAN_FIRE_RL_scemi_data_req_inport_first_request =
	     scemi_data_req_inport_next_sp$sRDY &&
	     scemi_data_req_inport_wait_sp$sRDY &&
	     scemi_data_req_inport_status == 2'd0 &&
	     CAN_FIRE_RL_scemi_data_req_inport_receive_ready ;
  assign WILL_FIRE_RL_scemi_data_req_inport_first_request =
	     CAN_FIRE_RL_scemi_data_req_inport_first_request ;

  // rule RL_scemi_data_req_inport_receive
  assign CAN_FIRE_RL_scemi_data_req_inport_receive =
	     scemi_data_req_inport_status == 2'd2 &&
	     scemi_data_req_inport_requestF_rv &&
	     !scemi_data_req_inport_dataF_rv[4] ;
  assign WILL_FIRE_RL_scemi_data_req_inport_receive =
	     CAN_FIRE_RL_scemi_data_req_inport_receive ;

  // rule RL_scemi_data_req_request
  assign CAN_FIRE_RL_scemi_data_req_request =
	     !scemi_data_req_inport_requestF_rv$port1__read ;
  assign WILL_FIRE_RL_scemi_data_req_request =
	     CAN_FIRE_RL_scemi_data_req_request ;

  // rule RL_scemi_data_req_inport_read_complete
  assign CAN_FIRE_RL_scemi_data_req_inport_read_complete =
	     scemi_data_req_inport_next_sp$sRDY &&
	     scemi_data_req_inport_status == 2'd2 &&
	     CAN_FIRE_RL_scemi_data_req_inport_receive_ready ;
  assign WILL_FIRE_RL_scemi_data_req_inport_read_complete =
	     CAN_FIRE_RL_scemi_data_req_inport_read_complete ;

  // rule RL_scemi_data_req_connect_res_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_data_req_connect_res_mkConnectionGetPut =
	     scemi_data_req_inport_dataF_rv$port1__read[4] &&
	     scemi_data_req_res_fifo$sFULL_N ;
  assign WILL_FIRE_RL_scemi_data_req_connect_res_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_data_req_connect_res_mkConnectionGetPut ;

  // rule RL_scemi_data_req_connect_put_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_data_req_connect_put_mkConnectionGetPut =
	     scemi_data_req_res_fifo$dEMPTY_N &&
	     scemi_dut_dut_dutIfc_m_dut$RDY_data_request_put ;
  assign WILL_FIRE_RL_scemi_data_req_connect_put_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_data_req_connect_put_mkConnectionGetPut ;

  // rule RL_scemi_data_resp_outport_detect_scemi_reset
  assign CAN_FIRE_RL_scemi_data_resp_outport_detect_scemi_reset =
	     scemi_data_resp_outport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_data_resp_outport_detect_scemi_reset =
	     scemi_data_resp_outport_in_reset_uclk ;

  // rule RL_scemi_data_resp_outport_detect_end_of_scemi_reset
  assign CAN_FIRE_RL_scemi_data_resp_outport_detect_end_of_scemi_reset =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_data_resp_outport_detect_end_of_scemi_reset =
	     1'd1 ;

  // rule RL_scemi_data_resp_outport_deassert_after_reset
  assign CAN_FIRE_RL_scemi_data_resp_outport_deassert_after_reset =
	     scemi_data_resp_outport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_data_resp_outport_deassert_after_reset =
	     scemi_data_resp_outport_in_reset_uclk ;

  // rule RL_scemi_data_resp_outport_update_count
  assign CAN_FIRE_RL_scemi_data_resp_outport_update_count =
	     !scemi_data_resp_outport_in_reset_noc &&
	     (scemi_data_resp_outport_decr$whas ||
	      scemi_data_resp_outport_next$dPulse) ;
  assign WILL_FIRE_RL_scemi_data_resp_outport_update_count =
	     CAN_FIRE_RL_scemi_data_resp_outport_update_count ;

  // rule RL_scemi_data_resp_outport_initiate_reset_sequence
  assign CAN_FIRE_RL_scemi_data_resp_outport_initiate_reset_sequence =
	     !scemi_data_resp_outport_in_reset_noc &&
	     scemi_data_resp_outport_starting_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_data_resp_outport_initiate_reset_sequence =
	     CAN_FIRE_RL_scemi_data_resp_outport_initiate_reset_sequence ;

  // rule RL_scemi_data_resp_outport_handle_scemi_reset
  assign CAN_FIRE_RL_scemi_data_resp_outport_handle_scemi_reset =
	     scemi_data_resp_outport_in_reset_noc ;
  assign WILL_FIRE_RL_scemi_data_resp_outport_handle_scemi_reset =
	     scemi_data_resp_outport_in_reset_noc ;

  // rule RL_scemi_data_resp_outport_complete_reset_sequence
  assign CAN_FIRE_RL_scemi_data_resp_outport_complete_reset_sequence =
	     scemi_data_resp_outport_in_reset_noc &&
	     scemi_data_resp_outport_ending_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_data_resp_outport_complete_reset_sequence =
	     CAN_FIRE_RL_scemi_data_resp_outport_complete_reset_sequence ;

  // rule RL_scemi_data_resp_outport_pok_mkConnectionVtoAf
  assign CAN_FIRE_RL_scemi_data_resp_outport_pok_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_scemi_data_resp_outport_pok_mkConnectionVtoAf = 1'd1 ;

  // rule RL_scemi_data_resp_connect_get_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_data_resp_connect_get_mkConnectionGetPut =
	     scemi_data_resp_res_fifo$sFULL_N &&
	     scemi_dut_dut_dutIfc_m_dut$RDY_data_response_get ;
  assign WILL_FIRE_RL_scemi_data_resp_connect_get_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_data_resp_connect_get_mkConnectionGetPut ;

  // rule RL_scemi_start_inport_detect_scemi_reset
  assign CAN_FIRE_RL_scemi_start_inport_detect_scemi_reset =
	     scemi_start_inport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_start_inport_detect_scemi_reset =
	     scemi_start_inport_in_reset_uclk ;

  // rule RL_scemi_start_inport_detect_end_of_scemi_reset
  assign CAN_FIRE_RL_scemi_start_inport_detect_end_of_scemi_reset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_start_inport_detect_end_of_scemi_reset = 1'd1 ;

  // rule RL_scemi_start_inport_deassert_after_reset
  assign CAN_FIRE_RL_scemi_start_inport_deassert_after_reset =
	     scemi_start_inport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_start_inport_deassert_after_reset =
	     scemi_start_inport_in_reset_uclk ;

  // rule RL_scemi_start_inport_data_ready
  assign CAN_FIRE_RL_scemi_start_inport_data_ready =
	     scemi_start_inport_status == 2'd1 &&
	     scemi_start_inport_buffer_full_sp$dPulse ;
  assign WILL_FIRE_RL_scemi_start_inport_data_ready =
	     CAN_FIRE_RL_scemi_start_inport_data_ready ;

  // rule RL_scemi_start_inport_port_reset
  assign CAN_FIRE_RL_scemi_start_inport_port_reset =
	     scemi_start_inport_wait_sp$sRDY &&
	     scemi_start_inport_status == 2'd3 &&
	     scemi_start_inport_buffer_empty_sp$dPulse ;
  assign WILL_FIRE_RL_scemi_start_inport_port_reset =
	     CAN_FIRE_RL_scemi_start_inport_port_reset ;

  // rule RL_scemi_start_inport_handle_scemi_reset
  assign CAN_FIRE_RL_scemi_start_inport_handle_scemi_reset =
	     scemi_start_inport_in_reset_noc ;
  assign WILL_FIRE_RL_scemi_start_inport_handle_scemi_reset =
	     scemi_start_inport_in_reset_noc ;

  // rule RL_scemi_start_inport_complete_reset_sequence
  assign CAN_FIRE_RL_scemi_start_inport_complete_reset_sequence =
	     scemi_start_inport_in_reset_noc &&
	     scemi_start_inport_ending_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_start_inport_complete_reset_sequence =
	     CAN_FIRE_RL_scemi_start_inport_complete_reset_sequence ;

  // rule RL_scemi_start_inport_update_remaining
  assign CAN_FIRE_RL_scemi_start_inport_update_remaining =
	     IF_scemi_start_inport_got_beat_pw_whas__280_TH_ETC___d1289 &&
	     !scemi_start_inport_in_reset_noc &&
	     (scemi_start_inport_got_beat_pw$whas ||
	      scemi_start_inport_next_sp$dPulse ||
	      scemi_start_inport_wait_sp$dPulse) ;
  assign WILL_FIRE_RL_scemi_start_inport_update_remaining =
	     CAN_FIRE_RL_scemi_start_inport_update_remaining ;

  // rule RL_scemi_start_inport_initiate_reset_sequence
  assign CAN_FIRE_RL_scemi_start_inport_initiate_reset_sequence =
	     !scemi_start_inport_in_reset_noc &&
	     scemi_start_inport_starting_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_start_inport_initiate_reset_sequence =
	     CAN_FIRE_RL_scemi_start_inport_initiate_reset_sequence ;

  // rule RL_scemi_start_inport_receive_ready
  assign CAN_FIRE_RL_scemi_start_inport_receive_ready =
	     scemi_start_inport_requestF_rv &&
	     !scemi_start_inport_dataF_rv[1] ;
  assign WILL_FIRE_RL_scemi_start_inport_receive_ready =
	     CAN_FIRE_RL_scemi_start_inport_receive_ready ;

  // rule RL_scemi_start_inport_first_request
  assign CAN_FIRE_RL_scemi_start_inport_first_request =
	     scemi_start_inport_next_sp$sRDY &&
	     scemi_start_inport_wait_sp$sRDY &&
	     scemi_start_inport_status == 2'd0 &&
	     CAN_FIRE_RL_scemi_start_inport_receive_ready ;
  assign WILL_FIRE_RL_scemi_start_inport_first_request =
	     CAN_FIRE_RL_scemi_start_inport_first_request ;

  // rule RL_scemi_start_inport_receive
  assign CAN_FIRE_RL_scemi_start_inport_receive =
	     scemi_start_inport_status == 2'd2 &&
	     scemi_start_inport_requestF_rv &&
	     !scemi_start_inport_dataF_rv[1] ;
  assign WILL_FIRE_RL_scemi_start_inport_receive =
	     CAN_FIRE_RL_scemi_start_inport_receive ;

  // rule RL_scemi_start_request
  assign CAN_FIRE_RL_scemi_start_request =
	     !scemi_start_inport_requestF_rv$port1__read ;
  assign WILL_FIRE_RL_scemi_start_request = CAN_FIRE_RL_scemi_start_request ;

  // rule RL_scemi_start_inport_read_complete
  assign CAN_FIRE_RL_scemi_start_inport_read_complete =
	     scemi_start_inport_next_sp$sRDY &&
	     scemi_start_inport_status == 2'd2 &&
	     CAN_FIRE_RL_scemi_start_inport_receive_ready ;
  assign WILL_FIRE_RL_scemi_start_inport_read_complete =
	     CAN_FIRE_RL_scemi_start_inport_read_complete ;

  // rule RL_scemi_start_connect_res_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_start_connect_res_mkConnectionGetPut =
	     scemi_start_inport_dataF_rv$port1__read[1] &&
	     scemi_start_res_fifo$sFULL_N ;
  assign WILL_FIRE_RL_scemi_start_connect_res_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_start_connect_res_mkConnectionGetPut ;

  // rule RL_scemi_start_connect_put_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_start_connect_put_mkConnectionGetPut =
	     scemi_start_res_fifo$dEMPTY_N ;
  assign WILL_FIRE_RL_scemi_start_connect_put_mkConnectionGetPut =
	     scemi_start_res_fifo$dEMPTY_N ;

  // rule RL_scemi_count_outport_detect_scemi_reset
  assign CAN_FIRE_RL_scemi_count_outport_detect_scemi_reset =
	     scemi_count_outport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_count_outport_detect_scemi_reset =
	     scemi_count_outport_in_reset_uclk ;

  // rule RL_scemi_count_outport_detect_end_of_scemi_reset
  assign CAN_FIRE_RL_scemi_count_outport_detect_end_of_scemi_reset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_count_outport_detect_end_of_scemi_reset = 1'd1 ;

  // rule RL_scemi_count_outport_deassert_after_reset
  assign CAN_FIRE_RL_scemi_count_outport_deassert_after_reset =
	     scemi_count_outport_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_count_outport_deassert_after_reset =
	     scemi_count_outport_in_reset_uclk ;

  // rule RL_scemi_count_outport_update_count
  assign CAN_FIRE_RL_scemi_count_outport_update_count =
	     !scemi_count_outport_in_reset_noc &&
	     (scemi_count_outport_decr$whas ||
	      scemi_count_outport_next$dPulse) ;
  assign WILL_FIRE_RL_scemi_count_outport_update_count =
	     CAN_FIRE_RL_scemi_count_outport_update_count ;

  // rule RL_scemi_count_outport_initiate_reset_sequence
  assign CAN_FIRE_RL_scemi_count_outport_initiate_reset_sequence =
	     !scemi_count_outport_in_reset_noc &&
	     scemi_count_outport_starting_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_count_outport_initiate_reset_sequence =
	     CAN_FIRE_RL_scemi_count_outport_initiate_reset_sequence ;

  // rule RL_scemi_count_outport_handle_scemi_reset
  assign CAN_FIRE_RL_scemi_count_outport_handle_scemi_reset =
	     scemi_count_outport_in_reset_noc ;
  assign WILL_FIRE_RL_scemi_count_outport_handle_scemi_reset =
	     scemi_count_outport_in_reset_noc ;

  // rule RL_scemi_count_outport_complete_reset_sequence
  assign CAN_FIRE_RL_scemi_count_outport_complete_reset_sequence =
	     scemi_count_outport_in_reset_noc &&
	     scemi_count_outport_ending_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_count_outport_complete_reset_sequence =
	     CAN_FIRE_RL_scemi_count_outport_complete_reset_sequence ;

  // rule RL_scemi_count_outport_pok_mkConnectionVtoAf
  assign CAN_FIRE_RL_scemi_count_outport_pok_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_scemi_count_outport_pok_mkConnectionVtoAf = 1'd1 ;

  // rule RL_scemi_count_connect_get_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_count_connect_get_mkConnectionGetPut =
	     scemi_count_res_fifo$sFULL_N &&
	     scemi_dut_dut_dutIfc_m_dut$RDY_count_get ;
  assign WILL_FIRE_RL_scemi_count_connect_get_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_count_connect_get_mkConnectionGetPut ;

  // rule RL_scemi_shutdown_shutdown
  assign CAN_FIRE_RL_scemi_shutdown_shutdown =
	     scemi_shutdown_shutdown_pending &&
	     scemi_shutdown_ctrl_out_ok_435_AND_NOT_scemi_i_ETC___d1439 ;
  assign WILL_FIRE_RL_scemi_shutdown_shutdown =
	     CAN_FIRE_RL_scemi_shutdown_shutdown ;

  // rule RL_scemi_shutdown_ctrl_in_detect_scemi_reset
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_detect_scemi_reset =
	     scemi_shutdown_ctrl_in_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_detect_scemi_reset =
	     scemi_shutdown_ctrl_in_in_reset_uclk ;

  // rule RL_scemi_shutdown_ctrl_in_detect_end_of_scemi_reset
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_detect_end_of_scemi_reset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_detect_end_of_scemi_reset =
	     1'd1 ;

  // rule RL_scemi_shutdown_ctrl_in_deassert_after_reset
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_deassert_after_reset =
	     scemi_shutdown_ctrl_in_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_deassert_after_reset =
	     scemi_shutdown_ctrl_in_in_reset_uclk ;

  // rule RL_scemi_shutdown_ctrl_in_data_ready
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_data_ready =
	     scemi_shutdown_ctrl_in_status == 2'd1 &&
	     scemi_shutdown_ctrl_in_buffer_full_sp$dPulse ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_data_ready =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_data_ready ;

  // rule RL_scemi_shutdown_ctrl_in_port_reset
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_port_reset =
	     scemi_shutdown_ctrl_in_wait_sp$sRDY &&
	     scemi_shutdown_ctrl_in_status == 2'd3 &&
	     scemi_shutdown_ctrl_in_buffer_empty_sp$dPulse ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_port_reset =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_port_reset ;

  // rule RL_scemi_shutdown_ctrl_in_handle_scemi_reset
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_handle_scemi_reset =
	     scemi_shutdown_ctrl_in_in_reset_noc ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_handle_scemi_reset =
	     scemi_shutdown_ctrl_in_in_reset_noc ;

  // rule RL_scemi_shutdown_ctrl_in_complete_reset_sequence
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_complete_reset_sequence =
	     scemi_shutdown_ctrl_in_in_reset_noc &&
	     scemi_shutdown_ctrl_in_ending_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_complete_reset_sequence =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_complete_reset_sequence ;

  // rule RL_scemi_shutdown_ctrl_in_update_remaining
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_update_remaining =
	     IF_scemi_shutdown_ctrl_in_got_beat_pw_whas__38_ETC___d1396 &&
	     !scemi_shutdown_ctrl_in_in_reset_noc &&
	     (scemi_shutdown_ctrl_in_got_beat_pw$whas ||
	      scemi_shutdown_ctrl_in_next_sp$dPulse ||
	      scemi_shutdown_ctrl_in_wait_sp$dPulse) ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_update_remaining =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_update_remaining ;

  // rule RL_scemi_shutdown_ctrl_in_initiate_reset_sequence
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_initiate_reset_sequence =
	     !scemi_shutdown_ctrl_in_in_reset_noc &&
	     scemi_shutdown_ctrl_in_starting_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_initiate_reset_sequence =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_initiate_reset_sequence ;

  // rule RL_scemi_shutdown_ctrl_in_receive_ready
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_receive_ready =
	     scemi_shutdown_ctrl_in_requestF_rv &&
	     !scemi_shutdown_ctrl_in_dataF_rv[1] ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_receive_ready =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_receive_ready ;

  // rule RL_scemi_shutdown_ctrl_in_first_request
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_first_request =
	     scemi_shutdown_ctrl_in_next_sp$sRDY &&
	     scemi_shutdown_ctrl_in_wait_sp$sRDY &&
	     scemi_shutdown_ctrl_in_status == 2'd0 &&
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_receive_ready ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_first_request =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_first_request ;

  // rule RL_scemi_shutdown_ctrl_in_receive
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_receive =
	     scemi_shutdown_ctrl_in_status == 2'd2 &&
	     scemi_shutdown_ctrl_in_requestF_rv &&
	     !scemi_shutdown_ctrl_in_dataF_rv[1] ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_receive =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_receive ;

  // rule RL_scemi_shutdown_request
  assign CAN_FIRE_RL_scemi_shutdown_request =
	     !scemi_shutdown_ctrl_in_requestF_rv$port1__read ;
  assign WILL_FIRE_RL_scemi_shutdown_request =
	     CAN_FIRE_RL_scemi_shutdown_request ;

  // rule RL_scemi_shutdown_ctrl_in_read_complete
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_in_read_complete =
	     scemi_shutdown_ctrl_in_next_sp$sRDY &&
	     scemi_shutdown_ctrl_in_status == 2'd2 &&
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_receive_ready ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_in_read_complete =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_read_complete ;

  // rule RL_scemi_shutdown_ctrl_out_detect_scemi_reset
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_out_detect_scemi_reset =
	     scemi_shutdown_ctrl_out_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_out_detect_scemi_reset =
	     scemi_shutdown_ctrl_out_in_reset_uclk ;

  // rule RL_scemi_shutdown_ctrl_out_detect_end_of_scemi_reset
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_out_detect_end_of_scemi_reset =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_out_detect_end_of_scemi_reset =
	     1'd1 ;

  // rule RL_scemi_shutdown_ctrl_out_deassert_after_reset
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_out_deassert_after_reset =
	     scemi_shutdown_ctrl_out_in_reset_uclk ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_out_deassert_after_reset =
	     scemi_shutdown_ctrl_out_in_reset_uclk ;

  // rule RL_scemi_shutdown_ctrl_out_update_count
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_out_update_count =
	     !scemi_shutdown_ctrl_out_in_reset_noc &&
	     (scemi_shutdown_ctrl_out_decr$whas ||
	      scemi_shutdown_ctrl_out_next$dPulse) ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_out_update_count =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_out_update_count ;

  // rule RL_scemi_shutdown_ctrl_out_initiate_reset_sequence
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_out_initiate_reset_sequence =
	     !scemi_shutdown_ctrl_out_in_reset_noc &&
	     scemi_shutdown_ctrl_out_starting_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_out_initiate_reset_sequence =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_out_initiate_reset_sequence ;

  // rule RL_scemi_shutdown_ctrl_out_handle_scemi_reset
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_out_handle_scemi_reset =
	     scemi_shutdown_ctrl_out_in_reset_noc ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_out_handle_scemi_reset =
	     scemi_shutdown_ctrl_out_in_reset_noc ;

  // rule RL_scemi_shutdown_ctrl_out_complete_reset_sequence
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_out_complete_reset_sequence =
	     scemi_shutdown_ctrl_out_in_reset_noc &&
	     scemi_shutdown_ctrl_out_ending_reset$dPulse ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_out_complete_reset_sequence =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_out_complete_reset_sequence ;

  // rule RL_scemi_shutdown_ctrl_out_pok_mkConnectionVtoAf
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_out_pok_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_out_pok_mkConnectionVtoAf = 1'd1 ;

  // rule RL_scemi_dut_dut_prb_control_respondToPing
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_respondToPing =
	     scemi_dut_dut_prb_control_data_out_next$sRDY &&
	     scemi_init_state_msgFIFO$sFULL_N &&
	     scemi_dut_dut_prb_control_data_out_ok_01_AND_N_ETC___d709 &&
	     scemi_dut_dut_prb_control_count == 16'd0 &&
	     scemi_dut_dut_prb_control_pinged ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_respondToPing &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger ;

  // rule RL_scemi_dut_dut_prb_control_sendAck
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_sendAck =
	     scemi_dut_dut_prb_control_data_out_next$sRDY &&
	     scemi_init_state_msgFIFO$sFULL_N &&
	     scemi_dut_dut_prb_control_data_out_ok_01_AND_N_ETC___d709 &&
	     scemi_dut_dut_prb_control_ackFifo$EMPTY_N &&
	     scemi_dut_dut_prb_control_count == 16'd0 &&
	     !scemi_dut_dut_prb_control_pinged ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_sendAck &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger ;

  // rule RL_scemi_dut_dut_prb_control_receiveControl
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveControl =
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[17] &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	      3'd0 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	      3'd1 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	      3'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	      3'd3 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	      3'd4 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	      3'd5 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	      3'd6 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12:0] ==
	      13'h1FFF ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv__ETC___d878) ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample ;

  // rule RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut =
	     scemi_dut_softrst_resp_outport_next$sRDY &&
	     scemi_init_state_msgFIFO$sFULL_N &&
	     scemi_dut_softrst_resp_res_fifo$dEMPTY_N &&
	     scemi_dut_softrst_resp_outport_ok_122_AND_NOT__ETC___d1126 ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut ;

  // rule RL_scemi_dut_softrst_resp_outport_setOK
  assign CAN_FIRE_RL_scemi_dut_softrst_resp_outport_setOK =
	     scemi_dut_softrst_resp_outport_finished$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_softrst_resp_outport_setOK =
	     scemi_dut_softrst_resp_outport_finished$dPulse ;

  // rule RL_scemi_data_resp_connect_res_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut =
	     scemi_data_resp_outport_next$sRDY &&
	     scemi_init_state_msgFIFO$sFULL_N &&
	     scemi_data_resp_res_fifo$dEMPTY_N &&
	     scemi_data_resp_outport_ok_232_AND_NOT_scemi_i_ETC___d1236 ;
  assign WILL_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut ;

  // rule RL_scemi_data_resp_outport_setOK
  assign CAN_FIRE_RL_scemi_data_resp_outport_setOK =
	     scemi_data_resp_outport_finished$dPulse ;
  assign WILL_FIRE_RL_scemi_data_resp_outport_setOK =
	     scemi_data_resp_outport_finished$dPulse ;

  // rule RL_scemi_count_connect_res_mkConnectionGetPut
  assign CAN_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut =
	     scemi_count_outport_next$sRDY &&
	     scemi_init_state_msgFIFO$sFULL_N &&
	     scemi_count_res_fifo$dEMPTY_N &&
	     scemi_count_outport_ok_338_AND_NOT_scemi_init__ETC___d1342 ;
  assign WILL_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut =
	     CAN_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut ;

  // rule RL_scemi_count_outport_setOK
  assign CAN_FIRE_RL_scemi_count_outport_setOK =
	     scemi_count_outport_finished$dPulse ;
  assign WILL_FIRE_RL_scemi_count_outport_setOK =
	     scemi_count_outport_finished$dPulse ;

  // rule RL_scemi_shutdown_ack
  assign CAN_FIRE_RL_scemi_shutdown_ack =
	     scemi_shutdown_ctrl_in_dataF_rv$port1__read[1] &&
	     (!scemi_shutdown_ctrl_in_dataF_rv$port1__read[0] ||
	      scemi_shutdown_ctrl_out_next$sRDY &&
	      scemi_init_state_msgFIFO$sFULL_N &&
	      scemi_shutdown_ctrl_out_ok_435_AND_NOT_scemi_i_ETC___d1439) ;
  assign WILL_FIRE_RL_scemi_shutdown_ack =
	     CAN_FIRE_RL_scemi_shutdown_ack &&
	     !WILL_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut &&
	     !WILL_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut &&
	     !WILL_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger ;

  // rule RL_scemi_shutdown_ctrl_out_setOK
  assign CAN_FIRE_RL_scemi_shutdown_ctrl_out_setOK =
	     scemi_shutdown_ctrl_out_finished$dPulse ;
  assign WILL_FIRE_RL_scemi_shutdown_ctrl_out_setOK =
	     scemi_shutdown_ctrl_out_finished$dPulse ;

  // rule RL_scemi_Prelude_inst_changeSpecialWires_request
  assign CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_request =
	     scemi_reqFifo$sFULL_N &&
	     scemi_dut_dut_dutIfc_m_dut$RDY_ddr3client_request_get &&
	     scemi_Prelude_inst_changeSpecialWires_outstanding$Q_OUT !=
	     5'd31 ;
  assign WILL_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_request =
	     CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_request ;

  // rule RL_scemi_Prelude_inst_changeSpecialWires_response
  assign CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_response =
	     scemi_respFifo$dEMPTY_N &&
	     scemi_Prelude_inst_changeSpecialWires_respbuf$FULL_N ;
  assign WILL_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_response =
	     CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_response ;

  // rule RL_scemi_Prelude_inst_changeSpecialWires_forward
  assign CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_forward =
	     scemi_dut_dut_dutIfc_m_dut$RDY_ddr3client_response_put &&
	     scemi_Prelude_inst_changeSpecialWires_respbuf$EMPTY_N ;
  assign WILL_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_forward =
	     CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_forward ;

  // rule RL_scemi_clockGenerators_clock_gens_do_stall_scemi
  assign CAN_FIRE_RL_scemi_clockGenerators_clock_gens_do_stall_scemi =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall ;
  assign WILL_FIRE_RL_scemi_clockGenerators_clock_gens_do_stall_scemi =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall ;

  // rule RL_scemi_clockGenerators_stall_one_to_one_cclock
  assign CAN_FIRE_RL_scemi_clockGenerators_stall_one_to_one_cclock =
	     !scemi_clockGenerators_free_stamp ||
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall ;
  assign WILL_FIRE_RL_scemi_clockGenerators_stall_one_to_one_cclock =
	     CAN_FIRE_RL_scemi_clockGenerators_stall_one_to_one_cclock ;

  // rule RL_scemi_clockGenerators_incr_cycle_stamp
  assign CAN_FIRE_RL_scemi_clockGenerators_incr_cycle_stamp =
	     scemi_clockGenerators_one_to_one_cclock_count == 32'd0 &&
	     !CAN_FIRE_RL_scemi_clockGenerators_stall_one_to_one_cclock ;
  assign WILL_FIRE_RL_scemi_clockGenerators_incr_cycle_stamp =
	     CAN_FIRE_RL_scemi_clockGenerators_incr_cycle_stamp ;

  // rule RL_scemi_clockGenerators_clock_gens_update_stalled
  assign CAN_FIRE_RL_scemi_clockGenerators_clock_gens_update_stalled =
	     scemi_clockGenerators_clock_gens_reset_counter != 32'd0 &&
	     (scemi_clockGenerators_clock_gens_out_of_reset_reg ||
	      scemi_clockGenerators_clock_gens_reset_counter == 32'd16 &&
	      scemi_clockGenerators_clock_gens_counters_count == 32'd0) &&
	     x1__h37881 ;
  assign WILL_FIRE_RL_scemi_clockGenerators_clock_gens_update_stalled =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_update_stalled ;

  // rule RL_scemi_clockGenerators_clock_gens_manage_reset
  assign CAN_FIRE_RL_scemi_clockGenerators_clock_gens_manage_reset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_clockGenerators_clock_gens_manage_reset = 1'd1 ;

  // rule RL_scemi_clockGenerators_handle_reset
  assign CAN_FIRE_RL_scemi_clockGenerators_handle_reset =
	     scemi_clockGenerators_clock_gens_reset_counter_ETC___d1490 ||
	     !scemi_clockGenerators_clock_gens_out_of_reset_reg &&
	     scemi_clockGenerators_clock_gens_counters_count != 32'd0 ;
  assign WILL_FIRE_RL_scemi_clockGenerators_handle_reset =
	     CAN_FIRE_RL_scemi_clockGenerators_handle_reset ;

  // rule RL_scemi_init_state_track_reset
  assign CAN_FIRE_RL_scemi_init_state_track_reset = 1'd1 ;
  assign WILL_FIRE_RL_scemi_init_state_track_reset = 1'd1 ;

  // rule RL_scemi_clockGenerators_track_reset
  assign CAN_FIRE_RL_scemi_clockGenerators_track_reset = !x1__h37881 ;
  assign WILL_FIRE_RL_scemi_clockGenerators_track_reset =
	     CAN_FIRE_RL_scemi_clockGenerators_track_reset ;

  // rule RL_scemi_clockGenerators_clock_gens_do_ticks
  assign CAN_FIRE_RL_scemi_clockGenerators_clock_gens_do_ticks =
	     !scemi_dut_dut_probeHook$DELAY &&
	     !scemi_dut_dut_prb_control_prb_str$EMPTY_N ;
  assign WILL_FIRE_RL_scemi_clockGenerators_clock_gens_do_ticks =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_do_ticks ;

  // rule RL_scemi_dut_dut_prb_control_announceCclock
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_announceCclock =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_do_ticks ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_announceCclock =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_do_ticks ;

  // rule RL_scemi_clockGenerators_clock_gens_counters_do_stall
  assign CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall =
	     scemi_clockGenerators_clock_gens_reset_counter != 32'd0 &&
	     (scemi_clockGenerators_clock_gens_out_of_reset_reg ||
	      scemi_clockGenerators_clock_gens_reset_counter == 32'd16 &&
	      scemi_clockGenerators_clock_gens_counters_count == 32'd0) &&
	     (scemi_clockGenerators_clock_gens_counters_count == 32'd0 &&
	      !ab__h89164[1] &&
	      !scemi_clockGenerators_clock_gens_stalled &&
	      x1__h37881 ||
	      scemi_clockGenerators_clock_gens_stalled_511_A_ETC___d1518) ;
  assign WILL_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall ;

  // rule RL_scemi_clockGenerators_clock_gens_tick_clock
  assign CAN_FIRE_RL_scemi_clockGenerators_clock_gens_tick_clock = 1'd1 ;
  assign WILL_FIRE_RL_scemi_clockGenerators_clock_gens_tick_clock = 1'd1 ;

  // rule RL_scemi_clockGenerators_clock_gens_counters_incr
  assign CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_incr =
	     !CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall ;
  assign WILL_FIRE_RL_scemi_clockGenerators_clock_gens_counters_incr =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_incr ;

  // rule RL_scemi_clockGenerators_clock_gens_is_allowed_sync_clock_domain_crossing
  assign CAN_FIRE_RL_scemi_clockGenerators_clock_gens_is_allowed_sync_clock_domain_crossing =
	     1'd1 ;
  assign WILL_FIRE_RL_scemi_clockGenerators_clock_gens_is_allowed_sync_clock_domain_crossing =
	     1'd1 ;

  // rule RL_scemi_dut_dut_prb_control_contextToPrbStr_connectCommitAck
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_contextToPrbStr_connectCommitAck =
	     scemi_dut_dut_prb_control_prb_str$FULL_N ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_contextToPrbStr_connectCommitAck =
	     scemi_dut_dut_prb_control_prb_str$FULL_N ;

  // rule RL_scemi_dut_dut_prb_control_receiveTrigger
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger =
	     scemi_dut_dut_prb_control_data_out_next$sRDY &&
	     scemi_init_state_msgFIFO$sFULL_N &&
	     scemi_dut_dut_prb_control_data_out_ok_01_AND_N_ETC___d709 &&
	     scemi_dut_dut_prb_control_enff$FULL_N &&
	     scemi_dut_dut_prb_control_prb_str$EMPTY_N &&
	     scemi_dut_dut_prb_control_count == 16'd0 &&
	     scemi_dut_dut_prb_control_prb_str$D_OUT[15:3] == 13'd8191 ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample ;

  // rule RL_scemi_dut_dut_prb_control_receiveFirstData
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData =
	     scemi_dut_dut_prb_control_data_out_next_RDY_se_ETC___d979 &&
	     scemi_dut_dut_prb_control_count == 16'd0 ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing &&
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger ;

  // rule RL_scemi_dut_dut_prb_control_receiveMoreData
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData =
	     scemi_dut_dut_prb_control_data_out_next_RDY_se_ETC___d979 &&
	     scemi_dut_dut_prb_control_count != 16'd0 ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData ;

  // rule RL_scemi_scan_output_ports
  assign CAN_FIRE_RL_scemi_scan_output_ports = 1'd1 ;
  assign WILL_FIRE_RL_scemi_scan_output_ports = 1'd1 ;

  // rule RL_scemi_dut_dut_prb_control_data_out_setOK
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_data_out_setOK =
	     scemi_dut_dut_prb_control_data_out_finished$dPulse ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_setOK =
	     scemi_dut_dut_prb_control_data_out_finished$dPulse ;

  // rule RL_scemi_dut_dut_prb_control_prb_str_recv_doEnq
  assign CAN_FIRE_RL_scemi_dut_dut_prb_control_prb_str_recv_doEnq =
	     scemi_dut_dut_prb_control_prb_str$FULL_N &&
	     scemi_dut_dut_probeHook$DATAVALID ;
  assign WILL_FIRE_RL_scemi_dut_dut_prb_control_prb_str_recv_doEnq =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_prb_str_recv_doEnq ;

  // rule RL_scemi_clockGenerators_one_to_one_cclock_incr
  assign CAN_FIRE_RL_scemi_clockGenerators_one_to_one_cclock_incr =
	     !CAN_FIRE_RL_scemi_clockGenerators_stall_one_to_one_cclock ;
  assign WILL_FIRE_RL_scemi_clockGenerators_one_to_one_cclock_incr =
	     CAN_FIRE_RL_scemi_clockGenerators_one_to_one_cclock_incr ;

  // rule RL_scemi_fToContinueBeat_ifc_update
  assign CAN_FIRE_RL_scemi_fToContinueBeat_ifc_update = 1'd1 ;
  assign WILL_FIRE_RL_scemi_fToContinueBeat_ifc_update = 1'd1 ;

  // rule RL_scemi_fS1OutPortAcks_ifc_update
  assign CAN_FIRE_RL_scemi_fS1OutPortAcks_ifc_update = 1'd1 ;
  assign WILL_FIRE_RL_scemi_fS1OutPortAcks_ifc_update = 1'd1 ;

  // rule RL_scemi_2_connect_src_rdy
  assign CAN_FIRE_RL_scemi_2_connect_src_rdy = 1'd1 ;
  assign WILL_FIRE_RL_scemi_2_connect_src_rdy = 1'd1 ;

  // rule RL_scemi_2_connect_dst_rdy
  assign CAN_FIRE_RL_scemi_2_connect_dst_rdy = 1'd1 ;
  assign WILL_FIRE_RL_scemi_2_connect_dst_rdy = 1'd1 ;

  // rule RL_scemi_2_connect_data
  assign CAN_FIRE_RL_scemi_2_connect_data = 1'd1 ;
  assign WILL_FIRE_RL_scemi_2_connect_data = 1'd1 ;

  // rule RL_scemi_msg_sink_noc_active_receive_beat_from_bridge
  assign CAN_FIRE_RL_scemi_msg_sink_noc_active_receive_beat_from_bridge =
	     scemi_fFromBridgeBeat_ifc_rDataCount < 6'd32 &&
	     scemi_bridge$is_activated &&
	     NOT_scemi_fFromBridgeBeat_ifc_rDataAvail_576_U_ETC___d1660 &&
	     scemi_bridge$noc_out_src_rdy ;
  assign WILL_FIRE_RL_scemi_msg_sink_noc_active_receive_beat_from_bridge =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_receive_beat_from_bridge ;

  // rule RL_scemi_fFromBridgeBeat_ifc_update
  assign CAN_FIRE_RL_scemi_fFromBridgeBeat_ifc_update = 1'd1 ;
  assign WILL_FIRE_RL_scemi_fFromBridgeBeat_ifc_update = 1'd1 ;

  // rule RL_scemi_2_1_connect_src_rdy
  assign CAN_FIRE_RL_scemi_2_1_connect_src_rdy = 1'd1 ;
  assign WILL_FIRE_RL_scemi_2_1_connect_src_rdy = 1'd1 ;

  // rule RL_scemi_msg_source_noc_inactive
  assign CAN_FIRE_RL_scemi_msg_source_noc_inactive =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_inactive =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;

  // rule RL_scemi_2_1_connect_dst_rdy
  assign CAN_FIRE_RL_scemi_2_1_connect_dst_rdy = 1'd1 ;
  assign WILL_FIRE_RL_scemi_2_1_connect_dst_rdy = 1'd1 ;

  // rule RL_scemi_msg_source_noc_active_move_to_next_output_beat
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_move_to_next_output_beat =
	     scemi_fToBridgeBeat$EMPTY_N && scemi_bridge$is_activated &&
	     scemi_bridge$noc_in_dst_rdy ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_move_to_next_output_beat =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_move_to_next_output_beat ;

  // rule RL_scemi_msg_source_noc_active_dispatch_next_granted_other
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other =
	     scemi_fFromContinueBeat_ifc_rDataCount != 6'd0 &&
	     scemi_fToBridgeBeat$FULL_N &&
	     scemi_bridge$is_activated &&
	     CAN_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages &&
	     scemi_rOutMsgBytes == 8'd0 &&
	     b__h195344 == 2'd0 &&
	     !scemi_fFromContinueBeat_ifc_rDataCount_886_ULT_4___d1992 ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other ;

  // rule RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 =
	     scemi_fS1MsgOut_ifc_rDataCount != 6'd0 &&
	     scemi_fToBridgeBeat$FULL_N &&
	     scemi_bridge$is_activated &&
	     CAN_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages &&
	     scemi_rOutMsgBytes == 8'd0 &&
	     b__h195344 == 2'd1 &&
	     !scemi_fS1MsgOut_ifc_rDataCount_923_ULT_4___d1994 ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 ;

  // rule RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 =
	     scemi_fS2MsgOut_ifc_rDataCount != 6'd0 &&
	     scemi_fToBridgeBeat$FULL_N &&
	     scemi_bridge$is_activated &&
	     CAN_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages &&
	     scemi_rOutMsgBytes == 8'd0 &&
	     b__h195344 == 2'd2 &&
	     !scemi_fS2MsgOut_ifc_rDataCount_960_ULT_4___d1997 ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 ;

  // rule RL_scemi_msg_source_noc_active_continue_other
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_continue_other =
	     scemi_fFromContinueBeat_ifc_rDataCount != 6'd0 &&
	     scemi_fToBridgeBeat$FULL_N &&
	     scemi_bridge$is_activated &&
	     scemi_rOtherMsgOut &&
	     !scemi_rSceMi1MsgOut &&
	     !scemi_rSceMi2MsgOut &&
	     scemi_rOutMsgBytes != 8'd0 &&
	     !scemi_fFromContinueBeat_ifc_rDataCount_886_ULT_4___d1992 ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_continue_other =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_continue_other ;

  // rule RL_scemi_msg_source_noc_active_continue_scemi1
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1 =
	     scemi_fS1MsgOut_ifc_rDataCount != 6'd0 &&
	     scemi_fToBridgeBeat$FULL_N &&
	     scemi_bridge$is_activated &&
	     scemi_rSceMi1MsgOut &&
	     !scemi_rSceMi2MsgOut &&
	     !scemi_rOtherMsgOut &&
	     scemi_rOutMsgBytes != 8'd0 &&
	     !scemi_fS1MsgOut_ifc_rDataCount_923_ULT_4___d1994 ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1 =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1 ;

  // rule RL_scemi_msg_source_noc_active_continue_scemi2
  assign CAN_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2 =
	     scemi_fS2MsgOut_ifc_rDataCount != 6'd0 &&
	     scemi_fToBridgeBeat$FULL_N &&
	     scemi_bridge$is_activated &&
	     scemi_rSceMi2MsgOut &&
	     !scemi_rSceMi1MsgOut &&
	     !scemi_rOtherMsgOut &&
	     scemi_rOutMsgBytes != 8'd0 &&
	     !scemi_fS2MsgOut_ifc_rDataCount_960_ULT_4___d1997 ;
  assign WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2 =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2 ;

  // rule RL_scemi_fFromContinueBeat_ifc_update
  assign CAN_FIRE_RL_scemi_fFromContinueBeat_ifc_update = 1'd1 ;
  assign WILL_FIRE_RL_scemi_fFromContinueBeat_ifc_update = 1'd1 ;

  // rule RL_scemi_fS1MsgOut_ifc_update
  assign CAN_FIRE_RL_scemi_fS1MsgOut_ifc_update = 1'd1 ;
  assign WILL_FIRE_RL_scemi_fS1MsgOut_ifc_update = 1'd1 ;

  // rule RL_scemi_fS2MsgOut_ifc_update
  assign CAN_FIRE_RL_scemi_fS2MsgOut_ifc_update = 1'd1 ;
  assign WILL_FIRE_RL_scemi_fS2MsgOut_ifc_update = 1'd1 ;

  // rule RL_scemi_2_1_connect_data
  assign CAN_FIRE_RL_scemi_2_1_connect_data = 1'd1 ;
  assign WILL_FIRE_RL_scemi_2_1_connect_data = 1'd1 ;

  // rule RL_connectDDR3_connect_requests
  assign CAN_FIRE_RL_connectDDR3_connect_requests =
	     connectDDR3_reqFIFO$dEMPTY_N && ddr3_ctrl_fRequest$FULL_N ;
  assign WILL_FIRE_RL_connectDDR3_connect_requests =
	     CAN_FIRE_RL_connectDDR3_connect_requests ;

  // rule RL_connectDDR3_connect_responses
  assign CAN_FIRE_RL_connectDDR3_connect_responses =
	     connectDDR3_respFIFO$sFULL_N && ddr3_ctrl_fResponse$EMPTY_N ;
  assign WILL_FIRE_RL_connectDDR3_connect_responses =
	     CAN_FIRE_RL_connectDDR3_connect_responses ;

  // rule RL_connectDDR3_connectReqUser_mkConnectionGetPut
  assign CAN_FIRE_RL_connectDDR3_connectReqUser_mkConnectionGetPut =
	     connectDDR3_reqFIFO$sFULL_N && scemi_reqFifo$dEMPTY_N ;
  assign WILL_FIRE_RL_connectDDR3_connectReqUser_mkConnectionGetPut =
	     CAN_FIRE_RL_connectDDR3_connectReqUser_mkConnectionGetPut ;

  // rule RL_connectDDR3_connectRespUser_mkConnectionGetPut
  assign CAN_FIRE_RL_connectDDR3_connectRespUser_mkConnectionGetPut =
	     scemi_respFifo$sFULL_N && connectDDR3_respFIFO$dEMPTY_N ;
  assign WILL_FIRE_RL_connectDDR3_connectRespUser_mkConnectionGetPut =
	     CAN_FIRE_RL_connectDDR3_connectRespUser_mkConnectionGetPut ;

  // inputs to muxes for submodule ports
  assign MUX_scemi_data_req_inport_remaining$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_data_req_inport_update_remaining &&
	     (scemi_data_req_inport_got_beat_pw$whas ||
	      scemi_data_req_inport_wait_sp$dPulse) ;
  assign MUX_scemi_data_req_inport_status$_write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_data_req_inport_port_reset ||
	     WILL_FIRE_RL_scemi_data_req_inport_first_request ;
  assign MUX_scemi_dut_dut_prb_control_control_in_remaining$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_update_remaining &&
	     (scemi_dut_dut_prb_control_control_in_got_beat_pw$whas ||
	      scemi_dut_dut_prb_control_control_in_wait_sp$dPulse) ;
  assign MUX_scemi_dut_dut_prb_control_control_in_status$_write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_port_reset ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_first_request ;
  assign MUX_scemi_dut_dut_prb_control_data_out_beats$_write_1__SEL_3 =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger ;
  assign MUX_scemi_dut_dut_prb_control_enff$enq_1__SEL_1 =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd0 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd1 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd2 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd4 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd5 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd6 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12:0] !=
	      13'h1FFF) &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd1023 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	      3'd3 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] !=
	      2'd2) ;
  assign MUX_scemi_dut_dut_prb_control_enff$enq_1__SEL_3 =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample ;
  assign MUX_scemi_dut_dut_prb_control_nextSample$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag &&
	     { scemi_dut_dut_prb_control_sampleIntervalV_3,
	       scemi_dut_dut_prb_control_sampleIntervalV_2,
	       scemi_dut_dut_prb_control_sampleIntervalV_1,
	       scemi_dut_dut_prb_control_sampleIntervalV } !=
	     32'd0 ;
  assign MUX_scemi_dut_dut_prb_control_nextSample$write_1__SEL_2 =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv__ETC___d908 ;
  assign MUX_scemi_dut_dut_prb_control_pinged$write_1__SEL_3 =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd0 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd1 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd2 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd3 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd4 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd5 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd6 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12:0] ==
	     13'h1FFF ;
  assign MUX_scemi_dut_softrst_req_inport_remaining$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_update_remaining &&
	     (scemi_dut_softrst_req_inport_got_beat_pw$whas ||
	      scemi_dut_softrst_req_inport_wait_sp$dPulse) ;
  assign MUX_scemi_dut_softrst_req_inport_status$_write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_port_reset ||
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_first_request ;
  assign MUX_scemi_fS1OutPortAcks_ifc_rwEnqCount$wset_1__SEL_1 =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header &&
	     scemi_fFromBridgeBeat_ifc_rStorage[31:30] == 2'd3 ;
  assign MUX_scemi_fToBridgeBeat$enq_1__SEL_1 =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_other ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other ;
  assign MUX_scemi_fToBridgeBeat$enq_1__SEL_2 =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 ;
  assign MUX_scemi_fToBridgeBeat$enq_1__SEL_3 =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 ;
  assign MUX_scemi_fToContinueBeat_ifc_rwEnqCount$wset_1__SEL_1 =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb &&
	     scemi_fFromBridgeBeat_ifc_rStorage[31:26] != 6'b101010 &&
	     scemi_fFromBridgeBeat_ifc_rStorage[31:26] != 6'b101011 ;
  assign MUX_scemi_init_state_msgFIFO$enq_1__SEL_1 =
	     WILL_FIRE_RL_scemi_shutdown_ack &&
	     scemi_shutdown_ctrl_in_dataF_rv$port1__read[0] ;
  assign MUX_scemi_init_state_msgFIFO$enq_1__SEL_2 =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger ;
  assign MUX_scemi_lrS1ActiveRequests$write_1__SEL_3 =
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_start_next_request ;
  assign MUX_scemi_rDecodeSceMi$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb &&
	     (scemi_fFromBridgeBeat_ifc_rStorage[31:26] == 6'b101010 ||
	      scemi_fFromBridgeBeat_ifc_rStorage[31:26] == 6'b101011) ;
  assign MUX_scemi_rInMsgBytes$write_1__SEL_2 =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_disregard_packet ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_disregard_packet ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header ;
  assign MUX_scemi_rOtherMsgOut$write_1__SEL_3 =
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 ;
  assign MUX_scemi_rOutMsgBytes$write_1__SEL_4 =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_other ;
  assign MUX_scemi_rS1BitsRem$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     (!scemi_rS1BitsRem_295_ULE_32___d2353 ||
	      !scemi_rS1OutMsgSize_290_ULE_4___d2355) ;
  assign MUX_scemi_rS1MsgInIsAck$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header &&
	     (scemi_fFromBridgeBeat_ifc_rStorage[31:30] == 2'd0 ||
	      scemi_fFromBridgeBeat_ifc_rStorage[31:30] == 2'd3) ;
  assign MUX_scemi_rS1MsgOutDataReq$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutMsgSize_290_ULE_4___d2355 &&
	     scemi_rS1BitsRem_295_ULE_32___d2353 ;
  assign MUX_scemi_rS1MsgOutReqReq$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ;
  assign MUX_scemi_rS1OutDataHeader$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutMsgSize_290_ULE_4___d2355 &&
	     !scemi_rS1BitsRem_295_ULE_32___d2353 ;
  assign MUX_scemi_rSceMi1MsgIn$write_1__SEL_2 =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_disregard_packet ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header ;
  assign MUX_scemi_rSceMi1MsgOut$write_1__SEL_3 =
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other ;
  assign MUX_scemi_rSceMi2MsgIn$write_1__SEL_2 =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_disregard_packet ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb ;
  assign MUX_scemi_rSceMi2MsgOut$write_1__SEL_3 =
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other ;
  assign MUX_scemi_scemi_clkgen_rReset$write_1__SEL_2 =
	     WILL_FIRE_RL_scemi_scemi_clkgen_address_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_restart_state ;
  assign MUX_scemi_scemi_clkgen_rState$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_scemi_clkgen_wait_lock_state &&
	     scemi_scemi_clkgen_mmcm$LOCKED ;
  assign MUX_scemi_shutdown_ctrl_in_remaining$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_update_remaining &&
	     (scemi_shutdown_ctrl_in_got_beat_pw$whas ||
	      scemi_shutdown_ctrl_in_wait_sp$dPulse) ;
  assign MUX_scemi_shutdown_ctrl_in_status$_write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_port_reset ||
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_first_request ;
  assign MUX_scemi_start_inport_remaining$write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_start_inport_update_remaining &&
	     (scemi_start_inport_got_beat_pw$whas ||
	      scemi_start_inport_wait_sp$dPulse) ;
  assign MUX_scemi_start_inport_status$_write_1__SEL_1 =
	     WILL_FIRE_RL_scemi_start_inport_port_reset ||
	     WILL_FIRE_RL_scemi_start_inport_first_request ;
  assign MUX_scemi_count_outport_count$write_1__VAL_1 =
	     scemi_count_outport_decr$whas ? x__h242005 : 2'd2 ;
  assign MUX_scemi_data_req_inport_remaining$write_1__VAL_1 =
	     !scemi_data_req_inport_got_beat_pw$whas ||
	     scemi_data_req_inport_remaining - 1'd1 ;
  assign MUX_scemi_data_resp_outport_count$write_1__VAL_1 =
	     !scemi_data_resp_outport_decr$whas ||
	     scemi_data_resp_outport_count - 1'd1 ;
  assign MUX_scemi_dut_dut_prb_control_control_in_remaining$write_1__VAL_1 =
	     !scemi_dut_dut_prb_control_control_in_got_beat_pw$whas ||
	     scemi_dut_dut_prb_control_control_in_remaining - 1'd1 ;
  assign MUX_scemi_dut_dut_prb_control_count$write_1__VAL_2 =
	     scemi_dut_dut_prb_control_count - 16'd1 ;
  assign MUX_scemi_dut_dut_prb_control_data_out_beats$_write_1__VAL_2 =
	     { CASE_scemi_dut_dut_prb_control_ackFifoD_OUT_B_ETC__q2,
	       scemi_dut_dut_prb_control_ackFifo$D_OUT[15:0] } ;
  assign MUX_scemi_dut_dut_prb_control_data_out_count$write_1__VAL_1 =
	     !scemi_dut_dut_prb_control_data_out_decr$whas ||
	     scemi_dut_dut_prb_control_data_out_count - 1'd1 ;
  assign MUX_scemi_dut_dut_prb_control_enff$enq_1__VAL_1 =
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd1023) ?
	       19'd221178 :
	       { IF_scemi_dut_dut_prb_control_control_in_dataF__ETC___d904,
		 scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[16] ?
		   3'd2 :
		   3'd1 } ;
  assign MUX_scemi_dut_dut_prb_control_enff$enq_1__VAL_2 =
	     { CASE_scemi_dut_dut_prb_control_prb_strD_OUT_B_ETC__q3,
	       scemi_dut_dut_prb_control_prb_str$D_OUT[2:0] } ;
  assign MUX_scemi_dut_dut_prb_control_nextSample$write_1__VAL_1 =
	     scemi_init_state_cycle_stamp +
	     { 32'd0,
	       scemi_dut_dut_prb_control_sampleIntervalV_3,
	       scemi_dut_dut_prb_control_sampleIntervalV_2,
	       scemi_dut_dut_prb_control_sampleIntervalV_1,
	       scemi_dut_dut_prb_control_sampleIntervalV } ;
  assign MUX_scemi_dut_softrst_req_inport_remaining$write_1__VAL_1 =
	     !scemi_dut_softrst_req_inport_got_beat_pw$whas ||
	     scemi_dut_softrst_req_inport_remaining - 1'd1 ;
  assign MUX_scemi_dut_softrst_resp_outport_count$write_1__VAL_1 =
	     !scemi_dut_softrst_resp_outport_decr$whas ||
	     scemi_dut_softrst_resp_outport_count - 1'd1 ;
  assign MUX_scemi_fS1MsgOut_ifc_rwEnqCount$wset_1__VAL_1 =
	     scemi_rS1OutMsgIsCont ? 6'd8 : 6'd16 ;
  assign MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_1 =
	     { 86'd1048576, scemi_rS1RequestedPort, 32'hA8040100 } ;
  assign MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_2 =
	     { 96'd0, value__h243322 } ;
  assign MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_3 =
	     { IF_scemi_rS1OutMsgIsCont_289_THEN_2_CONCAT_sce_ETC___d2306,
	       scemi_rS1BitsRem[5:0],
	       scemi_rS1OutPort,
	       8'd168,
	       scemi_rS1OutMsgSize,
	       16'd256 } ;
  assign MUX_scemi_fS1MsgOut_ifc_rwEnqMask$wset_1__VAL_1 =
	     scemi_rS1OutMsgIsCont ?
	       128'h0000000000000000FFFFFFFFFFFFFFFF :
	       128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ;
  assign MUX_scemi_fS1OutPortAcks_ifc_rwEnqCount$wset_1__VAL_1 =
	     { 1'd0, value__h134037 } ;
  assign MUX_scemi_fS1OutPortAcks_ifc_rwEnqData$wset_1__VAL_1 =
	     { 120'd0, value__h135329 } ;
  assign MUX_scemi_fS1OutPortAcks_ifc_rwEnqMask$wset_1__VAL_1 =
	     { _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[13] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[12] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[11] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[10] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[9] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[8] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[7] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[6] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[5] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[4] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[3] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[2] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[1] ?
		 10'd1023 :
		 10'd0,
	       _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744[0] ?
		 10'd1023 :
		 10'd0 } ;
  assign MUX_scemi_fToContinueBeat_ifc_rwEnqData$wset_1__VAL_1 =
	     { 96'd0, scemi_fFromBridgeBeat_ifc_rStorage[31:0] } ;
  assign MUX_scemi_fifoRxData_elem_0$_write_1__VAL_1 =
	     scemi_fifoRxData_write_block ?
	       scemi_fifoRxData_elem_0 :
	       (scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397 ?
		  scemi_inFifo$D_OUT :
		  scemi_fifoRxData_elem_0) ;
  assign MUX_scemi_fifoRxData_elem_0$_write_1__VAL_2 =
	     scemi_fifoRxData_write_block ?
	       scemi_fifoRxData_elem_0 :
	       { !scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397 &&
		 scemi_fifoRxData_elem_0[80],
		 scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397 ||
		 scemi_fifoRxData_elem_0[79],
		 scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397 ?
		   79'd0 :
		   scemi_fifoRxData_elem_0[78:0] } ;
  assign MUX_scemi_fifoRxData_elem_1$_write_1__VAL_1 =
	     scemi_fifoRxData_write_block ?
	       scemi_fifoRxData_elem_1 :
	       IF_scemi_fifoRxData_elem0_status_1__read__92_E_ETC___d433 ;
  assign MUX_scemi_fifoRxData_elem_1$_write_1__VAL_2 =
	     scemi_fifoRxData_write_block ?
	       scemi_fifoRxData_elem_1 :
	       NOT_scemi_fifoRxData_elem0_status_1__read__92__ETC___d463 ;
  assign MUX_scemi_fifoRxData_elem_2$_write_1__VAL_1 =
	     scemi_fifoRxData_write_block ?
	       (scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408 ?
		  scemi_inFifo$D_OUT :
		  scemi_fifoRxData_elem_2) :
	       scemi_fifoRxData_elem_2 ;
  assign MUX_scemi_fifoRxData_elem_2$_write_1__VAL_2 =
	     scemi_fifoRxData_write_block ?
	       { !scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408 &&
		 scemi_fifoRxData_elem_2[80],
		 scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408 ||
		 scemi_fifoRxData_elem_2[79],
		 scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408 ?
		   79'd0 :
		   scemi_fifoRxData_elem_2[78:0] } :
	       scemi_fifoRxData_elem_2 ;
  assign MUX_scemi_fifoRxData_elem_3$_write_1__VAL_1 =
	     scemi_fifoRxData_write_block ?
	       IF_scemi_fifoRxData_elem1_status_1__read__03_E_ETC___d440 :
	       scemi_fifoRxData_elem_3 ;
  assign MUX_scemi_fifoRxData_elem_3$_write_1__VAL_2 =
	     scemi_fifoRxData_write_block ?
	       NOT_scemi_fifoRxData_elem1_status_1__read__03__ETC___d480 :
	       scemi_fifoRxData_elem_3 ;
  assign MUX_scemi_init_state_msgFIFO$enq_1__VAL_1 =
	     { scemi_init_state_cycle_stamp, 10'd4 } ;
  assign MUX_scemi_init_state_msgFIFO$enq_1__VAL_2 =
	     { scemi_init_state_cycle_stamp, 10'd0 } ;
  assign MUX_scemi_init_state_msgFIFO$enq_1__VAL_3 =
	     { scemi_init_state_cycle_stamp, 10'd1 } ;
  assign MUX_scemi_init_state_msgFIFO$enq_1__VAL_4 =
	     { scemi_init_state_cycle_stamp, 10'd2 } ;
  assign MUX_scemi_init_state_msgFIFO$enq_1__VAL_5 =
	     { scemi_init_state_cycle_stamp, 10'd3 } ;
  assign MUX_scemi_lrS1PendingRequests$write_1__VAL_2 =
	     scemi_lrS1PendingRequests ||
	     scemi_dut_dut_prb_control_control_in_next_sp$dPulse ;
  assign MUX_scemi_lrS1PendingRequests_1$write_1__VAL_2 =
	     scemi_lrS1PendingRequests_1 ||
	     scemi_dut_softrst_req_inport_next_sp$dPulse ;
  assign MUX_scemi_lrS1PendingRequests_2$write_1__VAL_2 =
	     scemi_lrS1PendingRequests_2 ||
	     scemi_data_req_inport_next_sp$dPulse ;
  assign MUX_scemi_lrS1PendingRequests_3$write_1__VAL_2 =
	     scemi_lrS1PendingRequests_3 ||
	     scemi_start_inport_next_sp$dPulse ;
  assign MUX_scemi_lrS1PendingRequests_4$write_1__VAL_2 =
	     scemi_lrS1PendingRequests_4 ||
	     scemi_shutdown_ctrl_in_next_sp$dPulse ;
  assign MUX_scemi_rInMsgBytes$write_1__VAL_2 =
	     scemi_rInMsgBytes_678_ULE_4___d1721 ?
	       8'd0 :
	       scemi_rInMsgBytes - 8'd4 ;
  assign MUX_scemi_rOtherMsgIn$write_1__VAL_2 =
	     scemi_fFromBridgeBeat_ifc_rStorage[31:26] != 6'b101010 &&
	     scemi_fFromBridgeBeat_ifc_rStorage[31:26] != 6'b101011 ;
  assign MUX_scemi_rOutMsgBytes$write_1__VAL_4 =
	     scemi_rOutMsgBytes_989_ULE_4___d2183 ?
	       8'd0 :
	       scemi_rOutMsgBytes - 8'd4 ;
  assign MUX_scemi_rS1BitsRem$write_1__VAL_1 = scemi_rS1BitsRem - 19'd32 ;
  always@(scemi_init_state_msgFIFO$dD_OUT)
  begin
    case (scemi_init_state_msgFIFO$dD_OUT[9:0])
      10'd0: MUX_scemi_rS1BitsRem$write_1__VAL_2 = 19'd32;
      10'd1: MUX_scemi_rS1BitsRem$write_1__VAL_2 = 19'd1;
      10'd2: MUX_scemi_rS1BitsRem$write_1__VAL_2 = 19'd4;
      10'd3: MUX_scemi_rS1BitsRem$write_1__VAL_2 = 19'd64;
      default: MUX_scemi_rS1BitsRem$write_1__VAL_2 = 19'd1;
    endcase
  end
  assign MUX_scemi_rS1MsgInIsAck$write_1__VAL_1 =
	     scemi_fFromBridgeBeat_ifc_rStorage[31:30] != 2'd0 &&
	     !scemi_rInMsgBytes_678_ULE_4___d1721 ;
  assign MUX_scemi_rS1MsgInIsData$write_1__VAL_1 =
	     scemi_fFromBridgeBeat_ifc_rStorage[31:30] == 2'd0 &&
	     !scemi_rInMsgBytes_678_ULE_4___d1721 ;
  assign MUX_scemi_rS1OutMsgSize$write_1__VAL_1 =
	     scemi_rS1OutMsgSize_290_ULE_4___d2355 ?
	       ((scemi_rS1BitsRem < 19'd2016) ?
		  8'd4 + scemi_rS1BitsRem_MINUS_25_SRL_3__q4[7:0] :
		  8'd252) :
	       scemi_rS1OutMsgSize_290_MINUS_4___d2291 ;
  assign MUX_scemi_rS1OutMsgSize$write_1__VAL_2 =
	     8'd12 +
	     MUX_scemi_rS1BitsRemwrite_1__VAL_2_PLUS_7_SRL_3__q5[7:0] ;
  assign MUX_scemi_rS1OutMsgSize$write_1__VAL_3 =
	     scemi_rS1OutMsgIsCont ?
	       scemi_rS1OutMsgSize_290_MINUS_4___d2291 :
	       scemi_rS1OutMsgSize - 8'd12 ;
  assign MUX_scemi_rS1RequestedPort$write_1__VAL_1 =
	     scemi_rS1RequestedPort + 10'd1 ;
  assign MUX_scemi_rSendInvalid$write_1__VAL_1 =
	     !scemi_rOddBeat && scemi_inFifo$D_OUT[79] ;
  assign MUX_scemi_rvPrevMsgGrant$write_1__VAL_1 =
	     (IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 !=
	      2'd0 &&
	      IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2050) ?
	       3'd1 :
	       IF_NOT_IF_scemi_fFromContinueBeat_ifc_rDataCou_ETC___d2103 ;
  always@(scemi_scemi_clkgen_rCount)
  begin
    case (scemi_scemi_clkgen_rCount)
      5'd0: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h4F;
      5'd1: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h4E;
      5'd2: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h1A;
      5'd3: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h19;
      5'd4: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h18;
      5'd5: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h15;
      5'd6: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h14;
      5'd7: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h16;
      5'd8: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h13;
      5'd9: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h12;
      5'd10: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h07;
      5'd11: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h06;
      5'd12: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h11;
      5'd13: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h10;
      5'd14: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h0F;
      5'd15: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h0E;
      5'd16: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h0D;
      5'd17: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h0C;
      5'd18: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h0B;
      5'd19: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h0A;
      5'd20: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h09;
      5'd21: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h08;
      5'd22: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h28;
      default: MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 = 7'h0;
    endcase
  end
  assign MUX_scemi_scemi_clkgen_rCount$write_1__VAL_1 =
	     scemi_scemi_clkgen_rCount - 5'd1 ;
  assign MUX_scemi_scemi_clkgen_rState$write_1__VAL_2 =
	     (scemi_scemi_clkgen_rCount == 5'd0) ? 3'd1 : 3'd3 ;
  assign MUX_scemi_scemi_clkgen_rWrData$write_1__VAL_1 =
	     x__h13993 | y__h13994 ;
  assign MUX_scemi_shutdown_ctrl_in_remaining$write_1__VAL_1 =
	     !scemi_shutdown_ctrl_in_got_beat_pw$whas ||
	     scemi_shutdown_ctrl_in_remaining - 1'd1 ;
  assign MUX_scemi_shutdown_ctrl_out_count$write_1__VAL_1 =
	     !scemi_shutdown_ctrl_out_decr$whas ||
	     scemi_shutdown_ctrl_out_count - 1'd1 ;
  assign MUX_scemi_start_inport_remaining$write_1__VAL_1 =
	     !scemi_start_inport_got_beat_pw$whas ||
	     scemi_start_inport_remaining - 1'd1 ;

  // probes
  assign scemi_count_outport_okToSend$PROBE =
	     scemi_count_outport_ok_338_AND_NOT_scemi_init__ETC___d1342 ;
  assign scemi_count_outport_okToSend$PROBE_VALID = 1'd1 ;
  assign scemi_data_resp_outport_okToSend$PROBE =
	     scemi_data_resp_outport_ok_232_AND_NOT_scemi_i_ETC___d1236 ;
  assign scemi_data_resp_outport_okToSend$PROBE_VALID = 1'd1 ;
  assign scemi_dut_dut_prb_control_data_out_okToSend$PROBE =
	     scemi_dut_dut_prb_control_data_out_ok_01_AND_N_ETC___d709 ;
  assign scemi_dut_dut_prb_control_data_out_okToSend$PROBE_VALID = 1'd1 ;
  assign scemi_dut_dut_prb_control_dutclkctrl_allowNeg$PROBE =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_do_ticks ;
  assign scemi_dut_dut_prb_control_dutclkctrl_allowNeg$PROBE_VALID = 1'd1 ;
  assign scemi_dut_dut_prb_control_dutclkctrl_allowPos$PROBE =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_do_ticks ;
  assign scemi_dut_dut_prb_control_dutclkctrl_allowPos$PROBE_VALID = 1'd1 ;
  assign scemi_dut_softrst_resp_outport_okToSend$PROBE =
	     scemi_dut_softrst_resp_outport_ok_122_AND_NOT__ETC___d1126 ;
  assign scemi_dut_softrst_resp_outport_okToSend$PROBE_VALID = 1'd1 ;
  assign scemi_shutdown_ctrl_out_okToSend$PROBE =
	     scemi_shutdown_ctrl_out_ok_435_AND_NOT_scemi_i_ETC___d1439 ;
  assign scemi_shutdown_ctrl_out_okToSend$PROBE_VALID = 1'd1 ;

  // inlined wires
  assign ddr3_ctrl_wAppCmd$whas =
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_first ||
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_read_request ;
  assign ddr3_ctrl_wAppWdfMask$whas =
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_first ||
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_second ;
  assign scemi_scemi_clkgen_rSel_1$whas =
	     WILL_FIRE_RL_scemi_scemi_clkgen_restart_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_write_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_address_state ;
  assign scemi_scemi_clkgen_rWrEn_1$whas =
	     WILL_FIRE_RL_scemi_scemi_clkgen_restart_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_write_state ;
  assign scemi_fFromBridgeBeat_ifc_rwDeqCount$whas =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_disregard_packet ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_disregard_packet ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb ;
  assign scemi_fFromBridgeBeat_ifc_rwEnqData$wget =
	     { 96'd0, scemi_bridge$noc_out_beat } ;
  assign scemi_fToContinueBeat_ifc_rwEnqCount$whas =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb &&
	     scemi_fFromBridgeBeat_ifc_rStorage[31:26] != 6'b101010 &&
	     scemi_fFromBridgeBeat_ifc_rStorage[31:26] != 6'b101011 ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data ;
  assign scemi_fToContinueBeat_ifc_rwEnqData$wget =
	     MUX_scemi_fToContinueBeat_ifc_rwEnqCount$wset_1__SEL_1 ?
	       MUX_scemi_fToContinueBeat_ifc_rwEnqData$wset_1__VAL_1 :
	       scemi_fFromBridgeBeat_ifc_rStorage[127:0] ;
  assign scemi_fS1OutPortAcks_ifc_rwEnqCount$wget =
	     MUX_scemi_fS1OutPortAcks_ifc_rwEnqCount$wset_1__SEL_1 ?
	       MUX_scemi_fS1OutPortAcks_ifc_rwEnqCount$wset_1__VAL_1 :
	       MUX_scemi_fS1OutPortAcks_ifc_rwEnqCount$wset_1__VAL_1 ;
  assign scemi_fS1OutPortAcks_ifc_rwEnqCount$whas =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header &&
	     scemi_fFromBridgeBeat_ifc_rStorage[31:30] == 2'd3 ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb ;
  assign scemi_fS1OutPortAcks_ifc_rwEnqData$wget =
	     MUX_scemi_fS1OutPortAcks_ifc_rwEnqCount$wset_1__SEL_1 ?
	       MUX_scemi_fS1OutPortAcks_ifc_rwEnqData$wset_1__VAL_1 :
	       MUX_scemi_fS1OutPortAcks_ifc_rwEnqData$wset_1__VAL_1 ;
  assign scemi_fS1OutPortAcks_ifc_rwEnqMask$wget =
	     MUX_scemi_fS1OutPortAcks_ifc_rwEnqCount$wset_1__SEL_1 ?
	       MUX_scemi_fS1OutPortAcks_ifc_rwEnqMask$wset_1__VAL_1 :
	       MUX_scemi_fS1OutPortAcks_ifc_rwEnqMask$wset_1__VAL_1 ;
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header or
	  MUX_scemi_fS1MsgOut_ifc_rwEnqCount$wset_1__VAL_1 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header:
	  scemi_fS1MsgOut_ifc_rwEnqCount$wget =
	      MUX_scemi_fS1MsgOut_ifc_rwEnqCount$wset_1__VAL_1;
      WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data:
	  scemi_fS1MsgOut_ifc_rwEnqCount$wget = 6'd4;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message:
	  scemi_fS1MsgOut_ifc_rwEnqCount$wget = 6'd8;
      default: scemi_fS1MsgOut_ifc_rwEnqCount$wget =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  assign scemi_fS1MsgOut_ifc_rwEnqCount$whas =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message ;
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message or
	  MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_1 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data or
	  MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_2 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header or
	  MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message:
	  scemi_fS1MsgOut_ifc_rwEnqData$wget =
	      MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_1;
      WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data:
	  scemi_fS1MsgOut_ifc_rwEnqData$wget =
	      MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_2;
      WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header:
	  scemi_fS1MsgOut_ifc_rwEnqData$wget =
	      MUX_scemi_fS1MsgOut_ifc_rwEnqData$wset_1__VAL_3;
      default: scemi_fS1MsgOut_ifc_rwEnqData$wget =
		   128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign scemi_fS1MsgOut_ifc_rwEnqData$whas =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header ;
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header or
	  MUX_scemi_fS1MsgOut_ifc_rwEnqMask$wset_1__VAL_1 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header:
	  scemi_fS1MsgOut_ifc_rwEnqMask$wget =
	      MUX_scemi_fS1MsgOut_ifc_rwEnqMask$wset_1__VAL_1;
      WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data:
	  scemi_fS1MsgOut_ifc_rwEnqMask$wget =
	      128'h000000000000000000000000FFFFFFFF;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message:
	  scemi_fS1MsgOut_ifc_rwEnqMask$wget =
	      128'h0000000000000000FFFFFFFFFFFFFFFF;
      default: scemi_fS1MsgOut_ifc_rwEnqMask$wget =
		   128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ddr3_ctrl_pwAppEn$whas =
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_read_request ||
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_first ;
  assign ddr3_ctrl_pwAppWdfWren$whas =
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_second ||
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_first ;
  assign scemi_fifoRxData_pwEnqueue$whas =
	     WILL_FIRE_RL_scemi_send_invalid_packets ||
	     WILL_FIRE_RL_scemi_process_incoming_packets ;
  assign scemi_dut_dut_prb_control_data_out_decr$whas =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutPort == 10'd0 &&
	     scemi_dut_dut_prb_control_data_out_count ;
  assign scemi_dut_dut_prb_control_control_in_got_beat_pw$whas =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data &&
	     scemi_rS1InPortNum == 10'd0 &&
	     scemi_dut_dut_prb_control_control_in_remaining ;
  assign scemi_dut_softrst_req_inport_got_beat_pw$whas =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data &&
	     scemi_rS1InPortNum == 10'd1 &&
	     scemi_dut_softrst_req_inport_remaining ;
  assign scemi_dut_softrst_resp_outport_decr$whas =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutPort == 10'd1 &&
	     scemi_dut_softrst_resp_outport_count ;
  assign scemi_data_req_inport_got_beat_pw$whas =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data &&
	     scemi_rS1InPortNum == 10'd2 &&
	     scemi_data_req_inport_remaining ;
  assign scemi_data_resp_outport_decr$whas =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutPort == 10'd2 &&
	     scemi_data_resp_outport_count ;
  assign scemi_start_inport_got_beat_pw$whas =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data &&
	     scemi_rS1InPortNum == 10'd3 &&
	     scemi_start_inport_remaining ;
  assign scemi_count_outport_decr$whas =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutPort == 10'd3 &&
	     scemi_count_outport_count != 2'd0 ;
  assign scemi_shutdown_ctrl_in_got_beat_pw$whas =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data &&
	     scemi_rS1InPortNum == 10'd4 &&
	     scemi_shutdown_ctrl_in_remaining ;
  assign scemi_shutdown_ctrl_out_decr$whas =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutPort == 10'd4 &&
	     scemi_shutdown_ctrl_out_count ;
  assign scemi_fAxiTx_rv$EN_port0__write =
	     WILL_FIRE_RL_scemi_1_send_data &&
	     scemi_1_outFifo$D_OUT[71:64] != 8'd0 ;
  assign scemi_fAxiTx_rv$port0__write_1 =
	     { 1'd1,
	       scemi_1_outFifo$D_OUT[79],
	       v_keep__h36358,
	       v_data__h36359 } ;
  assign scemi_fAxiTx_rv$port1__read =
	     scemi_fAxiTx_rv$EN_port0__write ?
	       scemi_fAxiTx_rv$port0__write_1 :
	       scemi_fAxiTx_rv ;
  assign scemi_fAxiTx_rv$port2__read =
	     CAN_FIRE_RL_scemi_drive_axi_tx_info ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       scemi_fAxiTx_rv$port1__read ;
  assign scemi_fAxiRx_rv$port0__write_1 =
	     { 1'd1,
	       scemi_pcie_ep$m_axis_rx_tuser,
	       scemi_pcie_ep$m_axis_rx_tlast,
	       scemi_pcie_ep$m_axis_rx_tkeep,
	       scemi_pcie_ep$m_axis_rx_tdata } ;
  assign scemi_fAxiRx_rv$port1__read =
	     CAN_FIRE_RL_scemi_sink_axi_rx ?
	       scemi_fAxiRx_rv$port0__write_1 :
	       scemi_fAxiRx_rv ;
  assign scemi_fAxiRx_rv$port2__read =
	     CAN_FIRE_RL_scemi_accept_data ?
	       96'h2AAAAAAAAAAAAAAAAAAAAAAA :
	       scemi_fAxiRx_rv$port1__read ;
  assign scemi_dut_dut_prb_control_control_in_requestF_rv$port1__read =
	     !CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive &&
	     scemi_dut_dut_prb_control_control_in_requestF_rv ;
  assign scemi_dut_dut_prb_control_control_in_dataF_rv$port0__write_1 =
	     { 1'd1,
	       scemi_dut_dut_prb_control_control_in_scemiInportBeats[16],
	       CASE_scemi_dut_dut_prb_control_control_in_scem_ETC__q6 } ;
  assign scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_control_in_receive ?
	       scemi_dut_dut_prb_control_control_in_dataF_rv$port0__write_1 :
	       scemi_dut_dut_prb_control_control_in_dataF_rv ;
  assign scemi_dut_dut_prb_control_control_in_dataF_rv$port2__read =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl ?
	       18'd43690 :
	       scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read ;
  assign scemi_dut_softrst_req_inport_requestF_rv$port1__read =
	     !CAN_FIRE_RL_scemi_dut_softrst_req_inport_receive &&
	     scemi_dut_softrst_req_inport_requestF_rv ;
  assign scemi_dut_softrst_req_inport_dataF_rv$port0__write_1 =
	     { 1'd1, scemi_dut_softrst_req_inport_scemiInportBeats[0] } ;
  assign scemi_dut_softrst_req_inport_dataF_rv$port1__read =
	     CAN_FIRE_RL_scemi_dut_softrst_req_inport_receive ?
	       scemi_dut_softrst_req_inport_dataF_rv$port0__write_1 :
	       scemi_dut_softrst_req_inport_dataF_rv ;
  assign scemi_dut_softrst_req_inport_dataF_rv$port2__read =
	     CAN_FIRE_RL_scemi_dut_softrst_req_connect_res_mkConnectionGetPut ?
	       2'd0 :
	       scemi_dut_softrst_req_inport_dataF_rv$port1__read ;
  assign scemi_data_req_inport_requestF_rv$port1__read =
	     !CAN_FIRE_RL_scemi_data_req_inport_receive &&
	     scemi_data_req_inport_requestF_rv ;
  assign scemi_data_req_inport_dataF_rv$port0__write_1 =
	     { 1'd1, scemi_data_req_inport_scemiInportBeats[3:0] } ;
  assign scemi_data_req_inport_dataF_rv$port1__read =
	     CAN_FIRE_RL_scemi_data_req_inport_receive ?
	       scemi_data_req_inport_dataF_rv$port0__write_1 :
	       scemi_data_req_inport_dataF_rv ;
  assign scemi_data_req_inport_dataF_rv$port2__read =
	     CAN_FIRE_RL_scemi_data_req_connect_res_mkConnectionGetPut ?
	       5'd10 :
	       scemi_data_req_inport_dataF_rv$port1__read ;
  assign scemi_start_inport_requestF_rv$port1__read =
	     !CAN_FIRE_RL_scemi_start_inport_receive &&
	     scemi_start_inport_requestF_rv ;
  assign scemi_start_inport_dataF_rv$port0__write_1 =
	     { 1'd1, scemi_start_inport_scemiInportBeats[0] } ;
  assign scemi_start_inport_dataF_rv$port1__read =
	     CAN_FIRE_RL_scemi_start_inport_receive ?
	       scemi_start_inport_dataF_rv$port0__write_1 :
	       scemi_start_inport_dataF_rv ;
  assign scemi_start_inport_dataF_rv$port2__read =
	     CAN_FIRE_RL_scemi_start_connect_res_mkConnectionGetPut ?
	       2'd0 :
	       scemi_start_inport_dataF_rv$port1__read ;
  assign scemi_shutdown_ctrl_in_requestF_rv$port1__read =
	     !CAN_FIRE_RL_scemi_shutdown_ctrl_in_receive &&
	     scemi_shutdown_ctrl_in_requestF_rv ;
  assign scemi_shutdown_ctrl_in_dataF_rv$port0__write_1 =
	     { 1'd1, scemi_shutdown_ctrl_in_scemiInportBeats[0] } ;
  assign scemi_shutdown_ctrl_in_dataF_rv$port1__read =
	     CAN_FIRE_RL_scemi_shutdown_ctrl_in_receive ?
	       scemi_shutdown_ctrl_in_dataF_rv$port0__write_1 :
	       scemi_shutdown_ctrl_in_dataF_rv ;
  assign scemi_shutdown_ctrl_in_dataF_rv$port2__read =
	     WILL_FIRE_RL_scemi_shutdown_ack ?
	       2'd0 :
	       scemi_shutdown_ctrl_in_dataF_rv$port1__read ;

  // register ddr3_ctrl_dly_reset_n_count
  assign ddr3_ctrl_dly_reset_n_count$D_IN =
	     ddr3_ctrl_dly_reset_n_count - 32'd1 ;
  assign ddr3_ctrl_dly_reset_n_count$EN =
	     CAN_FIRE_RL_ddr3_ctrl_dly_reset_n_count_down ;

  // register ddr3_ctrl_rDeqWriteReq
  assign ddr3_ctrl_rDeqWriteReq$D_IN =
	     !WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_second ;
  assign ddr3_ctrl_rDeqWriteReq$EN = ddr3_ctrl_pwAppWdfWren$whas ;

  // register ddr3_ctrl_rEnqReadResp
  assign ddr3_ctrl_rEnqReadResp$D_IN =
	     !WILL_FIRE_RL_ddr3_ctrl_ready_process_read_response_second ;
  assign ddr3_ctrl_rEnqReadResp$EN =
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_read_response_second ||
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_read_response_first ;

  // register ddr3_ctrl_rFirstResponse
  assign ddr3_ctrl_rFirstResponse$D_IN = ddr3_ctrl$app_rd_data ;
  assign ddr3_ctrl_rFirstResponse$EN =
	     CAN_FIRE_RL_ddr3_ctrl_ready_process_read_response_first ;

  // register scemi_1_fifoTxData_block0
  assign scemi_1_fifoTxData_block0$D_IN =
	     { 1'd0,
	       scemi_bridge$tlps_fst_get[151:144],
	       scemi_bridge$tlps_fst_get[135:128],
	       scemi_bridge$tlps_fst_get[63:0],
	       scemi_bridge$tlps_fst_get[152],
	       scemi_bridge$tlps_fst_get[135:128] == 8'd0 &&
	       scemi_bridge$tlps_fst_get[151],
	       scemi_bridge$tlps_fst_get[150:136],
	       scemi_bridge$tlps_fst_get[127:64] } ;
  assign scemi_1_fifoTxData_block0$EN =
	     WILL_FIRE_RL_scemi_1_get_data &&
	     !scemi_1_fifoTxData_write_block ;

  // register scemi_1_fifoTxData_block0_status
  assign scemi_1_fifoTxData_block0_status$D_IN =
	     !scemi_1_fifoTxData_block0_status ;
  assign scemi_1_fifoTxData_block0_status$EN =
	     WILL_FIRE_RL_scemi_1_get_data &&
	     !scemi_1_fifoTxData_write_block ;

  // register scemi_1_fifoTxData_block1
  assign scemi_1_fifoTxData_block1$D_IN =
	     { 1'd0,
	       scemi_bridge$tlps_fst_get[151:144],
	       scemi_bridge$tlps_fst_get[135:128],
	       scemi_bridge$tlps_fst_get[63:0],
	       scemi_bridge$tlps_fst_get[152],
	       scemi_bridge$tlps_fst_get[135:128] == 8'd0 &&
	       scemi_bridge$tlps_fst_get[151],
	       scemi_bridge$tlps_fst_get[150:136],
	       scemi_bridge$tlps_fst_get[127:64] } ;
  assign scemi_1_fifoTxData_block1$EN =
	     WILL_FIRE_RL_scemi_1_get_data && scemi_1_fifoTxData_write_block ;

  // register scemi_1_fifoTxData_block1_status
  assign scemi_1_fifoTxData_block1_status$D_IN =
	     !scemi_1_fifoTxData_block1_status ;
  assign scemi_1_fifoTxData_block1_status$EN =
	     WILL_FIRE_RL_scemi_1_get_data && scemi_1_fifoTxData_write_block ;

  // register scemi_1_fifoTxData_dInReset_pre_isInReset
  assign scemi_1_fifoTxData_dInReset_pre_isInReset$D_IN = 1'd0 ;
  assign scemi_1_fifoTxData_dInReset_pre_isInReset$EN =
	     scemi_1_fifoTxData_dInReset_pre_isInReset ;

  // register scemi_1_fifoTxData_elem0_status_0
  assign scemi_1_fifoTxData_elem0_status_0$D_IN =
	     scemi_1_fifoTxData_block0_status ;
  assign scemi_1_fifoTxData_elem0_status_0$EN =
	     WILL_FIRE_RL_scemi_1_process_outgoing_packets &&
	     !scemi_1_fifoTxData_read_block ;

  // register scemi_1_fifoTxData_elem0_status_1
  assign scemi_1_fifoTxData_elem0_status_1$D_IN =
	     scemi_1_fifoTxData_elem0_status_0 ;
  assign scemi_1_fifoTxData_elem0_status_1$EN =
	     WILL_FIRE_RL_scemi_1_process_outgoing_packets &&
	     !scemi_1_fifoTxData_read_block ;

  // register scemi_1_fifoTxData_elem1_status_0
  assign scemi_1_fifoTxData_elem1_status_0$D_IN =
	     scemi_1_fifoTxData_block1_status ;
  assign scemi_1_fifoTxData_elem1_status_0$EN =
	     WILL_FIRE_RL_scemi_1_process_outgoing_packets &&
	     scemi_1_fifoTxData_read_block ;

  // register scemi_1_fifoTxData_elem1_status_1
  assign scemi_1_fifoTxData_elem1_status_1$D_IN =
	     scemi_1_fifoTxData_elem1_status_0 ;
  assign scemi_1_fifoTxData_elem1_status_1$EN =
	     WILL_FIRE_RL_scemi_1_process_outgoing_packets &&
	     scemi_1_fifoTxData_read_block ;

  // register scemi_1_fifoTxData_read_block
  assign scemi_1_fifoTxData_read_block$D_IN = !scemi_1_fifoTxData_read_block ;
  assign scemi_1_fifoTxData_read_block$EN =
	     WILL_FIRE_RL_scemi_1_process_outgoing_packets &&
	     (scemi_1_fifoTxData_read_block &&
	      scemi_1_fifoTxData_elem1_status_0__read__97_EQ_ETC___d598 ||
	      !scemi_1_fifoTxData_read_block &&
	      scemi_1_fifoTxData_elem0_status_0__read__88_EQ_ETC___d589) ;

  // register scemi_1_fifoTxData_sInReset_pre_isInReset
  assign scemi_1_fifoTxData_sInReset_pre_isInReset$D_IN = 1'd0 ;
  assign scemi_1_fifoTxData_sInReset_pre_isInReset$EN =
	     scemi_1_fifoTxData_sInReset_pre_isInReset ;

  // register scemi_1_fifoTxData_write_block
  assign scemi_1_fifoTxData_write_block$D_IN =
	     ~scemi_1_fifoTxData_write_block ;
  assign scemi_1_fifoTxData_write_block$EN = CAN_FIRE_RL_scemi_1_get_data ;

  // register scemi_clk_port_rstgen_init
  assign scemi_clk_port_rstgen_init$D_IN = 1'd1 ;
  assign scemi_clk_port_rstgen_init$EN =
	     CAN_FIRE_RL_scemi_clk_port_rstgen_trigger ;

  // register scemi_clockGenerators_clock_gens_counters_count
  assign scemi_clockGenerators_clock_gens_counters_count$D_IN =
	     IF_scemi_clockGenerators_clock_gens_counters_c_ETC___d1480 ;
  assign scemi_clockGenerators_clock_gens_counters_count$EN =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_incr ;

  // register scemi_clockGenerators_clock_gens_out_of_reset_reg
  assign scemi_clockGenerators_clock_gens_out_of_reset_reg$D_IN =
	     !scemi_clockGenerators_clock_gens_reset_counter_ETC___d1490 ;
  assign scemi_clockGenerators_clock_gens_out_of_reset_reg$EN =
	     scemi_clockGenerators_clock_gens_reset_counter_ETC___d1490 ||
	     !scemi_clockGenerators_clock_gens_out_of_reset_reg &&
	     scemi_clockGenerators_clock_gens_counters_count == 32'd0 ;

  // register scemi_clockGenerators_clock_gens_reset_counter
  assign scemi_clockGenerators_clock_gens_reset_counter$D_IN =
	     scemi_clockGenerators_clock_gens_reset_counter + 32'd1 ;
  assign scemi_clockGenerators_clock_gens_reset_counter$EN =
	     scemi_clockGenerators_clock_gens_reset_counter_ETC___d1490 ;

  // register scemi_clockGenerators_clock_gens_stalled
  assign scemi_clockGenerators_clock_gens_stalled$D_IN =
	     scemi_clockGenerators_clock_gens_counters_count == 32'd0 &&
	     !ab__h89164[1] ;
  assign scemi_clockGenerators_clock_gens_stalled$EN =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_update_stalled ;

  // register scemi_clockGenerators_free_stamp
  assign scemi_clockGenerators_free_stamp$D_IN =
	     NOT_scemi_clockGenerators_clock_gens_in_reset__ETC___d1535 ;
  assign scemi_clockGenerators_free_stamp$EN =
	     CAN_FIRE_RL_scemi_clockGenerators_track_reset ;

  // register scemi_clockGenerators_one_to_one_cclock_count
  assign scemi_clockGenerators_one_to_one_cclock_count$D_IN =
	     IF_scemi_clockGenerators_one_to_one_cclock_cou_ETC___d1530 ;
  assign scemi_clockGenerators_one_to_one_cclock_count$EN =
	     CAN_FIRE_RL_scemi_clockGenerators_one_to_one_cclock_incr ;

  // register scemi_count_outport_beats
  assign scemi_count_outport_beats$D_IN = scemi_count_res_fifo$dD_OUT[31:0] ;
  assign scemi_count_outport_beats$EN =
	     CAN_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut ;

  // register scemi_count_outport_beats_1
  assign scemi_count_outport_beats_1$D_IN =
	     scemi_count_res_fifo$dD_OUT[63:32] ;
  assign scemi_count_outport_beats_1$EN =
	     CAN_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut ;

  // register scemi_count_outport_count
  assign scemi_count_outport_count$D_IN =
	     WILL_FIRE_RL_scemi_count_outport_update_count ?
	       MUX_scemi_count_outport_count$write_1__VAL_1 :
	       2'd0 ;
  assign scemi_count_outport_count$EN =
	     WILL_FIRE_RL_scemi_count_outport_update_count ||
	     scemi_count_outport_in_reset_noc ;

  // register scemi_count_outport_in_reset_noc
  assign scemi_count_outport_in_reset_noc$D_IN =
	     !WILL_FIRE_RL_scemi_count_outport_complete_reset_sequence ;
  assign scemi_count_outport_in_reset_noc$EN =
	     WILL_FIRE_RL_scemi_count_outport_complete_reset_sequence ||
	     WILL_FIRE_RL_scemi_count_outport_initiate_reset_sequence ;

  // register scemi_count_outport_in_reset_uclk
  assign scemi_count_outport_in_reset_uclk$D_IN = 1'd0 ;
  assign scemi_count_outport_in_reset_uclk$EN =
	     scemi_count_outport_in_reset_uclk ;

  // register scemi_count_outport_ok
  assign scemi_count_outport_ok$D_IN = scemi_count_outport_finished$dPulse ;
  assign scemi_count_outport_ok$EN =
	     WILL_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut ||
	     scemi_count_outport_finished$dPulse ;

  // register scemi_count_outport_prev_reset_uclk
  assign scemi_count_outport_prev_reset_uclk$D_IN =
	     scemi_count_outport_in_reset_uclk ;
  assign scemi_count_outport_prev_reset_uclk$EN = 1'd1 ;

  // register scemi_data_req_inport_dataF_rv
  assign scemi_data_req_inport_dataF_rv$D_IN =
	     scemi_data_req_inport_dataF_rv$port2__read ;
  assign scemi_data_req_inport_dataF_rv$EN = 1'b1 ;

  // register scemi_data_req_inport_in_reset_noc
  assign scemi_data_req_inport_in_reset_noc$D_IN =
	     !WILL_FIRE_RL_scemi_data_req_inport_complete_reset_sequence ;
  assign scemi_data_req_inport_in_reset_noc$EN =
	     WILL_FIRE_RL_scemi_data_req_inport_complete_reset_sequence ||
	     WILL_FIRE_RL_scemi_data_req_inport_initiate_reset_sequence ;

  // register scemi_data_req_inport_in_reset_uclk
  assign scemi_data_req_inport_in_reset_uclk$D_IN = 1'd0 ;
  assign scemi_data_req_inport_in_reset_uclk$EN =
	     scemi_data_req_inport_in_reset_uclk ;

  // register scemi_data_req_inport_prev_reset_uclk
  assign scemi_data_req_inport_prev_reset_uclk$D_IN =
	     scemi_data_req_inport_in_reset_uclk ;
  assign scemi_data_req_inport_prev_reset_uclk$EN = 1'd1 ;

  // register scemi_data_req_inport_remaining
  assign scemi_data_req_inport_remaining$D_IN =
	     MUX_scemi_data_req_inport_remaining$write_1__SEL_1 &&
	     MUX_scemi_data_req_inport_remaining$write_1__VAL_1 ;
  assign scemi_data_req_inport_remaining$EN =
	     WILL_FIRE_RL_scemi_data_req_inport_update_remaining &&
	     (scemi_data_req_inport_got_beat_pw$whas ||
	      scemi_data_req_inport_wait_sp$dPulse) ||
	     scemi_data_req_inport_in_reset_noc ;

  // register scemi_data_req_inport_requestF_rv
  assign scemi_data_req_inport_requestF_rv$D_IN = 1'b1 ;
  assign scemi_data_req_inport_requestF_rv$EN = 1'b1 ;

  // register scemi_data_req_inport_scemiInportBeats
  assign scemi_data_req_inport_scemiInportBeats$D_IN =
	     scemi_fFromBridgeBeat_ifc_rStorage[31:0] ;
  assign scemi_data_req_inport_scemiInportBeats$EN =
	     scemi_data_req_inport_got_beat_pw$whas ;

  // register scemi_data_req_inport_status
  always@(MUX_scemi_data_req_inport_status$_write_1__SEL_1 or
	  WILL_FIRE_RL_scemi_data_req_inport_data_ready or
	  WILL_FIRE_RL_scemi_data_req_inport_read_complete)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_data_req_inport_status$_write_1__SEL_1:
	  scemi_data_req_inport_status$D_IN = 2'd1;
      WILL_FIRE_RL_scemi_data_req_inport_data_ready:
	  scemi_data_req_inport_status$D_IN = 2'd2;
      WILL_FIRE_RL_scemi_data_req_inport_read_complete:
	  scemi_data_req_inport_status$D_IN = 2'd3;
      default: scemi_data_req_inport_status$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign scemi_data_req_inport_status$EN =
	     WILL_FIRE_RL_scemi_data_req_inport_port_reset ||
	     WILL_FIRE_RL_scemi_data_req_inport_first_request ||
	     WILL_FIRE_RL_scemi_data_req_inport_data_ready ||
	     WILL_FIRE_RL_scemi_data_req_inport_read_complete ;

  // register scemi_data_resp_outport_beats
  assign scemi_data_resp_outport_beats$D_IN =
	     { 28'd0, scemi_data_resp_res_fifo$dD_OUT } ;
  assign scemi_data_resp_outport_beats$EN =
	     CAN_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut ;

  // register scemi_data_resp_outport_count
  assign scemi_data_resp_outport_count$D_IN =
	     WILL_FIRE_RL_scemi_data_resp_outport_update_count &&
	     MUX_scemi_data_resp_outport_count$write_1__VAL_1 ;
  assign scemi_data_resp_outport_count$EN =
	     WILL_FIRE_RL_scemi_data_resp_outport_update_count ||
	     scemi_data_resp_outport_in_reset_noc ;

  // register scemi_data_resp_outport_in_reset_noc
  assign scemi_data_resp_outport_in_reset_noc$D_IN =
	     !WILL_FIRE_RL_scemi_data_resp_outport_complete_reset_sequence ;
  assign scemi_data_resp_outport_in_reset_noc$EN =
	     WILL_FIRE_RL_scemi_data_resp_outport_complete_reset_sequence ||
	     WILL_FIRE_RL_scemi_data_resp_outport_initiate_reset_sequence ;

  // register scemi_data_resp_outport_in_reset_uclk
  assign scemi_data_resp_outport_in_reset_uclk$D_IN = 1'd0 ;
  assign scemi_data_resp_outport_in_reset_uclk$EN =
	     scemi_data_resp_outport_in_reset_uclk ;

  // register scemi_data_resp_outport_ok
  assign scemi_data_resp_outport_ok$D_IN =
	     scemi_data_resp_outport_finished$dPulse ;
  assign scemi_data_resp_outport_ok$EN =
	     WILL_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut ||
	     scemi_data_resp_outport_finished$dPulse ;

  // register scemi_data_resp_outport_prev_reset_uclk
  assign scemi_data_resp_outport_prev_reset_uclk$D_IN =
	     scemi_data_resp_outport_in_reset_uclk ;
  assign scemi_data_resp_outport_prev_reset_uclk$EN = 1'd1 ;

  // register scemi_dut_dut_dutIfc_resetting
  assign scemi_dut_dut_dutIfc_resetting$D_IN =
	     scemi_dut_softrst_req_res_fifo$dEMPTY_N ;
  assign scemi_dut_dut_dutIfc_resetting$EN =
	     WILL_FIRE_RL_scemi_dut_dut_dutIfc_donerest ||
	     scemi_dut_softrst_req_res_fifo$dEMPTY_N ;

  // register scemi_dut_dut_prb_control_control_in_dataF_rv
  assign scemi_dut_dut_prb_control_control_in_dataF_rv$D_IN =
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port2__read ;
  assign scemi_dut_dut_prb_control_control_in_dataF_rv$EN = 1'b1 ;

  // register scemi_dut_dut_prb_control_control_in_in_reset_noc
  assign scemi_dut_dut_prb_control_control_in_in_reset_noc$D_IN =
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_complete_reset_sequence ;
  assign scemi_dut_dut_prb_control_control_in_in_reset_noc$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_complete_reset_sequence ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_initiate_reset_sequence ;

  // register scemi_dut_dut_prb_control_control_in_in_reset_uclk
  assign scemi_dut_dut_prb_control_control_in_in_reset_uclk$D_IN = 1'd0 ;
  assign scemi_dut_dut_prb_control_control_in_in_reset_uclk$EN =
	     scemi_dut_dut_prb_control_control_in_in_reset_uclk ;

  // register scemi_dut_dut_prb_control_control_in_prev_reset_uclk
  assign scemi_dut_dut_prb_control_control_in_prev_reset_uclk$D_IN =
	     scemi_dut_dut_prb_control_control_in_in_reset_uclk ;
  assign scemi_dut_dut_prb_control_control_in_prev_reset_uclk$EN = 1'd1 ;

  // register scemi_dut_dut_prb_control_control_in_remaining
  assign scemi_dut_dut_prb_control_control_in_remaining$D_IN =
	     MUX_scemi_dut_dut_prb_control_control_in_remaining$write_1__SEL_1 &&
	     MUX_scemi_dut_dut_prb_control_control_in_remaining$write_1__VAL_1 ;
  assign scemi_dut_dut_prb_control_control_in_remaining$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_update_remaining &&
	     (scemi_dut_dut_prb_control_control_in_got_beat_pw$whas ||
	      scemi_dut_dut_prb_control_control_in_wait_sp$dPulse) ||
	     scemi_dut_dut_prb_control_control_in_in_reset_noc ;

  // register scemi_dut_dut_prb_control_control_in_requestF_rv
  assign scemi_dut_dut_prb_control_control_in_requestF_rv$D_IN = 1'b1 ;
  assign scemi_dut_dut_prb_control_control_in_requestF_rv$EN = 1'b1 ;

  // register scemi_dut_dut_prb_control_control_in_scemiInportBeats
  assign scemi_dut_dut_prb_control_control_in_scemiInportBeats$D_IN =
	     scemi_fFromBridgeBeat_ifc_rStorage[31:0] ;
  assign scemi_dut_dut_prb_control_control_in_scemiInportBeats$EN =
	     scemi_dut_dut_prb_control_control_in_got_beat_pw$whas ;

  // register scemi_dut_dut_prb_control_control_in_status
  always@(MUX_scemi_dut_dut_prb_control_control_in_status$_write_1__SEL_1 or
	  WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_data_ready or
	  WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_read_complete)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_dut_dut_prb_control_control_in_status$_write_1__SEL_1:
	  scemi_dut_dut_prb_control_control_in_status$D_IN = 2'd1;
      WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_data_ready:
	  scemi_dut_dut_prb_control_control_in_status$D_IN = 2'd2;
      WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_read_complete:
	  scemi_dut_dut_prb_control_control_in_status$D_IN = 2'd3;
      default: scemi_dut_dut_prb_control_control_in_status$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign scemi_dut_dut_prb_control_control_in_status$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_port_reset ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_first_request ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_data_ready ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_read_complete ;

  // register scemi_dut_dut_prb_control_count
  assign scemi_dut_dut_prb_control_count$D_IN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData ?
	       scemi_dut_dut_prb_control_prb_str$D_OUT[15:0] :
	       MUX_scemi_dut_dut_prb_control_count$write_1__VAL_2 ;
  assign scemi_dut_dut_prb_control_count$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData ;

  // register scemi_dut_dut_prb_control_data_out_beats
  always@(WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing or
	  WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck or
	  MUX_scemi_dut_dut_prb_control_data_out_beats$_write_1__VAL_2 or
	  MUX_scemi_dut_dut_prb_control_data_out_beats$_write_1__SEL_3 or
	  scemi_dut_dut_prb_control_prb_str$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing:
	  scemi_dut_dut_prb_control_data_out_beats$D_IN = 32'hFFFFAAAA;
      WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck:
	  scemi_dut_dut_prb_control_data_out_beats$D_IN =
	      MUX_scemi_dut_dut_prb_control_data_out_beats$_write_1__VAL_2;
      MUX_scemi_dut_dut_prb_control_data_out_beats$_write_1__SEL_3:
	  scemi_dut_dut_prb_control_data_out_beats$D_IN =
	      scemi_dut_dut_prb_control_prb_str$D_OUT;
      default: scemi_dut_dut_prb_control_data_out_beats$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign scemi_dut_dut_prb_control_data_out_beats$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger ;

  // register scemi_dut_dut_prb_control_data_out_count
  assign scemi_dut_dut_prb_control_data_out_count$D_IN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_update_count &&
	     MUX_scemi_dut_dut_prb_control_data_out_count$write_1__VAL_1 ;
  assign scemi_dut_dut_prb_control_data_out_count$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_update_count ||
	     scemi_dut_dut_prb_control_data_out_in_reset_noc ;

  // register scemi_dut_dut_prb_control_data_out_in_reset_noc
  assign scemi_dut_dut_prb_control_data_out_in_reset_noc$D_IN =
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_complete_reset_sequence ;
  assign scemi_dut_dut_prb_control_data_out_in_reset_noc$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_complete_reset_sequence ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_data_out_initiate_reset_sequence ;

  // register scemi_dut_dut_prb_control_data_out_in_reset_uclk
  assign scemi_dut_dut_prb_control_data_out_in_reset_uclk$D_IN = 1'd0 ;
  assign scemi_dut_dut_prb_control_data_out_in_reset_uclk$EN =
	     scemi_dut_dut_prb_control_data_out_in_reset_uclk ;

  // register scemi_dut_dut_prb_control_data_out_ok
  assign scemi_dut_dut_prb_control_data_out_ok$D_IN =
	     scemi_dut_dut_prb_control_data_out_finished$dPulse ;
  assign scemi_dut_dut_prb_control_data_out_ok$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger ||
	     scemi_dut_dut_prb_control_data_out_finished$dPulse ;

  // register scemi_dut_dut_prb_control_data_out_prev_reset_uclk
  assign scemi_dut_dut_prb_control_data_out_prev_reset_uclk$D_IN =
	     scemi_dut_dut_prb_control_data_out_in_reset_uclk ;
  assign scemi_dut_dut_prb_control_data_out_prev_reset_uclk$EN = 1'd1 ;

  // register scemi_dut_dut_prb_control_flag
  assign scemi_dut_dut_prb_control_flag$D_IN =
	     !WILL_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag ;
  assign scemi_dut_dut_prb_control_flag$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_flagSample ;

  // register scemi_dut_dut_prb_control_nextSample
  always@(MUX_scemi_dut_dut_prb_control_nextSample$write_1__SEL_1 or
	  MUX_scemi_dut_dut_prb_control_nextSample$write_1__VAL_1 or
	  MUX_scemi_dut_dut_prb_control_nextSample$write_1__SEL_2 or
	  WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_dut_dut_prb_control_nextSample$write_1__SEL_1:
	  scemi_dut_dut_prb_control_nextSample$D_IN =
	      MUX_scemi_dut_dut_prb_control_nextSample$write_1__VAL_1;
      MUX_scemi_dut_dut_prb_control_nextSample$write_1__SEL_2:
	  scemi_dut_dut_prb_control_nextSample$D_IN =
	      MUX_scemi_dut_dut_prb_control_nextSample$write_1__VAL_1;
      WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample:
	  scemi_dut_dut_prb_control_nextSample$D_IN =
	      MUX_scemi_dut_dut_prb_control_nextSample$write_1__VAL_1;
      default: scemi_dut_dut_prb_control_nextSample$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign scemi_dut_dut_prb_control_nextSample$EN =
	     MUX_scemi_dut_dut_prb_control_nextSample$write_1__SEL_1 ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv__ETC___d908 ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample ;

  // register scemi_dut_dut_prb_control_pinged
  always@(WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData or
	  WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData or
	  MUX_scemi_dut_dut_prb_control_pinged$write_1__SEL_3 or
	  WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing)
  case (1'b1)
    WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData ||
    WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData:
	scemi_dut_dut_prb_control_pinged$D_IN = 1'd0;
    MUX_scemi_dut_dut_prb_control_pinged$write_1__SEL_3:
	scemi_dut_dut_prb_control_pinged$D_IN = 1'd1;
    WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing:
	scemi_dut_dut_prb_control_pinged$D_IN = 1'd0;
    default: scemi_dut_dut_prb_control_pinged$D_IN =
		 1'b0 /* unspecified value */ ;
  endcase
  assign scemi_dut_dut_prb_control_pinged$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd0 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd1 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd2 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd3 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd4 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd5 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	     3'd6 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12:0] ==
	     13'h1FFF ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData ;

  // register scemi_dut_dut_prb_control_sampleIntervalV
  assign scemi_dut_dut_prb_control_sampleIntervalV$D_IN =
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd0) ?
	       8'd0 :
	       scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[7:0] ;
  assign scemi_dut_dut_prb_control_sampleIntervalV$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd0 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:8] ==
	      2'd0 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] !=
	      10'd1023 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] !=
	      10'd0) ;

  // register scemi_dut_dut_prb_control_sampleIntervalV_1
  assign scemi_dut_dut_prb_control_sampleIntervalV_1$D_IN =
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd0) ?
	       8'd0 :
	       scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[7:0] ;
  assign scemi_dut_dut_prb_control_sampleIntervalV_1$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd0 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:8] ==
	      2'd1 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] !=
	      10'd1023 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] !=
	      10'd0) ;

  // register scemi_dut_dut_prb_control_sampleIntervalV_2
  assign scemi_dut_dut_prb_control_sampleIntervalV_2$D_IN =
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd0) ?
	       8'd0 :
	       scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[7:0] ;
  assign scemi_dut_dut_prb_control_sampleIntervalV_2$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd0 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:8] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] !=
	      10'd1023 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] !=
	      10'd0) ;

  // register scemi_dut_dut_prb_control_sampleIntervalV_3
  assign scemi_dut_dut_prb_control_sampleIntervalV_3$D_IN =
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd0) ?
	       8'd0 :
	       scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[7:0] ;
  assign scemi_dut_dut_prb_control_sampleIntervalV_3$EN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd0 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:8] ==
	      2'd3 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] !=
	      10'd1023 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] !=
	      10'd0) ;

  // register scemi_dut_softrst_req_inport_dataF_rv
  assign scemi_dut_softrst_req_inport_dataF_rv$D_IN =
	     scemi_dut_softrst_req_inport_dataF_rv$port2__read ;
  assign scemi_dut_softrst_req_inport_dataF_rv$EN = 1'b1 ;

  // register scemi_dut_softrst_req_inport_in_reset_noc
  assign scemi_dut_softrst_req_inport_in_reset_noc$D_IN =
	     !WILL_FIRE_RL_scemi_dut_softrst_req_inport_complete_reset_sequence ;
  assign scemi_dut_softrst_req_inport_in_reset_noc$EN =
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_complete_reset_sequence ||
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_initiate_reset_sequence ;

  // register scemi_dut_softrst_req_inport_in_reset_uclk
  assign scemi_dut_softrst_req_inport_in_reset_uclk$D_IN = 1'd0 ;
  assign scemi_dut_softrst_req_inport_in_reset_uclk$EN =
	     scemi_dut_softrst_req_inport_in_reset_uclk ;

  // register scemi_dut_softrst_req_inport_prev_reset_uclk
  assign scemi_dut_softrst_req_inport_prev_reset_uclk$D_IN =
	     scemi_dut_softrst_req_inport_in_reset_uclk ;
  assign scemi_dut_softrst_req_inport_prev_reset_uclk$EN = 1'd1 ;

  // register scemi_dut_softrst_req_inport_remaining
  assign scemi_dut_softrst_req_inport_remaining$D_IN =
	     MUX_scemi_dut_softrst_req_inport_remaining$write_1__SEL_1 &&
	     MUX_scemi_dut_softrst_req_inport_remaining$write_1__VAL_1 ;
  assign scemi_dut_softrst_req_inport_remaining$EN =
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_update_remaining &&
	     (scemi_dut_softrst_req_inport_got_beat_pw$whas ||
	      scemi_dut_softrst_req_inport_wait_sp$dPulse) ||
	     scemi_dut_softrst_req_inport_in_reset_noc ;

  // register scemi_dut_softrst_req_inport_requestF_rv
  assign scemi_dut_softrst_req_inport_requestF_rv$D_IN = 1'b1 ;
  assign scemi_dut_softrst_req_inport_requestF_rv$EN = 1'b1 ;

  // register scemi_dut_softrst_req_inport_scemiInportBeats
  assign scemi_dut_softrst_req_inport_scemiInportBeats$D_IN =
	     scemi_fFromBridgeBeat_ifc_rStorage[31:0] ;
  assign scemi_dut_softrst_req_inport_scemiInportBeats$EN =
	     scemi_dut_softrst_req_inport_got_beat_pw$whas ;

  // register scemi_dut_softrst_req_inport_status
  always@(MUX_scemi_dut_softrst_req_inport_status$_write_1__SEL_1 or
	  WILL_FIRE_RL_scemi_dut_softrst_req_inport_data_ready or
	  WILL_FIRE_RL_scemi_dut_softrst_req_inport_read_complete)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_dut_softrst_req_inport_status$_write_1__SEL_1:
	  scemi_dut_softrst_req_inport_status$D_IN = 2'd1;
      WILL_FIRE_RL_scemi_dut_softrst_req_inport_data_ready:
	  scemi_dut_softrst_req_inport_status$D_IN = 2'd2;
      WILL_FIRE_RL_scemi_dut_softrst_req_inport_read_complete:
	  scemi_dut_softrst_req_inport_status$D_IN = 2'd3;
      default: scemi_dut_softrst_req_inport_status$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign scemi_dut_softrst_req_inport_status$EN =
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_port_reset ||
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_first_request ||
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_data_ready ||
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_read_complete ;

  // register scemi_dut_softrst_resp_outport_beats
  assign scemi_dut_softrst_resp_outport_beats$D_IN =
	     { 31'd0, scemi_dut_softrst_resp_res_fifo$dD_OUT } ;
  assign scemi_dut_softrst_resp_outport_beats$EN =
	     CAN_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut ;

  // register scemi_dut_softrst_resp_outport_count
  assign scemi_dut_softrst_resp_outport_count$D_IN =
	     WILL_FIRE_RL_scemi_dut_softrst_resp_outport_update_count &&
	     MUX_scemi_dut_softrst_resp_outport_count$write_1__VAL_1 ;
  assign scemi_dut_softrst_resp_outport_count$EN =
	     WILL_FIRE_RL_scemi_dut_softrst_resp_outport_update_count ||
	     scemi_dut_softrst_resp_outport_in_reset_noc ;

  // register scemi_dut_softrst_resp_outport_in_reset_noc
  assign scemi_dut_softrst_resp_outport_in_reset_noc$D_IN =
	     !WILL_FIRE_RL_scemi_dut_softrst_resp_outport_complete_reset_sequence ;
  assign scemi_dut_softrst_resp_outport_in_reset_noc$EN =
	     WILL_FIRE_RL_scemi_dut_softrst_resp_outport_complete_reset_sequence ||
	     WILL_FIRE_RL_scemi_dut_softrst_resp_outport_initiate_reset_sequence ;

  // register scemi_dut_softrst_resp_outport_in_reset_uclk
  assign scemi_dut_softrst_resp_outport_in_reset_uclk$D_IN = 1'd0 ;
  assign scemi_dut_softrst_resp_outport_in_reset_uclk$EN =
	     scemi_dut_softrst_resp_outport_in_reset_uclk ;

  // register scemi_dut_softrst_resp_outport_ok
  assign scemi_dut_softrst_resp_outport_ok$D_IN =
	     scemi_dut_softrst_resp_outport_finished$dPulse ;
  assign scemi_dut_softrst_resp_outport_ok$EN =
	     WILL_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut ||
	     scemi_dut_softrst_resp_outport_finished$dPulse ;

  // register scemi_dut_softrst_resp_outport_prev_reset_uclk
  assign scemi_dut_softrst_resp_outport_prev_reset_uclk$D_IN =
	     scemi_dut_softrst_resp_outport_in_reset_uclk ;
  assign scemi_dut_softrst_resp_outport_prev_reset_uclk$EN = 1'd1 ;

  // register scemi_fAxiRx_rv
  assign scemi_fAxiRx_rv$D_IN = scemi_fAxiRx_rv$port2__read ;
  assign scemi_fAxiRx_rv$EN = 1'b1 ;

  // register scemi_fAxiTx_rv
  assign scemi_fAxiTx_rv$D_IN = scemi_fAxiTx_rv$port2__read ;
  assign scemi_fAxiTx_rv$EN = 1'b1 ;

  // register scemi_fFromBridgeBeat_ifc_rDataAvail
  assign scemi_fFromBridgeBeat_ifc_rDataAvail$D_IN =
	     (!scemi_bridge$is_activated) ?
	       6'd32 :
	       scemi_fFromBridgeBeat_ifc_rDataAvail + b__h90925 - b__h91286 ;
  assign scemi_fFromBridgeBeat_ifc_rDataAvail$EN = 1'd1 ;

  // register scemi_fFromBridgeBeat_ifc_rDataCount
  assign scemi_fFromBridgeBeat_ifc_rDataCount$D_IN =
	     (!scemi_bridge$is_activated) ? 6'd0 : value__h91096 + b__h91286 ;
  assign scemi_fFromBridgeBeat_ifc_rDataCount$EN = 1'd1 ;

  // register scemi_fFromBridgeBeat_ifc_rStorage
  assign scemi_fFromBridgeBeat_ifc_rStorage$D_IN =
	     (!scemi_bridge$is_activated) ? 256'd0 : nextStorage__h90804 ;
  assign scemi_fFromBridgeBeat_ifc_rStorage$EN = 1'd1 ;

  // register scemi_fFromBridgeBeat_ifc_rStorageMask
  assign scemi_fFromBridgeBeat_ifc_rStorageMask$D_IN =
	     (!scemi_bridge$is_activated) ? 256'd0 : nextMask__h90805 ;
  assign scemi_fFromBridgeBeat_ifc_rStorageMask$EN = 1'd1 ;

  // register scemi_fFromContinueBeat_ifc_rDataAvail
  assign scemi_fFromContinueBeat_ifc_rDataAvail$D_IN =
	     (!scemi_bridge$is_activated) ?
	       6'd32 :
	       scemi_fFromContinueBeat_ifc_rDataAvail + b__h168716 - 6'd0 ;
  assign scemi_fFromContinueBeat_ifc_rDataAvail$EN = 1'd1 ;

  // register scemi_fFromContinueBeat_ifc_rDataCount
  assign scemi_fFromContinueBeat_ifc_rDataCount$D_IN =
	     (!scemi_bridge$is_activated) ? 6'd0 : value__h168887 + 6'd0 ;
  assign scemi_fFromContinueBeat_ifc_rDataCount$EN = 1'd1 ;

  // register scemi_fFromContinueBeat_ifc_rStorage
  assign scemi_fFromContinueBeat_ifc_rStorage$D_IN =
	     (!scemi_bridge$is_activated) ? 256'd0 : nextStorage__h168595 ;
  assign scemi_fFromContinueBeat_ifc_rStorage$EN = 1'd1 ;

  // register scemi_fFromContinueBeat_ifc_rStorageMask
  assign scemi_fFromContinueBeat_ifc_rStorageMask$D_IN =
	     (!scemi_bridge$is_activated) ? 256'd0 : nextMask__h168596 ;
  assign scemi_fFromContinueBeat_ifc_rStorageMask$EN = 1'd1 ;

  // register scemi_fS1MsgOut_ifc_rDataAvail
  assign scemi_fS1MsgOut_ifc_rDataAvail$D_IN =
	     (!scemi_bridge$is_activated) ?
	       6'd32 :
	       scemi_fS1MsgOut_ifc_rDataAvail + b__h170933 - b__h171294 ;
  assign scemi_fS1MsgOut_ifc_rDataAvail$EN = 1'd1 ;

  // register scemi_fS1MsgOut_ifc_rDataCount
  assign scemi_fS1MsgOut_ifc_rDataCount$D_IN =
	     (!scemi_bridge$is_activated) ?
	       6'd0 :
	       value__h171104 + b__h171294 ;
  assign scemi_fS1MsgOut_ifc_rDataCount$EN = 1'd1 ;

  // register scemi_fS1MsgOut_ifc_rStorage
  assign scemi_fS1MsgOut_ifc_rStorage$D_IN =
	     (!scemi_bridge$is_activated) ? 256'd0 : nextStorage__h170812 ;
  assign scemi_fS1MsgOut_ifc_rStorage$EN = 1'd1 ;

  // register scemi_fS1MsgOut_ifc_rStorageMask
  assign scemi_fS1MsgOut_ifc_rStorageMask$D_IN =
	     (!scemi_bridge$is_activated) ? 256'd0 : nextMask__h170813 ;
  assign scemi_fS1MsgOut_ifc_rStorageMask$EN = 1'd1 ;

  // register scemi_fS1OutPortAcks_ifc_rDataAvail
  assign scemi_fS1OutPortAcks_ifc_rDataAvail$D_IN =
	     (!scemi_bridge$is_activated) ?
	       5'd16 :
	       scemi_fS1OutPortAcks_ifc_rDataAvail + b__h93680 - b__h94039 ;
  assign scemi_fS1OutPortAcks_ifc_rDataAvail$EN = 1'd1 ;

  // register scemi_fS1OutPortAcks_ifc_rDataCount
  assign scemi_fS1OutPortAcks_ifc_rDataCount$D_IN =
	     (!scemi_bridge$is_activated) ? 5'd0 : value__h93850 + b__h94039 ;
  assign scemi_fS1OutPortAcks_ifc_rDataCount$EN = 1'd1 ;

  // register scemi_fS1OutPortAcks_ifc_rStorage
  assign scemi_fS1OutPortAcks_ifc_rStorage$D_IN =
	     (!scemi_bridge$is_activated) ? 160'd0 : nextStorage__h93559 ;
  assign scemi_fS1OutPortAcks_ifc_rStorage$EN = 1'd1 ;

  // register scemi_fS1OutPortAcks_ifc_rStorageMask
  assign scemi_fS1OutPortAcks_ifc_rStorageMask$D_IN =
	     (!scemi_bridge$is_activated) ? 160'd0 : nextMask__h93560 ;
  assign scemi_fS1OutPortAcks_ifc_rStorageMask$EN = 1'd1 ;

  // register scemi_fS2MsgOut_ifc_rDataAvail
  assign scemi_fS2MsgOut_ifc_rDataAvail$D_IN =
	     (!scemi_bridge$is_activated) ?
	       6'd32 :
	       scemi_fS2MsgOut_ifc_rDataAvail + b__h172192 - 6'd0 ;
  assign scemi_fS2MsgOut_ifc_rDataAvail$EN = 1'd1 ;

  // register scemi_fS2MsgOut_ifc_rDataCount
  assign scemi_fS2MsgOut_ifc_rDataCount$D_IN =
	     (!scemi_bridge$is_activated) ? 6'd0 : value__h172363 + 6'd0 ;
  assign scemi_fS2MsgOut_ifc_rDataCount$EN = 1'd1 ;

  // register scemi_fS2MsgOut_ifc_rStorage
  assign scemi_fS2MsgOut_ifc_rStorage$D_IN =
	     (!scemi_bridge$is_activated) ? 256'd0 : nextStorage__h172071 ;
  assign scemi_fS2MsgOut_ifc_rStorage$EN = 1'd1 ;

  // register scemi_fS2MsgOut_ifc_rStorageMask
  assign scemi_fS2MsgOut_ifc_rStorageMask$D_IN =
	     (!scemi_bridge$is_activated) ? 256'd0 : nextMask__h172072 ;
  assign scemi_fS2MsgOut_ifc_rStorageMask$EN = 1'd1 ;

  // register scemi_fToContinueBeat_ifc_rDataAvail
  assign scemi_fToContinueBeat_ifc_rDataAvail$D_IN =
	     (!scemi_bridge$is_activated) ?
	       6'd32 :
	       scemi_fToContinueBeat_ifc_rDataAvail + 6'd0 - b__h92374 ;
  assign scemi_fToContinueBeat_ifc_rDataAvail$EN = 1'd1 ;

  // register scemi_fToContinueBeat_ifc_rDataCount
  assign scemi_fToContinueBeat_ifc_rDataCount$D_IN =
	     (!scemi_bridge$is_activated) ? 6'd0 : value__h92184 + b__h92374 ;
  assign scemi_fToContinueBeat_ifc_rDataCount$EN = 1'd1 ;

  // register scemi_fToContinueBeat_ifc_rStorage
  assign scemi_fToContinueBeat_ifc_rStorage$D_IN =
	     (!scemi_bridge$is_activated) ? 256'd0 : nextStorage__h91892 ;
  assign scemi_fToContinueBeat_ifc_rStorage$EN = 1'd1 ;

  // register scemi_fToContinueBeat_ifc_rStorageMask
  assign scemi_fToContinueBeat_ifc_rStorageMask$D_IN =
	     (!scemi_bridge$is_activated) ? 256'd0 : nextMask__h91893 ;
  assign scemi_fToContinueBeat_ifc_rStorageMask$EN = 1'd1 ;

  // register scemi_fifoRxData_block0_status
  assign scemi_fifoRxData_block0_status$D_IN =
	     !scemi_fifoRxData_block0_status ;
  assign scemi_fifoRxData_block0_status$EN =
	     WILL_FIRE_RL_scemi_send_data && !scemi_fifoRxData_read_block ;

  // register scemi_fifoRxData_block1_status
  assign scemi_fifoRxData_block1_status$D_IN =
	     !scemi_fifoRxData_block1_status ;
  assign scemi_fifoRxData_block1_status$EN =
	     WILL_FIRE_RL_scemi_send_data && scemi_fifoRxData_read_block ;

  // register scemi_fifoRxData_dInReset_pre_isInReset
  assign scemi_fifoRxData_dInReset_pre_isInReset$D_IN = 1'd0 ;
  assign scemi_fifoRxData_dInReset_pre_isInReset$EN =
	     scemi_fifoRxData_dInReset_pre_isInReset ;

  // register scemi_fifoRxData_elem0_status_0
  assign scemi_fifoRxData_elem0_status_0$D_IN =
	     !scemi_fifoRxData_block0_status ;
  assign scemi_fifoRxData_elem0_status_0$EN =
	     _dor1scemi_fifoRxData_elem0_status_0$EN__write &&
	     !scemi_fifoRxData_write_block ;

  // register scemi_fifoRxData_elem0_status_1
  assign scemi_fifoRxData_elem0_status_1$D_IN =
	     scemi_fifoRxData_elem0_status_0 ;
  assign scemi_fifoRxData_elem0_status_1$EN =
	     _dor1scemi_fifoRxData_elem0_status_1$EN__write &&
	     !scemi_fifoRxData_write_block ;

  // register scemi_fifoRxData_elem1_status_0
  assign scemi_fifoRxData_elem1_status_0$D_IN =
	     !scemi_fifoRxData_block1_status ;
  assign scemi_fifoRxData_elem1_status_0$EN =
	     _dor1scemi_fifoRxData_elem1_status_0$EN__write &&
	     scemi_fifoRxData_write_block ;

  // register scemi_fifoRxData_elem1_status_1
  assign scemi_fifoRxData_elem1_status_1$D_IN =
	     scemi_fifoRxData_elem1_status_0 ;
  assign scemi_fifoRxData_elem1_status_1$EN =
	     _dor1scemi_fifoRxData_elem1_status_1$EN__write &&
	     scemi_fifoRxData_write_block ;

  // register scemi_fifoRxData_elem_0
  assign scemi_fifoRxData_elem_0$D_IN =
	     WILL_FIRE_RL_scemi_process_incoming_packets ?
	       MUX_scemi_fifoRxData_elem_0$_write_1__VAL_1 :
	       MUX_scemi_fifoRxData_elem_0$_write_1__VAL_2 ;
  assign scemi_fifoRxData_elem_0$EN =
	     WILL_FIRE_RL_scemi_process_incoming_packets ||
	     WILL_FIRE_RL_scemi_send_invalid_packets ;

  // register scemi_fifoRxData_elem_1
  assign scemi_fifoRxData_elem_1$D_IN =
	     WILL_FIRE_RL_scemi_process_incoming_packets ?
	       MUX_scemi_fifoRxData_elem_1$_write_1__VAL_1 :
	       MUX_scemi_fifoRxData_elem_1$_write_1__VAL_2 ;
  assign scemi_fifoRxData_elem_1$EN =
	     WILL_FIRE_RL_scemi_process_incoming_packets ||
	     WILL_FIRE_RL_scemi_send_invalid_packets ;

  // register scemi_fifoRxData_elem_2
  assign scemi_fifoRxData_elem_2$D_IN =
	     WILL_FIRE_RL_scemi_process_incoming_packets ?
	       MUX_scemi_fifoRxData_elem_2$_write_1__VAL_1 :
	       MUX_scemi_fifoRxData_elem_2$_write_1__VAL_2 ;
  assign scemi_fifoRxData_elem_2$EN =
	     WILL_FIRE_RL_scemi_process_incoming_packets ||
	     WILL_FIRE_RL_scemi_send_invalid_packets ;

  // register scemi_fifoRxData_elem_3
  assign scemi_fifoRxData_elem_3$D_IN =
	     WILL_FIRE_RL_scemi_process_incoming_packets ?
	       MUX_scemi_fifoRxData_elem_3$_write_1__VAL_1 :
	       MUX_scemi_fifoRxData_elem_3$_write_1__VAL_2 ;
  assign scemi_fifoRxData_elem_3$EN =
	     WILL_FIRE_RL_scemi_process_incoming_packets ||
	     WILL_FIRE_RL_scemi_send_invalid_packets ;

  // register scemi_fifoRxData_read_block
  assign scemi_fifoRxData_read_block$D_IN = ~scemi_fifoRxData_read_block ;
  assign scemi_fifoRxData_read_block$EN = CAN_FIRE_RL_scemi_send_data ;

  // register scemi_fifoRxData_sInReset_pre_isInReset
  assign scemi_fifoRxData_sInReset_pre_isInReset$D_IN = 1'd0 ;
  assign scemi_fifoRxData_sInReset_pre_isInReset$EN =
	     scemi_fifoRxData_sInReset_pre_isInReset ;

  // register scemi_fifoRxData_write_block
  assign scemi_fifoRxData_write_block$D_IN = !scemi_fifoRxData_write_block ;
  assign scemi_fifoRxData_write_block$EN =
	     _dor1scemi_fifoRxData_write_block$EN_write &&
	     (scemi_fifoRxData_write_block &&
	      !scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408 ||
	      !scemi_fifoRxData_write_block &&
	      !scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397) ;

  // register scemi_init_state_any_in_reset_uclk
  assign scemi_init_state_any_in_reset_uclk$D_IN =
	     CAN_FIRE_RL_scemi_clockGenerators_handle_reset ;
  assign scemi_init_state_any_in_reset_uclk$EN = 1'd1 ;

  // register scemi_init_state_cycle_stamp
  assign scemi_init_state_cycle_stamp$D_IN =
	     scemi_init_state_cycle_stamp + 64'd1 ;
  assign scemi_init_state_cycle_stamp$EN =
	     CAN_FIRE_RL_scemi_clockGenerators_incr_cycle_stamp ;

  // register scemi_init_state_out_port
  assign scemi_init_state_out_port$D_IN =
	     (scemi_init_state_out_port == 10'd4) ?
	       10'd0 :
	       scemi_init_state_out_port + 10'd1 ;
  assign scemi_init_state_out_port$EN = 1'd1 ;

  // register scemi_intr_on
  assign scemi_intr_on$D_IN =
	     scemi_msix_enable_cr && scemi_pcie_ep$cfg_command[2] ;
  assign scemi_intr_on$EN = 1'd1 ;

  // register scemi_lrS1ActiveRequests
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector or
	  scemi_lrS1ActiveRequests_1 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group or
	  scemi_lrS1PendingRequests or
	  MUX_scemi_lrS1ActiveRequests$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector:
	  scemi_lrS1ActiveRequests$D_IN = scemi_lrS1ActiveRequests_1;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group:
	  scemi_lrS1ActiveRequests$D_IN = scemi_lrS1PendingRequests;
      MUX_scemi_lrS1ActiveRequests$write_1__SEL_3:
	  scemi_lrS1ActiveRequests$D_IN = 1'd0;
      default: scemi_lrS1ActiveRequests$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_lrS1ActiveRequests$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_start_next_request ;

  // register scemi_lrS1ActiveRequests_1
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector or
	  scemi_lrS1ActiveRequests_2 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group or
	  scemi_lrS1PendingRequests_1 or
	  WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector:
	  scemi_lrS1ActiveRequests_1$D_IN = scemi_lrS1ActiveRequests_2;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group:
	  scemi_lrS1ActiveRequests_1$D_IN = scemi_lrS1PendingRequests_1;
      WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports:
	  scemi_lrS1ActiveRequests_1$D_IN = 1'd0;
      default: scemi_lrS1ActiveRequests_1$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_lrS1ActiveRequests_1$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ;

  // register scemi_lrS1ActiveRequests_2
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector or
	  scemi_lrS1ActiveRequests_3 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group or
	  scemi_lrS1PendingRequests_2 or
	  WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector:
	  scemi_lrS1ActiveRequests_2$D_IN = scemi_lrS1ActiveRequests_3;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group:
	  scemi_lrS1ActiveRequests_2$D_IN = scemi_lrS1PendingRequests_2;
      WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports:
	  scemi_lrS1ActiveRequests_2$D_IN = 1'd0;
      default: scemi_lrS1ActiveRequests_2$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_lrS1ActiveRequests_2$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ;

  // register scemi_lrS1ActiveRequests_3
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector or
	  scemi_lrS1ActiveRequests_4 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group or
	  scemi_lrS1PendingRequests_3 or
	  WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector:
	  scemi_lrS1ActiveRequests_3$D_IN = scemi_lrS1ActiveRequests_4;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group:
	  scemi_lrS1ActiveRequests_3$D_IN = scemi_lrS1PendingRequests_3;
      WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports:
	  scemi_lrS1ActiveRequests_3$D_IN = 1'd0;
      default: scemi_lrS1ActiveRequests_3$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_lrS1ActiveRequests_3$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ;

  // register scemi_lrS1ActiveRequests_4
  assign scemi_lrS1ActiveRequests_4$D_IN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group &&
	     scemi_lrS1PendingRequests_4 ;
  assign scemi_lrS1ActiveRequests_4$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector ;

  // register scemi_lrS1PendingRequests
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group or
	  scemi_dut_dut_prb_control_control_in_next_sp$dPulse or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests or
	  MUX_scemi_lrS1PendingRequests$write_1__VAL_2 or
	  WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group:
	  scemi_lrS1PendingRequests$D_IN =
	      scemi_dut_dut_prb_control_control_in_next_sp$dPulse;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests:
	  scemi_lrS1PendingRequests$D_IN =
	      MUX_scemi_lrS1PendingRequests$write_1__VAL_2;
      WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports:
	  scemi_lrS1PendingRequests$D_IN = 1'd0;
      default: scemi_lrS1PendingRequests$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_lrS1PendingRequests$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ;

  // register scemi_lrS1PendingRequests_1
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group or
	  scemi_dut_softrst_req_inport_next_sp$dPulse or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests or
	  MUX_scemi_lrS1PendingRequests_1$write_1__VAL_2 or
	  WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group:
	  scemi_lrS1PendingRequests_1$D_IN =
	      scemi_dut_softrst_req_inport_next_sp$dPulse;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests:
	  scemi_lrS1PendingRequests_1$D_IN =
	      MUX_scemi_lrS1PendingRequests_1$write_1__VAL_2;
      WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports:
	  scemi_lrS1PendingRequests_1$D_IN = 1'd0;
      default: scemi_lrS1PendingRequests_1$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_lrS1PendingRequests_1$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ;

  // register scemi_lrS1PendingRequests_2
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group or
	  scemi_data_req_inport_next_sp$dPulse or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests or
	  MUX_scemi_lrS1PendingRequests_2$write_1__VAL_2 or
	  WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group:
	  scemi_lrS1PendingRequests_2$D_IN =
	      scemi_data_req_inport_next_sp$dPulse;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests:
	  scemi_lrS1PendingRequests_2$D_IN =
	      MUX_scemi_lrS1PendingRequests_2$write_1__VAL_2;
      WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports:
	  scemi_lrS1PendingRequests_2$D_IN = 1'd0;
      default: scemi_lrS1PendingRequests_2$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_lrS1PendingRequests_2$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ;

  // register scemi_lrS1PendingRequests_3
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group or
	  scemi_start_inport_next_sp$dPulse or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests or
	  MUX_scemi_lrS1PendingRequests_3$write_1__VAL_2 or
	  WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group:
	  scemi_lrS1PendingRequests_3$D_IN =
	      scemi_start_inport_next_sp$dPulse;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests:
	  scemi_lrS1PendingRequests_3$D_IN =
	      MUX_scemi_lrS1PendingRequests_3$write_1__VAL_2;
      WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports:
	  scemi_lrS1PendingRequests_3$D_IN = 1'd0;
      default: scemi_lrS1PendingRequests_3$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_lrS1PendingRequests_3$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ;

  // register scemi_lrS1PendingRequests_4
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group or
	  scemi_shutdown_ctrl_in_next_sp$dPulse or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests or
	  MUX_scemi_lrS1PendingRequests_4$write_1__VAL_2 or
	  WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group:
	  scemi_lrS1PendingRequests_4$D_IN =
	      scemi_shutdown_ctrl_in_next_sp$dPulse;
      WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests:
	  scemi_lrS1PendingRequests_4$D_IN =
	      MUX_scemi_lrS1PendingRequests_4$write_1__VAL_2;
      WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports:
	  scemi_lrS1PendingRequests_4$D_IN = 1'd0;
      default: scemi_lrS1PendingRequests_4$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_lrS1PendingRequests_4$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_accumulate_pending_requests ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ;

  // register scemi_max_payload_bytes
  assign scemi_max_payload_bytes$D_IN = scemi_max_payload_cr ;
  assign scemi_max_payload_bytes$EN = 1'd1 ;

  // register scemi_max_payload_cr
  assign scemi_max_payload_cr$D_IN =
	     13'd128 << scemi_pcie_ep$cfg_dcommand[7:5] ;
  assign scemi_max_payload_cr$EN = 1'd1 ;

  // register scemi_max_rd_req_cr
  assign scemi_max_rd_req_cr$D_IN =
	     13'd128 << scemi_pcie_ep$cfg_dcommand[14:12] ;
  assign scemi_max_rd_req_cr$EN = 1'd1 ;

  // register scemi_max_read_req_bytes
  assign scemi_max_read_req_bytes$D_IN = scemi_max_rd_req_cr ;
  assign scemi_max_read_req_bytes$EN = 1'd1 ;

  // register scemi_msix_enable
  assign scemi_msix_enable$D_IN = scemi_msix_enable_cr ;
  assign scemi_msix_enable$EN = 1'd1 ;

  // register scemi_msix_enable_cr
  assign scemi_msix_enable_cr$D_IN = scemi_pcie_ep$cfg_interrupt_msixenable ;
  assign scemi_msix_enable_cr$EN = 1'd1 ;

  // register scemi_msix_masked
  assign scemi_msix_masked$D_IN = scemi_msix_masked_cr ;
  assign scemi_msix_masked$EN = 1'd1 ;

  // register scemi_msix_masked_cr
  assign scemi_msix_masked_cr$D_IN = scemi_pcie_ep$cfg_interrupt_msixfm ;
  assign scemi_msix_masked_cr$EN = 1'd1 ;

  // register scemi_rDecodeSceMi
  assign scemi_rDecodeSceMi$D_IN = MUX_scemi_rDecodeSceMi$write_1__SEL_1 ;
  assign scemi_rDecodeSceMi$EN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb &&
	     (scemi_fFromBridgeBeat_ifc_rStorage[31:26] == 6'b101010 ||
	      scemi_fFromBridgeBeat_ifc_rStorage[31:26] == 6'b101011) ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_inactive ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header ;

  // register scemi_rInMsgBytes
  always@(WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb or
	  scemi_fFromBridgeBeat_ifc_rStorage or
	  MUX_scemi_rInMsgBytes$write_1__SEL_2 or
	  MUX_scemi_rInMsgBytes$write_1__VAL_2 or
	  WILL_FIRE_RL_scemi_msg_sink_noc_inactive)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb:
	  scemi_rInMsgBytes$D_IN = scemi_fFromBridgeBeat_ifc_rStorage[23:16];
      MUX_scemi_rInMsgBytes$write_1__SEL_2:
	  scemi_rInMsgBytes$D_IN = MUX_scemi_rInMsgBytes$write_1__VAL_2;
      WILL_FIRE_RL_scemi_msg_sink_noc_inactive: scemi_rInMsgBytes$D_IN = 8'd0;
      default: scemi_rInMsgBytes$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign scemi_rInMsgBytes$EN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_disregard_packet ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_disregard_packet ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_inactive ;

  // register scemi_rOddBeat
  assign scemi_rOddBeat$D_IN = !scemi_rOddBeat ;
  assign scemi_rOddBeat$EN = scemi_fifoRxData_pwEnqueue$whas ;

  // register scemi_rOtherMsgIn
  always@(WILL_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data or
	  scemi_rInMsgBytes_678_ULE_4___d1721 or
	  WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb or
	  MUX_scemi_rOtherMsgIn$write_1__VAL_2 or
	  WILL_FIRE_RL_scemi_msg_sink_noc_inactive)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data:
	  scemi_rOtherMsgIn$D_IN = !scemi_rInMsgBytes_678_ULE_4___d1721;
      WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb:
	  scemi_rOtherMsgIn$D_IN = MUX_scemi_rOtherMsgIn$write_1__VAL_2;
      WILL_FIRE_RL_scemi_msg_sink_noc_inactive: scemi_rOtherMsgIn$D_IN = 1'd0;
      default: scemi_rOtherMsgIn$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_rOtherMsgIn$EN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_other_process_other_data ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_inactive ;

  // register scemi_rOtherMsgOut
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_continue_other or
	  scemi_rOutMsgBytes_989_ULE_4___d2183 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other or
	  value__h197969 or MUX_scemi_rOtherMsgOut$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_continue_other:
	  scemi_rOtherMsgOut$D_IN = !scemi_rOutMsgBytes_989_ULE_4___d2183;
      WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other:
	  scemi_rOtherMsgOut$D_IN = value__h197969 != 9'd0;
      MUX_scemi_rOtherMsgOut$write_1__SEL_3: scemi_rOtherMsgOut$D_IN = 1'd0;
      default: scemi_rOtherMsgOut$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_rOtherMsgOut$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_other ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 ;

  // register scemi_rOutMsgBytes
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other or
	  value__h197969 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 or
	  value__h202501 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 or
	  value__h207022 or
	  MUX_scemi_rOutMsgBytes$write_1__SEL_4 or
	  MUX_scemi_rOutMsgBytes$write_1__VAL_4 or
	  WILL_FIRE_RL_scemi_msg_source_noc_inactive)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other:
	  scemi_rOutMsgBytes$D_IN = value__h197969[7:0];
      WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1:
	  scemi_rOutMsgBytes$D_IN = value__h202501[7:0];
      WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2:
	  scemi_rOutMsgBytes$D_IN = value__h207022[7:0];
      MUX_scemi_rOutMsgBytes$write_1__SEL_4:
	  scemi_rOutMsgBytes$D_IN = MUX_scemi_rOutMsgBytes$write_1__VAL_4;
      WILL_FIRE_RL_scemi_msg_source_noc_inactive:
	  scemi_rOutMsgBytes$D_IN = 8'd0;
      default: scemi_rOutMsgBytes$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign scemi_rOutMsgBytes$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_other ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ;

  // register scemi_rS1BitsRem
  assign scemi_rS1BitsRem$D_IN =
	     MUX_scemi_rS1BitsRem$write_1__SEL_1 ?
	       MUX_scemi_rS1BitsRem$write_1__VAL_1 :
	       MUX_scemi_rS1BitsRem$write_1__VAL_2 ;
  assign scemi_rS1BitsRem$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     (!scemi_rS1BitsRem_295_ULE_32___d2353 ||
	      !scemi_rS1OutMsgSize_290_ULE_4___d2355) ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message ;

  // register scemi_rS1CycleStamp
  assign scemi_rS1CycleStamp$D_IN = scemi_init_state_msgFIFO$dD_OUT[73:10] ;
  assign scemi_rS1CycleStamp$EN =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message ;

  // register scemi_rS1InPortNum
  assign scemi_rS1InPortNum$D_IN = scemi_fFromBridgeBeat_ifc_rStorage[9:0] ;
  assign scemi_rS1InPortNum$EN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header &&
	     scemi_fFromBridgeBeat_ifc_rStorage[31:30] == 2'd0 ;

  // register scemi_rS1MsgInIsAck
  assign scemi_rS1MsgInIsAck$D_IN =
	     MUX_scemi_rS1MsgInIsAck$write_1__SEL_1 ?
	       MUX_scemi_rS1MsgInIsAck$write_1__VAL_1 :
	       !scemi_rInMsgBytes_678_ULE_4___d1721 ;
  assign scemi_rS1MsgInIsAck$EN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header &&
	     (scemi_fFromBridgeBeat_ifc_rStorage[31:30] == 2'd0 ||
	      scemi_fFromBridgeBeat_ifc_rStorage[31:30] == 2'd3) ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb ;

  // register scemi_rS1MsgInIsData
  assign scemi_rS1MsgInIsData$D_IN =
	     MUX_scemi_rS1MsgInIsAck$write_1__SEL_1 ?
	       MUX_scemi_rS1MsgInIsData$write_1__VAL_1 :
	       !scemi_rInMsgBytes_678_ULE_4___d1721 ;
  assign scemi_rS1MsgInIsData$EN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header &&
	     (scemi_fFromBridgeBeat_ifc_rStorage[31:30] == 2'd0 ||
	      scemi_fFromBridgeBeat_ifc_rStorage[31:30] == 2'd3) ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data ;

  // register scemi_rS1MsgOutDataReq
  assign scemi_rS1MsgOutDataReq$D_IN =
	     !MUX_scemi_rS1MsgOutDataReq$write_1__SEL_1 &&
	     !WILL_FIRE_RL_scemi_msg_source_noc_inactive ;
  assign scemi_rS1MsgOutDataReq$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutMsgSize_290_ULE_4___d2355 &&
	     scemi_rS1BitsRem_295_ULE_32___d2353 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message ;

  // register scemi_rS1MsgOutReqGrant
  always@(WILL_FIRE_RL_scemi_msg_source_noc_inactive or
	  WILL_FIRE_RL_scemi_swap_scemi1_outport_grant or
	  scemi_rS1MsgOutReqGrant or
	  MUX_scemi_rS1MsgOutDataReq$write_1__SEL_1 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message)
  case (1'b1)
    WILL_FIRE_RL_scemi_msg_source_noc_inactive:
	scemi_rS1MsgOutReqGrant$D_IN = 1'd1;
    WILL_FIRE_RL_scemi_swap_scemi1_outport_grant:
	scemi_rS1MsgOutReqGrant$D_IN = !scemi_rS1MsgOutReqGrant;
    MUX_scemi_rS1MsgOutDataReq$write_1__SEL_1:
	scemi_rS1MsgOutReqGrant$D_IN = 1'd1;
    WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message:
	scemi_rS1MsgOutReqGrant$D_IN = 1'd0;
    default: scemi_rS1MsgOutReqGrant$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign scemi_rS1MsgOutReqGrant$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutMsgSize_290_ULE_4___d2355 &&
	     scemi_rS1BitsRem_295_ULE_32___d2353 ||
	     WILL_FIRE_RL_scemi_swap_scemi1_outport_grant ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ;

  // register scemi_rS1MsgOutReqReq
  assign scemi_rS1MsgOutReqReq$D_IN =
	     !MUX_scemi_rS1MsgOutReqReq$write_1__SEL_1 ;
  assign scemi_rS1MsgOutReqReq$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_send_request_message ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_start_next_request ;

  // register scemi_rS1OutDataHeader
  assign scemi_rS1OutDataHeader$D_IN =
	     !WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header ;
  assign scemi_rS1OutDataHeader$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutMsgSize_290_ULE_4___d2355 &&
	     !scemi_rS1BitsRem_295_ULE_32___d2353 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message ;

  // register scemi_rS1OutMsgIsCont
  assign scemi_rS1OutMsgIsCont$D_IN =
	     MUX_scemi_rS1OutDataHeader$write_1__SEL_1 ;
  assign scemi_rS1OutMsgIsCont$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     scemi_rS1OutMsgSize_290_ULE_4___d2355 &&
	     !scemi_rS1BitsRem_295_ULE_32___d2353 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message ;

  // register scemi_rS1OutMsgSize
  always@(MUX_scemi_rS1BitsRem$write_1__SEL_1 or
	  MUX_scemi_rS1OutMsgSize$write_1__VAL_1 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message or
	  MUX_scemi_rS1OutMsgSize$write_1__VAL_2 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header or
	  MUX_scemi_rS1OutMsgSize$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_rS1BitsRem$write_1__SEL_1:
	  scemi_rS1OutMsgSize$D_IN = MUX_scemi_rS1OutMsgSize$write_1__VAL_1;
      WILL_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message:
	  scemi_rS1OutMsgSize$D_IN = MUX_scemi_rS1OutMsgSize$write_1__VAL_2;
      WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header:
	  scemi_rS1OutMsgSize$D_IN = MUX_scemi_rS1OutMsgSize$write_1__VAL_3;
      default: scemi_rS1OutMsgSize$D_IN =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign scemi_rS1OutMsgSize$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_data &&
	     (!scemi_rS1BitsRem_295_ULE_32___d2353 ||
	      !scemi_rS1OutMsgSize_290_ULE_4___d2355) ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_outports_send_data_message_header ;

  // register scemi_rS1OutPort
  assign scemi_rS1OutPort$D_IN = scemi_init_state_msgFIFO$dD_OUT[9:0] ;
  assign scemi_rS1OutPort$EN =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message ;

  // register scemi_rS1RequestedPort
  assign scemi_rS1RequestedPort$D_IN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector ?
	       MUX_scemi_rS1RequestedPort$write_1__VAL_1 :
	       10'd0 ;
  assign scemi_rS1RequestedPort$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_shift_new_request_vector ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive_inports ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_inports_load_new_request_group ;

  // register scemi_rS2InPipeNum
  assign scemi_rS2InPipeNum$D_IN = scemi_fFromBridgeBeat_ifc_rStorage[27:16] ;
  assign scemi_rS2InPipeNum$EN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb &&
	     scemi_fFromBridgeBeat_ifc_rStorage[31] ;

  // register scemi_rS2MsgInIsCred
  assign scemi_rS2MsgInIsCred$D_IN = 1'd0 ;
  assign scemi_rS2MsgInIsCred$EN =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb ;

  // register scemi_rS2MsgInIsData
  assign scemi_rS2MsgInIsData$D_IN =
	     scemi_fFromBridgeBeat_ifc_rStorage[31] &&
	     !scemi_rInMsgBytes_678_ULE_4___d1721 ;
  assign scemi_rS2MsgInIsData$EN =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb ;

  // register scemi_rS2MsgOutCredGrant
  assign scemi_rS2MsgOutCredGrant$D_IN = 1'd0 ;
  assign scemi_rS2MsgOutCredGrant$EN =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;

  // register scemi_rS2MsgOutDataReq
  assign scemi_rS2MsgOutDataReq$D_IN = 1'd0 ;
  assign scemi_rS2MsgOutDataReq$EN =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;

  // register scemi_rSceMi1MsgIn
  always@(WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb or
	  scemi_fFromBridgeBeat_ifc_rStorage or
	  MUX_scemi_rSceMi1MsgIn$write_1__SEL_2 or
	  scemi_rInMsgBytes_678_ULE_4___d1721 or
	  WILL_FIRE_RL_scemi_msg_sink_noc_inactive)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb:
	  scemi_rSceMi1MsgIn$D_IN =
	      scemi_fFromBridgeBeat_ifc_rStorage[31:26] == 6'b101010;
      MUX_scemi_rSceMi1MsgIn$write_1__SEL_2:
	  scemi_rSceMi1MsgIn$D_IN = !scemi_rInMsgBytes_678_ULE_4___d1721;
      WILL_FIRE_RL_scemi_msg_sink_noc_inactive:
	  scemi_rSceMi1MsgIn$D_IN = 1'd0;
      default: scemi_rSceMi1MsgIn$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_rSceMi1MsgIn$EN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_disregard_packet ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_outport_ack_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_process_inport_data ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi1_decode_scemi_header ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_inactive ;

  // register scemi_rSceMi1MsgOut
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1 or
	  scemi_rOutMsgBytes_989_ULE_4___d2183 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 or
	  value__h202501 or MUX_scemi_rSceMi1MsgOut$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1:
	  scemi_rSceMi1MsgOut$D_IN = !scemi_rOutMsgBytes_989_ULE_4___d2183;
      WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1:
	  scemi_rSceMi1MsgOut$D_IN = value__h202501 != 9'd0;
      MUX_scemi_rSceMi1MsgOut$write_1__SEL_3: scemi_rSceMi1MsgOut$D_IN = 1'd0;
      default: scemi_rSceMi1MsgOut$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_rSceMi1MsgOut$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other ;

  // register scemi_rSceMi2MsgIn
  always@(WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb or
	  scemi_fFromBridgeBeat_ifc_rStorage or
	  MUX_scemi_rSceMi2MsgIn$write_1__SEL_2 or
	  scemi_rInMsgBytes_678_ULE_4___d1721 or
	  WILL_FIRE_RL_scemi_msg_sink_noc_inactive)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb:
	  scemi_rSceMi2MsgIn$D_IN =
	      scemi_fFromBridgeBeat_ifc_rStorage[31:26] == 6'b101011;
      MUX_scemi_rSceMi2MsgIn$write_1__SEL_2:
	  scemi_rSceMi2MsgIn$D_IN = !scemi_rInMsgBytes_678_ULE_4___d1721;
      WILL_FIRE_RL_scemi_msg_sink_noc_inactive:
	  scemi_rSceMi2MsgIn$D_IN = 1'd0;
      default: scemi_rSceMi2MsgIn$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_rSceMi2MsgIn$EN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_decode_noc_header_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_disregard_packet ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_scemi2_decode_scemi_header_4bpb ||
	     WILL_FIRE_RL_scemi_msg_sink_noc_inactive ;

  // register scemi_rSceMi2MsgOut
  always@(WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2 or
	  scemi_rOutMsgBytes_989_ULE_4___d2183 or
	  WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 or
	  value__h207022 or MUX_scemi_rSceMi2MsgOut$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2:
	  scemi_rSceMi2MsgOut$D_IN = !scemi_rOutMsgBytes_989_ULE_4___d2183;
      WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2:
	  scemi_rSceMi2MsgOut$D_IN = value__h207022 != 9'd0;
      MUX_scemi_rSceMi2MsgOut$write_1__SEL_3: scemi_rSceMi2MsgOut$D_IN = 1'd0;
      default: scemi_rSceMi2MsgOut$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign scemi_rSceMi2MsgOut$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other ;

  // register scemi_rSendInvalid
  assign scemi_rSendInvalid$D_IN =
	     WILL_FIRE_RL_scemi_process_incoming_packets &&
	     MUX_scemi_rSendInvalid$write_1__VAL_1 ;
  assign scemi_rSendInvalid$EN =
	     WILL_FIRE_RL_scemi_process_incoming_packets ||
	     WILL_FIRE_RL_scemi_send_invalid_packets ;

  // register scemi_rcb_cr
  assign scemi_rcb_cr$D_IN = 8'd64 << scemi_pcie_ep$cfg_lcommand[3] ;
  assign scemi_rcb_cr$EN = 1'd1 ;

  // register scemi_rcb_mask
  assign scemi_rcb_mask$D_IN = (scemi_rcb_cr == 8'd64) ? 7'h3F : 7'h7F ;
  assign scemi_rcb_mask$EN = 1'd1 ;

  // register scemi_rstgen_init
  assign scemi_rstgen_init$D_IN = 1'd1 ;
  assign scemi_rstgen_init$EN = CAN_FIRE_RL_scemi_rstgen_trigger ;

  // register scemi_rvPrevMsgGrant
  assign scemi_rvPrevMsgGrant$D_IN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages ?
	       MUX_scemi_rvPrevMsgGrant$write_1__VAL_1 :
	       3'd0 ;
  assign scemi_rvPrevMsgGrant$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ;

  // register scemi_rvPrevPrevMsgGrant
  assign scemi_rvPrevPrevMsgGrant$D_IN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages ?
	       scemi_rvPrevMsgGrant :
	       3'd0 ;
  assign scemi_rvPrevPrevMsgGrant$EN =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_arbitrate_transmit_messages ||
	     WILL_FIRE_RL_scemi_msg_source_noc_inactive ;

  // register scemi_scemi_clkgen_rAddress
  assign scemi_scemi_clkgen_rAddress$D_IN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_address_state ?
	       MUX_scemi_scemi_clkgen_rAddress$write_1__VAL_1 :
	       7'd0 ;
  assign scemi_scemi_clkgen_rAddress$EN =
	     MUX_scemi_scemi_clkgen_rReset$write_1__SEL_2 ;

  // register scemi_scemi_clkgen_rCount
  always@(WILL_FIRE_RL_scemi_scemi_clkgen_wait_write_ready or
	  MUX_scemi_scemi_clkgen_rCount$write_1__VAL_1 or
	  WILL_FIRE_RL_scemi_scemi_clkgen_restart_state or
	  WILL_FIRE_RL_scemi_scemi_clkgen_wait_lock_state)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_scemi_scemi_clkgen_wait_write_ready:
	  scemi_scemi_clkgen_rCount$D_IN =
	      MUX_scemi_scemi_clkgen_rCount$write_1__VAL_1;
      WILL_FIRE_RL_scemi_scemi_clkgen_restart_state:
	  scemi_scemi_clkgen_rCount$D_IN = 5'd0;
      WILL_FIRE_RL_scemi_scemi_clkgen_wait_lock_state:
	  scemi_scemi_clkgen_rCount$D_IN = 5'd22;
      default: scemi_scemi_clkgen_rCount$D_IN =
		   5'b01010 /* unspecified value */ ;
    endcase
  end
  assign scemi_scemi_clkgen_rCount$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_wait_write_ready ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_restart_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_wait_lock_state ;

  // register scemi_scemi_clkgen_rMMCM_clk_div
  assign scemi_scemi_clkgen_rMMCM_clk_div$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clk_div$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h10 ;

  // register scemi_scemi_clkgen_rMMCM_clk_fb_1
  assign scemi_scemi_clkgen_rMMCM_clk_fb_1$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clk_fb_1$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h11 ;

  // register scemi_scemi_clkgen_rMMCM_clk_fb_2
  assign scemi_scemi_clkgen_rMMCM_clk_fb_2$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clk_fb_2$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h12 ;

  // register scemi_scemi_clkgen_rMMCM_clkout0_1
  assign scemi_scemi_clkgen_rMMCM_clkout0_1$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout0_1$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h02 ;

  // register scemi_scemi_clkgen_rMMCM_clkout0_2
  assign scemi_scemi_clkgen_rMMCM_clkout0_2$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout0_2$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h03 ;

  // register scemi_scemi_clkgen_rMMCM_clkout1_1
  assign scemi_scemi_clkgen_rMMCM_clkout1_1$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout1_1$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h04 ;

  // register scemi_scemi_clkgen_rMMCM_clkout1_2
  assign scemi_scemi_clkgen_rMMCM_clkout1_2$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout1_2$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h05 ;

  // register scemi_scemi_clkgen_rMMCM_clkout2_1
  assign scemi_scemi_clkgen_rMMCM_clkout2_1$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout2_1$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h06 ;

  // register scemi_scemi_clkgen_rMMCM_clkout2_2
  assign scemi_scemi_clkgen_rMMCM_clkout2_2$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout2_2$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h07 ;

  // register scemi_scemi_clkgen_rMMCM_clkout3_1
  assign scemi_scemi_clkgen_rMMCM_clkout3_1$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout3_1$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h08 ;

  // register scemi_scemi_clkgen_rMMCM_clkout3_2
  assign scemi_scemi_clkgen_rMMCM_clkout3_2$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout3_2$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h09 ;

  // register scemi_scemi_clkgen_rMMCM_clkout4_1
  assign scemi_scemi_clkgen_rMMCM_clkout4_1$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout4_1$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h0A ;

  // register scemi_scemi_clkgen_rMMCM_clkout4_2
  assign scemi_scemi_clkgen_rMMCM_clkout4_2$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout4_2$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h0B ;

  // register scemi_scemi_clkgen_rMMCM_clkout5_1
  assign scemi_scemi_clkgen_rMMCM_clkout5_1$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout5_1$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h0C ;

  // register scemi_scemi_clkgen_rMMCM_clkout5_2
  assign scemi_scemi_clkgen_rMMCM_clkout5_2$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout5_2$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h0D ;

  // register scemi_scemi_clkgen_rMMCM_clkout6_1
  assign scemi_scemi_clkgen_rMMCM_clkout6_1$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout6_1$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h0E ;

  // register scemi_scemi_clkgen_rMMCM_clkout6_2
  assign scemi_scemi_clkgen_rMMCM_clkout6_2$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_clkout6_2$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h0F ;

  // register scemi_scemi_clkgen_rMMCM_filter_1
  assign scemi_scemi_clkgen_rMMCM_filter_1$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_filter_1$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h16 ;

  // register scemi_scemi_clkgen_rMMCM_filter_2
  assign scemi_scemi_clkgen_rMMCM_filter_2$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_filter_2$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h17 ;

  // register scemi_scemi_clkgen_rMMCM_lock_1
  assign scemi_scemi_clkgen_rMMCM_lock_1$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_lock_1$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h13 ;

  // register scemi_scemi_clkgen_rMMCM_lock_2
  assign scemi_scemi_clkgen_rMMCM_lock_2$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_lock_2$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h14 ;

  // register scemi_scemi_clkgen_rMMCM_lock_3
  assign scemi_scemi_clkgen_rMMCM_lock_3$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[15:0] ;
  assign scemi_scemi_clkgen_rMMCM_lock_3$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h15 ;

  // register scemi_scemi_clkgen_rMMCM_start
  assign scemi_scemi_clkgen_rMMCM_start$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[0] ;
  assign scemi_scemi_clkgen_rMMCM_start$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h01 ;

  // register scemi_scemi_clkgen_rMMCM_start_d1
  assign scemi_scemi_clkgen_rMMCM_start_d1$D_IN =
	     scemi_scemi_clkgen_rMMCM_start ;
  assign scemi_scemi_clkgen_rMMCM_start_d1$EN = 1'd1 ;

  // register scemi_scemi_clkgen_rMMCM_swrst
  assign scemi_scemi_clkgen_rMMCM_swrst$D_IN =
	     scemi_scemi_clkgen_fRequest$D_OUT[1] ;
  assign scemi_scemi_clkgen_rMMCM_swrst$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request &&
	     scemi_scemi_clkgen_fRequest$D_OUT[20:16] == 5'h01 ;

  // register scemi_scemi_clkgen_rReset
  assign scemi_scemi_clkgen_rReset$D_IN =
	     !WILL_FIRE_RL_scemi_scemi_clkgen_wait_lock_state ;
  assign scemi_scemi_clkgen_rReset$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_wait_lock_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_address_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_restart_state ;

  // register scemi_scemi_clkgen_rSel
  assign scemi_scemi_clkgen_rSel$D_IN =
	     scemi_scemi_clkgen_rSel_1$whas &&
	     !WILL_FIRE_RL_scemi_scemi_clkgen_restart_state ;
  assign scemi_scemi_clkgen_rSel$EN = 1'd1 ;

  // register scemi_scemi_clkgen_rState
  always@(MUX_scemi_scemi_clkgen_rState$write_1__SEL_1 or
	  WILL_FIRE_RL_scemi_scemi_clkgen_wait_write_ready or
	  MUX_scemi_scemi_clkgen_rState$write_1__VAL_2 or
	  WILL_FIRE_RL_scemi_scemi_clkgen_restart_state or
	  WILL_FIRE_RL_scemi_scemi_clkgen_wait_start_state or
	  WILL_FIRE_RL_scemi_scemi_clkgen_address_state or
	  WILL_FIRE_RL_scemi_scemi_clkgen_read_state or
	  WILL_FIRE_RL_scemi_scemi_clkgen_modify_state or
	  WILL_FIRE_RL_scemi_scemi_clkgen_write_state)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_scemi_clkgen_rState$write_1__SEL_1:
	  scemi_scemi_clkgen_rState$D_IN = 3'd2;
      WILL_FIRE_RL_scemi_scemi_clkgen_wait_write_ready:
	  scemi_scemi_clkgen_rState$D_IN =
	      MUX_scemi_scemi_clkgen_rState$write_1__VAL_2;
      WILL_FIRE_RL_scemi_scemi_clkgen_restart_state:
	  scemi_scemi_clkgen_rState$D_IN = 3'd1;
      WILL_FIRE_RL_scemi_scemi_clkgen_wait_start_state:
	  scemi_scemi_clkgen_rState$D_IN = 3'd3;
      WILL_FIRE_RL_scemi_scemi_clkgen_address_state:
	  scemi_scemi_clkgen_rState$D_IN = 3'd4;
      WILL_FIRE_RL_scemi_scemi_clkgen_read_state:
	  scemi_scemi_clkgen_rState$D_IN = 3'd5;
      WILL_FIRE_RL_scemi_scemi_clkgen_modify_state:
	  scemi_scemi_clkgen_rState$D_IN = 3'd6;
      WILL_FIRE_RL_scemi_scemi_clkgen_write_state:
	  scemi_scemi_clkgen_rState$D_IN = 3'd7;
      default: scemi_scemi_clkgen_rState$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign scemi_scemi_clkgen_rState$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_wait_lock_state &&
	     scemi_scemi_clkgen_mmcm$LOCKED ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_wait_write_ready ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_restart_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_wait_start_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_address_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_read_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_modify_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_write_state ;

  // register scemi_scemi_clkgen_rWrData
  assign scemi_scemi_clkgen_rWrData$D_IN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_modify_state ?
	       MUX_scemi_scemi_clkgen_rWrData$write_1__VAL_1 :
	       16'd0 ;
  assign scemi_scemi_clkgen_rWrData$EN =
	     WILL_FIRE_RL_scemi_scemi_clkgen_modify_state ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_restart_state ;

  // register scemi_scemi_clkgen_rWrEn
  assign scemi_scemi_clkgen_rWrEn$D_IN =
	     scemi_scemi_clkgen_rWrEn_1$whas &&
	     !WILL_FIRE_RL_scemi_scemi_clkgen_restart_state ;
  assign scemi_scemi_clkgen_rWrEn$EN = 1'd1 ;

  // register scemi_shutdown_ctrl_in_dataF_rv
  assign scemi_shutdown_ctrl_in_dataF_rv$D_IN =
	     scemi_shutdown_ctrl_in_dataF_rv$port2__read ;
  assign scemi_shutdown_ctrl_in_dataF_rv$EN = 1'b1 ;

  // register scemi_shutdown_ctrl_in_in_reset_noc
  assign scemi_shutdown_ctrl_in_in_reset_noc$D_IN =
	     !WILL_FIRE_RL_scemi_shutdown_ctrl_in_complete_reset_sequence ;
  assign scemi_shutdown_ctrl_in_in_reset_noc$EN =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_complete_reset_sequence ||
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_initiate_reset_sequence ;

  // register scemi_shutdown_ctrl_in_in_reset_uclk
  assign scemi_shutdown_ctrl_in_in_reset_uclk$D_IN = 1'd0 ;
  assign scemi_shutdown_ctrl_in_in_reset_uclk$EN =
	     scemi_shutdown_ctrl_in_in_reset_uclk ;

  // register scemi_shutdown_ctrl_in_prev_reset_uclk
  assign scemi_shutdown_ctrl_in_prev_reset_uclk$D_IN =
	     scemi_shutdown_ctrl_in_in_reset_uclk ;
  assign scemi_shutdown_ctrl_in_prev_reset_uclk$EN = 1'd1 ;

  // register scemi_shutdown_ctrl_in_remaining
  assign scemi_shutdown_ctrl_in_remaining$D_IN =
	     MUX_scemi_shutdown_ctrl_in_remaining$write_1__SEL_1 &&
	     MUX_scemi_shutdown_ctrl_in_remaining$write_1__VAL_1 ;
  assign scemi_shutdown_ctrl_in_remaining$EN =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_update_remaining &&
	     (scemi_shutdown_ctrl_in_got_beat_pw$whas ||
	      scemi_shutdown_ctrl_in_wait_sp$dPulse) ||
	     scemi_shutdown_ctrl_in_in_reset_noc ;

  // register scemi_shutdown_ctrl_in_requestF_rv
  assign scemi_shutdown_ctrl_in_requestF_rv$D_IN = 1'b1 ;
  assign scemi_shutdown_ctrl_in_requestF_rv$EN = 1'b1 ;

  // register scemi_shutdown_ctrl_in_scemiInportBeats
  assign scemi_shutdown_ctrl_in_scemiInportBeats$D_IN =
	     scemi_fFromBridgeBeat_ifc_rStorage[31:0] ;
  assign scemi_shutdown_ctrl_in_scemiInportBeats$EN =
	     scemi_shutdown_ctrl_in_got_beat_pw$whas ;

  // register scemi_shutdown_ctrl_in_status
  always@(MUX_scemi_shutdown_ctrl_in_status$_write_1__SEL_1 or
	  WILL_FIRE_RL_scemi_shutdown_ctrl_in_data_ready or
	  WILL_FIRE_RL_scemi_shutdown_ctrl_in_read_complete)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_shutdown_ctrl_in_status$_write_1__SEL_1:
	  scemi_shutdown_ctrl_in_status$D_IN = 2'd1;
      WILL_FIRE_RL_scemi_shutdown_ctrl_in_data_ready:
	  scemi_shutdown_ctrl_in_status$D_IN = 2'd2;
      WILL_FIRE_RL_scemi_shutdown_ctrl_in_read_complete:
	  scemi_shutdown_ctrl_in_status$D_IN = 2'd3;
      default: scemi_shutdown_ctrl_in_status$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign scemi_shutdown_ctrl_in_status$EN =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_port_reset ||
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_first_request ||
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_data_ready ||
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_read_complete ;

  // register scemi_shutdown_ctrl_out_beats
  assign scemi_shutdown_ctrl_out_beats$D_IN = 32'd1 ;
  assign scemi_shutdown_ctrl_out_beats$EN =
	     MUX_scemi_init_state_msgFIFO$enq_1__SEL_1 ;

  // register scemi_shutdown_ctrl_out_count
  assign scemi_shutdown_ctrl_out_count$D_IN =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_out_update_count &&
	     MUX_scemi_shutdown_ctrl_out_count$write_1__VAL_1 ;
  assign scemi_shutdown_ctrl_out_count$EN =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_out_update_count ||
	     scemi_shutdown_ctrl_out_in_reset_noc ;

  // register scemi_shutdown_ctrl_out_in_reset_noc
  assign scemi_shutdown_ctrl_out_in_reset_noc$D_IN =
	     !WILL_FIRE_RL_scemi_shutdown_ctrl_out_complete_reset_sequence ;
  assign scemi_shutdown_ctrl_out_in_reset_noc$EN =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_out_complete_reset_sequence ||
	     WILL_FIRE_RL_scemi_shutdown_ctrl_out_initiate_reset_sequence ;

  // register scemi_shutdown_ctrl_out_in_reset_uclk
  assign scemi_shutdown_ctrl_out_in_reset_uclk$D_IN = 1'd0 ;
  assign scemi_shutdown_ctrl_out_in_reset_uclk$EN =
	     scemi_shutdown_ctrl_out_in_reset_uclk ;

  // register scemi_shutdown_ctrl_out_ok
  assign scemi_shutdown_ctrl_out_ok$D_IN =
	     scemi_shutdown_ctrl_out_finished$dPulse ;
  assign scemi_shutdown_ctrl_out_ok$EN =
	     WILL_FIRE_RL_scemi_shutdown_ack &&
	     scemi_shutdown_ctrl_in_dataF_rv$port1__read[0] ||
	     scemi_shutdown_ctrl_out_finished$dPulse ;

  // register scemi_shutdown_ctrl_out_prev_reset_uclk
  assign scemi_shutdown_ctrl_out_prev_reset_uclk$D_IN =
	     scemi_shutdown_ctrl_out_in_reset_uclk ;
  assign scemi_shutdown_ctrl_out_prev_reset_uclk$EN = 1'd1 ;

  // register scemi_shutdown_shutdown_pending
  assign scemi_shutdown_shutdown_pending$D_IN = 1'd1 ;
  assign scemi_shutdown_shutdown_pending$EN =
	     MUX_scemi_init_state_msgFIFO$enq_1__SEL_1 ;

  // register scemi_start_inport_dataF_rv
  assign scemi_start_inport_dataF_rv$D_IN =
	     scemi_start_inport_dataF_rv$port2__read ;
  assign scemi_start_inport_dataF_rv$EN = 1'b1 ;

  // register scemi_start_inport_in_reset_noc
  assign scemi_start_inport_in_reset_noc$D_IN =
	     !WILL_FIRE_RL_scemi_start_inport_complete_reset_sequence ;
  assign scemi_start_inport_in_reset_noc$EN =
	     WILL_FIRE_RL_scemi_start_inport_complete_reset_sequence ||
	     WILL_FIRE_RL_scemi_start_inport_initiate_reset_sequence ;

  // register scemi_start_inport_in_reset_uclk
  assign scemi_start_inport_in_reset_uclk$D_IN = 1'd0 ;
  assign scemi_start_inport_in_reset_uclk$EN =
	     scemi_start_inport_in_reset_uclk ;

  // register scemi_start_inport_prev_reset_uclk
  assign scemi_start_inport_prev_reset_uclk$D_IN =
	     scemi_start_inport_in_reset_uclk ;
  assign scemi_start_inport_prev_reset_uclk$EN = 1'd1 ;

  // register scemi_start_inport_remaining
  assign scemi_start_inport_remaining$D_IN =
	     MUX_scemi_start_inport_remaining$write_1__SEL_1 &&
	     MUX_scemi_start_inport_remaining$write_1__VAL_1 ;
  assign scemi_start_inport_remaining$EN =
	     WILL_FIRE_RL_scemi_start_inport_update_remaining &&
	     (scemi_start_inport_got_beat_pw$whas ||
	      scemi_start_inport_wait_sp$dPulse) ||
	     scemi_start_inport_in_reset_noc ;

  // register scemi_start_inport_requestF_rv
  assign scemi_start_inport_requestF_rv$D_IN = 1'b1 ;
  assign scemi_start_inport_requestF_rv$EN = 1'b1 ;

  // register scemi_start_inport_scemiInportBeats
  assign scemi_start_inport_scemiInportBeats$D_IN =
	     scemi_fFromBridgeBeat_ifc_rStorage[31:0] ;
  assign scemi_start_inport_scemiInportBeats$EN =
	     scemi_start_inport_got_beat_pw$whas ;

  // register scemi_start_inport_status
  always@(MUX_scemi_start_inport_status$_write_1__SEL_1 or
	  WILL_FIRE_RL_scemi_start_inport_data_ready or
	  WILL_FIRE_RL_scemi_start_inport_read_complete)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_start_inport_status$_write_1__SEL_1:
	  scemi_start_inport_status$D_IN = 2'd1;
      WILL_FIRE_RL_scemi_start_inport_data_ready:
	  scemi_start_inport_status$D_IN = 2'd2;
      WILL_FIRE_RL_scemi_start_inport_read_complete:
	  scemi_start_inport_status$D_IN = 2'd3;
      default: scemi_start_inport_status$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign scemi_start_inport_status$EN =
	     WILL_FIRE_RL_scemi_start_inport_port_reset ||
	     WILL_FIRE_RL_scemi_start_inport_first_request ||
	     WILL_FIRE_RL_scemi_start_inport_data_ready ||
	     WILL_FIRE_RL_scemi_start_inport_read_complete ;

  // submodule clk_gen_pll
  assign clk_gen_pll$CLKFBIN = clk_gen_pll_clkfbbuf$O ;

  // submodule connectDDR3_reqFIFO
  assign connectDDR3_reqFIFO$sD_IN = scemi_reqFifo$dD_OUT ;
  assign connectDDR3_reqFIFO$sENQ =
	     CAN_FIRE_RL_connectDDR3_connectReqUser_mkConnectionGetPut ;
  assign connectDDR3_reqFIFO$dDEQ = CAN_FIRE_RL_connectDDR3_connect_requests ;

  // submodule connectDDR3_respFIFO
  assign connectDDR3_respFIFO$sD_IN = ddr3_ctrl_fResponse$D_OUT ;
  assign connectDDR3_respFIFO$sENQ =
	     CAN_FIRE_RL_connectDDR3_connect_responses ;
  assign connectDDR3_respFIFO$dDEQ =
	     CAN_FIRE_RL_connectDDR3_connectRespUser_mkConnectionGetPut ;

  // submodule ddr3_ctrl
  assign ddr3_ctrl$app_addr =
	     ddr3_ctrl_pwAppEn$whas ?
	       ddr3_ctrl_fRequest$D_OUT[540:512] :
	       29'd0 ;
  assign ddr3_ctrl$app_cmd = ddr3_ctrl_wAppCmd$whas ? x_wget__h3421 : 3'd0 ;
  assign ddr3_ctrl$app_en = ddr3_ctrl_pwAppEn$whas ;
  assign ddr3_ctrl$app_wdf_data =
	     ddr3_ctrl_wAppWdfMask$whas ? x_wget__h3651 : 256'd0 ;
  assign ddr3_ctrl$app_wdf_end =
	     CAN_FIRE_RL_ddr3_ctrl_ready_process_write_request_second ;
  assign ddr3_ctrl$app_wdf_mask =
	     ddr3_ctrl_wAppWdfMask$whas ? x_wget__h3575 : 32'hFFFFFFFF ;
  assign ddr3_ctrl$app_wdf_wren = ddr3_ctrl_pwAppWdfWren$whas ;

  // submodule ddr3_ctrl_dly_reset_n_rstifc
  assign ddr3_ctrl_dly_reset_n_rstifc$ASSERT_IN =
	     CAN_FIRE_RL_ddr3_ctrl_dly_reset_n_count_down ;

  // submodule ddr3_ctrl_fRequest
  assign ddr3_ctrl_fRequest$D_IN =
	     { mask__h248733,
	       addr__h248732,
	       connectDDR3_reqFIFO$dD_OUT[511:0] } ;
  assign ddr3_ctrl_fRequest$ENQ = CAN_FIRE_RL_connectDDR3_connect_requests ;
  assign ddr3_ctrl_fRequest$DEQ =
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_read_request ||
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_second ;
  assign ddr3_ctrl_fRequest$CLR = 1'b0 ;

  // submodule ddr3_ctrl_fResponse
  assign ddr3_ctrl_fResponse$D_IN =
	     { ddr3_ctrl$app_rd_data, ddr3_ctrl_rFirstResponse } ;
  assign ddr3_ctrl_fResponse$ENQ =
	     CAN_FIRE_RL_ddr3_ctrl_ready_process_read_response_second ;
  assign ddr3_ctrl_fResponse$DEQ = CAN_FIRE_RL_connectDDR3_connect_responses ;
  assign ddr3_ctrl_fResponse$CLR = 1'b0 ;

  // submodule ddr3_ctrl_rReadsPending
  assign ddr3_ctrl_rReadsPending$DATA_A = 32'd2 ;
  assign ddr3_ctrl_rReadsPending$DATA_B = 32'hFFFFFFFF ;
  assign ddr3_ctrl_rReadsPending$DATA_C = 32'h0 ;
  assign ddr3_ctrl_rReadsPending$DATA_F = 32'h0 ;
  assign ddr3_ctrl_rReadsPending$ADDA =
	     CAN_FIRE_RL_ddr3_ctrl_ready_process_read_request ;
  assign ddr3_ctrl_rReadsPending$ADDB =
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_read_response_second ||
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_read_response_first ;
  assign ddr3_ctrl_rReadsPending$SETC = 1'b0 ;
  assign ddr3_ctrl_rReadsPending$SETF = 1'b0 ;

  // submodule scemi_1_outFifo
  assign scemi_1_outFifo$D_IN =
	     scemi_1_fifoTxData_read_block ?
	       ((!scemi_1_fifoTxData_elem1_status_1__read__94_EQ_ETC___d596 &&
		 scemi_1_fifoTxData_elem1_status_0__read__97_EQ_ETC___d598) ?
		  scemi_1_fifoTxData_block1[161:81] :
		  scemi_1_fifoTxData_block1[80:0]) :
	       ((!scemi_1_fifoTxData_elem0_status_1__read__85_EQ_ETC___d587 &&
		 scemi_1_fifoTxData_elem0_status_0__read__88_EQ_ETC___d589) ?
		  scemi_1_fifoTxData_block0[161:81] :
		  scemi_1_fifoTxData_block0[80:0]) ;
  assign scemi_1_outFifo$ENQ = CAN_FIRE_RL_scemi_1_process_outgoing_packets ;
  assign scemi_1_outFifo$DEQ = CAN_FIRE_RL_scemi_1_send_data ;
  assign scemi_1_outFifo$CLR = 1'b0 ;

  // submodule scemi_Prelude_inst_changeSpecialWires_outstanding
  assign scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_A = 5'd1 ;
  assign scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_B = 5'd31 ;
  assign scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_C = 5'h0 ;
  assign scemi_Prelude_inst_changeSpecialWires_outstanding$DATA_F = 5'h0 ;
  assign scemi_Prelude_inst_changeSpecialWires_outstanding$ADDA =
	     WILL_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_request &&
	     !scemi_dut_dut_dutIfc_m_dut$ddr3client_request_get[600] ;
  assign scemi_Prelude_inst_changeSpecialWires_outstanding$ADDB =
	     CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_forward ;
  assign scemi_Prelude_inst_changeSpecialWires_outstanding$SETC = 1'b0 ;
  assign scemi_Prelude_inst_changeSpecialWires_outstanding$SETF = 1'b0 ;

  // submodule scemi_Prelude_inst_changeSpecialWires_respbuf
  assign scemi_Prelude_inst_changeSpecialWires_respbuf$D_IN =
	     scemi_respFifo$dD_OUT ;
  assign scemi_Prelude_inst_changeSpecialWires_respbuf$ENQ =
	     CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_response ;
  assign scemi_Prelude_inst_changeSpecialWires_respbuf$DEQ =
	     CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_forward ;
  assign scemi_Prelude_inst_changeSpecialWires_respbuf$CLR = 1'b0 ;

  // submodule scemi_bridge
  assign scemi_bridge$clocks_response_put =
	     { 16'd0, scemi_scemi_clkgen_fResponse$D_OUT } ;
  assign scemi_bridge$noc_in_beat_v = scemi_fToBridgeBeat$D_OUT ;
  assign scemi_bridge$noc_in_src_rdy_b = scemi_fToBridgeBeat$EMPTY_N ;
  assign scemi_bridge$noc_out_dst_rdy_b =
	     NOT_scemi_fFromBridgeBeat_ifc_rDataAvail_576_U_ETC___d1660 ;
  assign scemi_bridge$status_bluenoc_link_is_up_i =
	     scemi_bridge$is_activated ;
  assign scemi_bridge$status_interrupts_enabled_i = scemi_intr_on ;
  assign scemi_bridge$status_memory_enabled_i =
	     ddr3_ctrl$init_calib_complete ;
  assign scemi_bridge$status_out_of_reset_i = scemi_wIsOutOfReset$DOUT ;
  assign scemi_bridge$status_pcie_link_is_up_i = scemi_pcie_ep$user_lnk_up ;
  assign scemi_bridge$tlps_snd_put =
	     scemi_fifoRxData_read_block ?
	       { scemi_fifoRxData_elem_2[80],
		 scemi_fifoRxData_elem_3[79],
		 scemi_fifoRxData_elem_2[78:64],
		 scemi_fifoRxData_elem_3[71:64],
		 scemi_fifoRxData_elem_2[63:0],
		 scemi_fifoRxData_elem_3[63:0] } :
	       { scemi_fifoRxData_elem_0[80],
		 scemi_fifoRxData_elem_1[79],
		 scemi_fifoRxData_elem_0[78:64],
		 scemi_fifoRxData_elem_1[71:64],
		 scemi_fifoRxData_elem_0[63:0],
		 scemi_fifoRxData_elem_1[63:0] } ;
  assign scemi_bridge$EN_tlps_fst_get = CAN_FIRE_RL_scemi_1_get_data ;
  assign scemi_bridge$EN_tlps_snd_put = CAN_FIRE_RL_scemi_send_data ;
  assign scemi_bridge$EN_msi_interrupt_clear = 1'b0 ;
  assign scemi_bridge$EN_clocks_request_get =
	     CAN_FIRE_RL_scemi_mkConnectionGetPut ;
  assign scemi_bridge$EN_clocks_response_put =
	     CAN_FIRE_RL_scemi_1_mkConnectionGetPut ;

  // submodule scemi_clk_port_clkgen
  assign scemi_clk_port_clkgen$CLK_IN =
	     scemi_clockGenerators_clock_gens_counters_count == 32'd0 ;
  assign scemi_clk_port_clkgen$COND_IN = 1'b0 ;
  assign scemi_clk_port_clkgen$CLK_IN_EN =
	     (scemi_clockGenerators_clock_gens_counters_count == 32'd0 ||
	      scemi_clockGenerators_clock_gens_counters_count == 32'd1) &&
	     !CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall ;
  assign scemi_clk_port_clkgen$COND_IN_EN = 1'b0 ;

  // submodule scemi_clk_port_rstgen_inv_rstgen
  assign scemi_clk_port_rstgen_inv_rstgen$ASSERT_IN =
	     CAN_FIRE_RL_scemi_clk_port_rstgen_trigger ;

  // submodule scemi_clk_port_rstgen_rstgen
  assign scemi_clk_port_rstgen_rstgen$ASSERT_IN =
	     CAN_FIRE_RL_scemi_clockGenerators_handle_reset ;

  // submodule scemi_clkgen_pll
  assign scemi_clkgen_pll$CLKFBIN = scemi_clkgen_pll_clkfbbuf$O ;

  // submodule scemi_clockGenerators_clock_gens_counters_pre_negedge_uclk
  assign scemi_clockGenerators_clock_gens_counters_pre_negedge_uclk$sD_IN =
	     IF_scemi_clockGenerators_clock_gens_counters_c_ETC___d1480 ==
	     32'd1 ;
  assign scemi_clockGenerators_clock_gens_counters_pre_negedge_uclk$sEN =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_incr ;

  // submodule scemi_clockGenerators_clock_gens_counters_pre_posedge_uclk
  assign scemi_clockGenerators_clock_gens_counters_pre_posedge_uclk$sD_IN =
	     IF_scemi_clockGenerators_clock_gens_counters_c_ETC___d1480 ==
	     32'd0 ;
  assign scemi_clockGenerators_clock_gens_counters_pre_posedge_uclk$sEN =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_incr ;

  // submodule scemi_clockGenerators_one_to_one_cclock_pre_negedge_uclk
  assign scemi_clockGenerators_one_to_one_cclock_pre_negedge_uclk$sD_IN =
	     IF_scemi_clockGenerators_one_to_one_cclock_cou_ETC___d1530 ==
	     32'd1 ;
  assign scemi_clockGenerators_one_to_one_cclock_pre_negedge_uclk$sEN =
	     CAN_FIRE_RL_scemi_clockGenerators_one_to_one_cclock_incr ;

  // submodule scemi_clockGenerators_one_to_one_cclock_pre_posedge_uclk
  assign scemi_clockGenerators_one_to_one_cclock_pre_posedge_uclk$sD_IN =
	     IF_scemi_clockGenerators_one_to_one_cclock_cou_ETC___d1530 ==
	     32'd0 ;
  assign scemi_clockGenerators_one_to_one_cclock_pre_posedge_uclk$sEN =
	     CAN_FIRE_RL_scemi_clockGenerators_one_to_one_cclock_incr ;

  // submodule scemi_count_outport_ending_reset
  assign scemi_count_outport_ending_reset$sEN =
	     !scemi_count_outport_in_reset_uclk &&
	     scemi_count_outport_prev_reset_uclk ;

  // submodule scemi_count_outport_finished
  assign scemi_count_outport_finished$sEN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks &&
	     scemi_fS1OutPortAcks_ifc_rStorage[9:0] == 10'd3 ;

  // submodule scemi_count_outport_next
  assign scemi_count_outport_next$sEN =
	     CAN_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut ;

  // submodule scemi_count_outport_starting_reset
  assign scemi_count_outport_starting_reset$sEN =
	     scemi_count_outport_in_reset_uclk ;

  // submodule scemi_count_res_fifo
  assign scemi_count_res_fifo$sD_IN = scemi_dut_dut_dutIfc_m_dut$count_get ;
  assign scemi_count_res_fifo$sENQ =
	     CAN_FIRE_RL_scemi_count_connect_get_mkConnectionGetPut ;
  assign scemi_count_res_fifo$dDEQ =
	     CAN_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut ;

  // submodule scemi_data_req_inport_buffer_empty_sp
  assign scemi_data_req_inport_buffer_empty_sp$sEN =
	     WILL_FIRE_RL_scemi_data_req_inport_update_remaining &&
	     !scemi_data_req_inport_got_beat_pw$whas &&
	     scemi_data_req_inport_next_sp$dPulse ;

  // submodule scemi_data_req_inport_buffer_full_sp
  assign scemi_data_req_inport_buffer_full_sp$sEN =
	     WILL_FIRE_RL_scemi_data_req_inport_update_remaining &&
	     scemi_data_req_inport_got_beat_pw$whas &&
	     scemi_data_req_inport_remaining ;

  // submodule scemi_data_req_inport_ending_reset
  assign scemi_data_req_inport_ending_reset$sEN =
	     !scemi_data_req_inport_in_reset_uclk &&
	     scemi_data_req_inport_prev_reset_uclk ;

  // submodule scemi_data_req_inport_next_sp
  assign scemi_data_req_inport_next_sp$sEN =
	     WILL_FIRE_RL_scemi_data_req_inport_read_complete ||
	     WILL_FIRE_RL_scemi_data_req_inport_first_request ;

  // submodule scemi_data_req_inport_starting_reset
  assign scemi_data_req_inport_starting_reset$sEN =
	     scemi_data_req_inport_in_reset_uclk ;

  // submodule scemi_data_req_inport_wait_sp
  assign scemi_data_req_inport_wait_sp$sEN =
	     MUX_scemi_data_req_inport_status$_write_1__SEL_1 ;

  // submodule scemi_data_req_res_fifo
  assign scemi_data_req_res_fifo$sD_IN =
	     scemi_data_req_inport_dataF_rv$port1__read[3:0] ;
  assign scemi_data_req_res_fifo$sENQ =
	     CAN_FIRE_RL_scemi_data_req_connect_res_mkConnectionGetPut ;
  assign scemi_data_req_res_fifo$dDEQ =
	     CAN_FIRE_RL_scemi_data_req_connect_put_mkConnectionGetPut ;

  // submodule scemi_data_resp_outport_ending_reset
  assign scemi_data_resp_outport_ending_reset$sEN =
	     !scemi_data_resp_outport_in_reset_uclk &&
	     scemi_data_resp_outport_prev_reset_uclk ;

  // submodule scemi_data_resp_outport_finished
  assign scemi_data_resp_outport_finished$sEN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks &&
	     scemi_fS1OutPortAcks_ifc_rStorage[9:0] == 10'd2 ;

  // submodule scemi_data_resp_outport_next
  assign scemi_data_resp_outport_next$sEN =
	     CAN_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut ;

  // submodule scemi_data_resp_outport_starting_reset
  assign scemi_data_resp_outport_starting_reset$sEN =
	     scemi_data_resp_outport_in_reset_uclk ;

  // submodule scemi_data_resp_res_fifo
  assign scemi_data_resp_res_fifo$sD_IN =
	     scemi_dut_dut_dutIfc_m_dut$data_response_get ;
  assign scemi_data_resp_res_fifo$sENQ =
	     CAN_FIRE_RL_scemi_data_resp_connect_get_mkConnectionGetPut ;
  assign scemi_data_resp_res_fifo$dDEQ =
	     CAN_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut ;

  // submodule scemi_dut_dut_dutIfc_didreset
  assign scemi_dut_dut_dutIfc_didreset$D_IN = 1'b0 /* unspecified value */  ;
  assign scemi_dut_dut_dutIfc_didreset$ENQ =
	     CAN_FIRE_RL_scemi_dut_dut_dutIfc_donerest ;
  assign scemi_dut_dut_dutIfc_didreset$DEQ =
	     CAN_FIRE_RL_scemi_dut_softrst_resp_connect_get_mkConnectionGetPut ;
  assign scemi_dut_dut_dutIfc_didreset$CLR = 1'b0 ;

  // submodule scemi_dut_dut_dutIfc_m_dut
  assign scemi_dut_dut_dutIfc_m_dut$data_request_put =
	     scemi_data_req_res_fifo$dD_OUT ;
  assign scemi_dut_dut_dutIfc_m_dut$ddr3client_response_put =
	     scemi_Prelude_inst_changeSpecialWires_respbuf$D_OUT ;
  assign scemi_dut_dut_dutIfc_m_dut$start_put = scemi_start_res_fifo$dD_OUT ;
  assign scemi_dut_dut_dutIfc_m_dut$EN_data_request_put =
	     CAN_FIRE_RL_scemi_data_req_connect_put_mkConnectionGetPut ;
  assign scemi_dut_dut_dutIfc_m_dut$EN_data_response_get =
	     CAN_FIRE_RL_scemi_data_resp_connect_get_mkConnectionGetPut ;
  assign scemi_dut_dut_dutIfc_m_dut$EN_start_put =
	     scemi_start_res_fifo$dEMPTY_N ;
  assign scemi_dut_dut_dutIfc_m_dut$EN_count_get =
	     CAN_FIRE_RL_scemi_count_connect_get_mkConnectionGetPut ;
  assign scemi_dut_dut_dutIfc_m_dut$EN_ddr3client_request_get =
	     CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_request ;
  assign scemi_dut_dut_dutIfc_m_dut$EN_ddr3client_response_put =
	     CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_forward ;

  // submodule scemi_dut_dut_dutIfc_myrst
  assign scemi_dut_dut_dutIfc_myrst$ASSERT_IN =
	     scemi_dut_softrst_req_res_fifo$dEMPTY_N ;

  // submodule scemi_dut_dut_prb_control_ackFifo
  assign scemi_dut_dut_prb_control_ackFifo$D_IN =
	     { IF_scemi_dut_dut_prb_control_control_in_dataF__ETC___d904,
	       16'hFFF9 } ;
  assign scemi_dut_dut_prb_control_ackFifo$ENQ =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd0 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd1 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd2 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd4 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd5 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd6 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12:0] !=
	      13'h1FFF) &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	      3'd3 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] !=
	      2'd2) &&
	     !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[16] ;
  assign scemi_dut_dut_prb_control_ackFifo$DEQ =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck ;
  assign scemi_dut_dut_prb_control_ackFifo$CLR = 1'b0 ;

  // submodule scemi_dut_dut_prb_control_control_in_buffer_empty_sp
  assign scemi_dut_dut_prb_control_control_in_buffer_empty_sp$sEN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_update_remaining &&
	     !scemi_dut_dut_prb_control_control_in_got_beat_pw$whas &&
	     scemi_dut_dut_prb_control_control_in_next_sp$dPulse ;

  // submodule scemi_dut_dut_prb_control_control_in_buffer_full_sp
  assign scemi_dut_dut_prb_control_control_in_buffer_full_sp$sEN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_update_remaining &&
	     scemi_dut_dut_prb_control_control_in_got_beat_pw$whas &&
	     scemi_dut_dut_prb_control_control_in_remaining ;

  // submodule scemi_dut_dut_prb_control_control_in_ending_reset
  assign scemi_dut_dut_prb_control_control_in_ending_reset$sEN =
	     !scemi_dut_dut_prb_control_control_in_in_reset_uclk &&
	     scemi_dut_dut_prb_control_control_in_prev_reset_uclk ;

  // submodule scemi_dut_dut_prb_control_control_in_next_sp
  assign scemi_dut_dut_prb_control_control_in_next_sp$sEN =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_read_complete ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_control_in_first_request ;

  // submodule scemi_dut_dut_prb_control_control_in_starting_reset
  assign scemi_dut_dut_prb_control_control_in_starting_reset$sEN =
	     scemi_dut_dut_prb_control_control_in_in_reset_uclk ;

  // submodule scemi_dut_dut_prb_control_control_in_wait_sp
  assign scemi_dut_dut_prb_control_control_in_wait_sp$sEN =
	     MUX_scemi_dut_dut_prb_control_control_in_status$_write_1__SEL_1 ;

  // submodule scemi_dut_dut_prb_control_data_out_ending_reset
  assign scemi_dut_dut_prb_control_data_out_ending_reset$sEN =
	     !scemi_dut_dut_prb_control_data_out_in_reset_uclk &&
	     scemi_dut_dut_prb_control_data_out_prev_reset_uclk ;

  // submodule scemi_dut_dut_prb_control_data_out_finished
  assign scemi_dut_dut_prb_control_data_out_finished$sEN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks &&
	     scemi_fS1OutPortAcks_ifc_rStorage[9:0] == 10'd0 ;

  // submodule scemi_dut_dut_prb_control_data_out_next
  assign scemi_dut_dut_prb_control_data_out_next$sEN =
	     MUX_scemi_init_state_msgFIFO$enq_1__SEL_2 ;

  // submodule scemi_dut_dut_prb_control_data_out_starting_reset
  assign scemi_dut_dut_prb_control_data_out_starting_reset$sEN =
	     scemi_dut_dut_prb_control_data_out_in_reset_uclk ;

  // submodule scemi_dut_dut_prb_control_enff
  always@(MUX_scemi_dut_dut_prb_control_enff$enq_1__SEL_1 or
	  MUX_scemi_dut_dut_prb_control_enff$enq_1__VAL_1 or
	  WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger or
	  MUX_scemi_dut_dut_prb_control_enff$enq_1__VAL_2 or
	  MUX_scemi_dut_dut_prb_control_enff$enq_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_dut_dut_prb_control_enff$enq_1__SEL_1:
	  scemi_dut_dut_prb_control_enff$D_IN =
	      MUX_scemi_dut_dut_prb_control_enff$enq_1__VAL_1;
      WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger:
	  scemi_dut_dut_prb_control_enff$D_IN =
	      MUX_scemi_dut_dut_prb_control_enff$enq_1__VAL_2;
      MUX_scemi_dut_dut_prb_control_enff$enq_1__SEL_3:
	  scemi_dut_dut_prb_control_enff$D_IN = 19'd221178;
      default: scemi_dut_dut_prb_control_enff$D_IN =
		   19'b0101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign scemi_dut_dut_prb_control_enff$ENQ =
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveControl &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd0 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd1 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd2 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd4 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd5 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd6 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12:0] !=
	      13'h1FFF) &&
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	      10'd1023 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] !=
	      3'd3 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] !=
	      2'd2) ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_unsetFlag ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_setSample ;
  assign scemi_dut_dut_prb_control_enff$DEQ =
	     scemi_dut_dut_prb_control_enff$EMPTY_N ;
  assign scemi_dut_dut_prb_control_enff$CLR = 1'b0 ;

  // submodule scemi_dut_dut_prb_control_prb_str
  assign scemi_dut_dut_prb_control_prb_str$D_IN =
	     scemi_dut_dut_probeHook$DATAUP ;
  assign scemi_dut_dut_prb_control_prb_str$ENQ =
	     CAN_FIRE_RL_scemi_dut_dut_prb_control_prb_str_recv_doEnq ;
  assign scemi_dut_dut_prb_control_prb_str$DEQ =
	     MUX_scemi_dut_dut_prb_control_data_out_beats$_write_1__SEL_3 ;
  assign scemi_dut_dut_prb_control_prb_str$CLR = 1'b0 ;

  // submodule scemi_dut_dut_probeHook
  assign scemi_dut_dut_probeHook$CMD =
	     { CASE_scemi_dut_dut_prb_control_enffD_OUT_BITS_ETC__q7,
	       scemi_dut_dut_prb_control_enff$D_OUT[2:0] } ;
  assign scemi_dut_dut_probeHook$ACK =
	     scemi_dut_dut_prb_control_prb_str$FULL_N ;
  assign scemi_dut_dut_probeHook$CMDEN =
	     scemi_dut_dut_prb_control_enff$EMPTY_N ;
  assign scemi_dut_dut_probeHook$CTIMER =
	     CAN_FIRE_RL_scemi_clockGenerators_clock_gens_do_ticks ;

  // submodule scemi_dut_softrst_req_inport_buffer_empty_sp
  assign scemi_dut_softrst_req_inport_buffer_empty_sp$sEN =
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_update_remaining &&
	     !scemi_dut_softrst_req_inport_got_beat_pw$whas &&
	     scemi_dut_softrst_req_inport_next_sp$dPulse ;

  // submodule scemi_dut_softrst_req_inport_buffer_full_sp
  assign scemi_dut_softrst_req_inport_buffer_full_sp$sEN =
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_update_remaining &&
	     scemi_dut_softrst_req_inport_got_beat_pw$whas &&
	     scemi_dut_softrst_req_inport_remaining ;

  // submodule scemi_dut_softrst_req_inport_ending_reset
  assign scemi_dut_softrst_req_inport_ending_reset$sEN =
	     !scemi_dut_softrst_req_inport_in_reset_uclk &&
	     scemi_dut_softrst_req_inport_prev_reset_uclk ;

  // submodule scemi_dut_softrst_req_inport_next_sp
  assign scemi_dut_softrst_req_inport_next_sp$sEN =
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_read_complete ||
	     WILL_FIRE_RL_scemi_dut_softrst_req_inport_first_request ;

  // submodule scemi_dut_softrst_req_inport_starting_reset
  assign scemi_dut_softrst_req_inport_starting_reset$sEN =
	     scemi_dut_softrst_req_inport_in_reset_uclk ;

  // submodule scemi_dut_softrst_req_inport_wait_sp
  assign scemi_dut_softrst_req_inport_wait_sp$sEN =
	     MUX_scemi_dut_softrst_req_inport_status$_write_1__SEL_1 ;

  // submodule scemi_dut_softrst_req_res_fifo
  assign scemi_dut_softrst_req_res_fifo$sD_IN =
	     scemi_dut_softrst_req_inport_dataF_rv$port1__read[0] ;
  assign scemi_dut_softrst_req_res_fifo$sENQ =
	     CAN_FIRE_RL_scemi_dut_softrst_req_connect_res_mkConnectionGetPut ;
  assign scemi_dut_softrst_req_res_fifo$dDEQ =
	     scemi_dut_softrst_req_res_fifo$dEMPTY_N ;

  // submodule scemi_dut_softrst_resp_outport_ending_reset
  assign scemi_dut_softrst_resp_outport_ending_reset$sEN =
	     !scemi_dut_softrst_resp_outport_in_reset_uclk &&
	     scemi_dut_softrst_resp_outport_prev_reset_uclk ;

  // submodule scemi_dut_softrst_resp_outport_finished
  assign scemi_dut_softrst_resp_outport_finished$sEN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks &&
	     scemi_fS1OutPortAcks_ifc_rStorage[9:0] == 10'd1 ;

  // submodule scemi_dut_softrst_resp_outport_next
  assign scemi_dut_softrst_resp_outport_next$sEN =
	     CAN_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut ;

  // submodule scemi_dut_softrst_resp_outport_starting_reset
  assign scemi_dut_softrst_resp_outport_starting_reset$sEN =
	     scemi_dut_softrst_resp_outport_in_reset_uclk ;

  // submodule scemi_dut_softrst_resp_res_fifo
  assign scemi_dut_softrst_resp_res_fifo$sD_IN =
	     scemi_dut_dut_dutIfc_didreset$D_OUT ;
  assign scemi_dut_softrst_resp_res_fifo$sENQ =
	     CAN_FIRE_RL_scemi_dut_softrst_resp_connect_get_mkConnectionGetPut ;
  assign scemi_dut_softrst_resp_res_fifo$dDEQ =
	     CAN_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut ;

  // submodule scemi_fToBridgeBeat
  always@(MUX_scemi_fToBridgeBeat$enq_1__SEL_1 or
	  scemi_fFromContinueBeat_ifc_rStorage or
	  MUX_scemi_fToBridgeBeat$enq_1__SEL_2 or
	  scemi_fS1MsgOut_ifc_rStorage or
	  MUX_scemi_fToBridgeBeat$enq_1__SEL_3 or
	  scemi_fS2MsgOut_ifc_rStorage)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_fToBridgeBeat$enq_1__SEL_1:
	  scemi_fToBridgeBeat$D_IN =
	      scemi_fFromContinueBeat_ifc_rStorage[31:0];
      MUX_scemi_fToBridgeBeat$enq_1__SEL_2:
	  scemi_fToBridgeBeat$D_IN = scemi_fS1MsgOut_ifc_rStorage[31:0];
      MUX_scemi_fToBridgeBeat$enq_1__SEL_3:
	  scemi_fToBridgeBeat$D_IN = scemi_fS2MsgOut_ifc_rStorage[31:0];
      default: scemi_fToBridgeBeat$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign scemi_fToBridgeBeat$ENQ =
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_other ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_other ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi1 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi1 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_continue_scemi2 ||
	     WILL_FIRE_RL_scemi_msg_source_noc_active_dispatch_next_granted_scemi2 ;
  assign scemi_fToBridgeBeat$DEQ =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_move_to_next_output_beat ;
  assign scemi_fToBridgeBeat$CLR =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;

  // submodule scemi_inFifo
  assign scemi_inFifo$D_IN =
	     { scemi_fAxiRx_rv$port1__read[87],
	       scemi_fAxiRx_rv$port1__read[72],
	       scemi_fAxiRx_rv$port1__read[81:75],
	       c_be__h20822,
	       c_data__h20823 } ;
  assign scemi_inFifo$ENQ = CAN_FIRE_RL_scemi_accept_data ;
  assign scemi_inFifo$DEQ = CAN_FIRE_RL_scemi_process_incoming_packets ;
  assign scemi_inFifo$CLR = 1'b0 ;

  // submodule scemi_init_state_msgFIFO
  always@(MUX_scemi_init_state_msgFIFO$enq_1__SEL_1 or
	  MUX_scemi_init_state_msgFIFO$enq_1__VAL_1 or
	  MUX_scemi_init_state_msgFIFO$enq_1__SEL_2 or
	  MUX_scemi_init_state_msgFIFO$enq_1__VAL_2 or
	  WILL_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut or
	  MUX_scemi_init_state_msgFIFO$enq_1__VAL_3 or
	  WILL_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut or
	  MUX_scemi_init_state_msgFIFO$enq_1__VAL_4 or
	  WILL_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut or
	  MUX_scemi_init_state_msgFIFO$enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_scemi_init_state_msgFIFO$enq_1__SEL_1:
	  scemi_init_state_msgFIFO$sD_IN =
	      MUX_scemi_init_state_msgFIFO$enq_1__VAL_1;
      MUX_scemi_init_state_msgFIFO$enq_1__SEL_2:
	  scemi_init_state_msgFIFO$sD_IN =
	      MUX_scemi_init_state_msgFIFO$enq_1__VAL_2;
      WILL_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut:
	  scemi_init_state_msgFIFO$sD_IN =
	      MUX_scemi_init_state_msgFIFO$enq_1__VAL_3;
      WILL_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut:
	  scemi_init_state_msgFIFO$sD_IN =
	      MUX_scemi_init_state_msgFIFO$enq_1__VAL_4;
      WILL_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut:
	  scemi_init_state_msgFIFO$sD_IN =
	      MUX_scemi_init_state_msgFIFO$enq_1__VAL_5;
      default: scemi_init_state_msgFIFO$sD_IN =
		   74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign scemi_init_state_msgFIFO$sENQ =
	     WILL_FIRE_RL_scemi_shutdown_ack &&
	     scemi_shutdown_ctrl_in_dataF_rv$port1__read[0] ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveMoreData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_sendAck ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_respondToPing ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveFirstData ||
	     WILL_FIRE_RL_scemi_dut_dut_prb_control_receiveTrigger ||
	     WILL_FIRE_RL_scemi_dut_softrst_resp_connect_res_mkConnectionGetPut ||
	     WILL_FIRE_RL_scemi_data_resp_connect_res_mkConnectionGetPut ||
	     WILL_FIRE_RL_scemi_count_connect_res_mkConnectionGetPut ;
  assign scemi_init_state_msgFIFO$dDEQ =
	     CAN_FIRE_RL_scemi_msg_source_noc_active_outports_start_data_message ;

  // submodule scemi_network_status
  assign scemi_network_status$ASSERT_IN =
	     CAN_FIRE_RL_scemi_reset_scemi_if_network_is_inactive ;

  // submodule scemi_pcie_ep
  assign scemi_pcie_ep$cfg_aer_interrupt_msgnum = 5'd0 ;
  assign scemi_pcie_ep$cfg_dsn = 64'h0000000101000A35 ;
  assign scemi_pcie_ep$cfg_err_acs = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_aer_headerlog = 128'd0 ;
  assign scemi_pcie_ep$cfg_err_atomic_egress_blocked = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_cor = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_cpl_abort = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_cpl_timeout = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_cpl_unexpect = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_ecrc = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_internal_cor = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_internal_uncor = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_locked = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_malformed = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_mc_blocked = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_norecovery = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_poisoned = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_posted = 1'd0 ;
  assign scemi_pcie_ep$cfg_err_tlp_cpl_header = 48'd0 ;
  assign scemi_pcie_ep$cfg_err_ur = 1'd0 ;
  assign scemi_pcie_ep$cfg_interrupt = 1'd0 ;
  assign scemi_pcie_ep$cfg_interrupt_assert = 1'd0 ;
  assign scemi_pcie_ep$cfg_interrupt_di = 8'd0 ;
  assign scemi_pcie_ep$cfg_interrupt_stat = 1'd0 ;
  assign scemi_pcie_ep$cfg_mgmt_byte_en = 4'd0 ;
  assign scemi_pcie_ep$cfg_mgmt_di = 32'd0 ;
  assign scemi_pcie_ep$cfg_mgmt_dwaddr = 10'd0 ;
  assign scemi_pcie_ep$cfg_mgmt_rd_en = 1'd0 ;
  assign scemi_pcie_ep$cfg_mgmt_wr_en = 1'd0 ;
  assign scemi_pcie_ep$cfg_mgmt_wr_readonly = 1'd0 ;
  assign scemi_pcie_ep$cfg_pciecap_interrupt_msgnum = 5'd0 ;
  assign scemi_pcie_ep$cfg_pm_force_state = 2'd0 ;
  assign scemi_pcie_ep$cfg_pm_force_state_en = 1'd0 ;
  assign scemi_pcie_ep$cfg_pm_halt_aspm_l0s = 1'd0 ;
  assign scemi_pcie_ep$cfg_pm_halt_aspm_l1 = 1'd0 ;
  assign scemi_pcie_ep$cfg_pm_wake = 1'd0 ;
  assign scemi_pcie_ep$cfg_trn_pending = 1'd0 ;
  assign scemi_pcie_ep$cfg_turnoff_ok = 1'd0 ;
  assign scemi_pcie_ep$fc_sel = 3'd0 ;
  assign scemi_pcie_ep$m_axis_rx_tready = !scemi_fAxiRx_rv[95] ;
  assign scemi_pcie_ep$pci_exp_rxn = PCIE_rxn_i ;
  assign scemi_pcie_ep$pci_exp_rxp = PCIE_rxp_i ;
  assign scemi_pcie_ep$pl_directed_link_auton = 1'd0 ;
  assign scemi_pcie_ep$pl_directed_link_change = 2'd0 ;
  assign scemi_pcie_ep$pl_directed_link_speed = 1'd0 ;
  assign scemi_pcie_ep$pl_directed_link_width = 2'd0 ;
  assign scemi_pcie_ep$pl_upstream_prefer_deemph = 1'd1 ;
  assign scemi_pcie_ep$rx_np_ok = 1'd1 ;
  assign scemi_pcie_ep$rx_np_req = 1'd1 ;
  assign scemi_pcie_ep$s_axis_tx_tdata =
	     CAN_FIRE_RL_scemi_drive_axi_tx_info ?
	       scemi_fAxiTx_rv$port1__read[63:0] :
	       64'd0 ;
  assign scemi_pcie_ep$s_axis_tx_tkeep =
	     CAN_FIRE_RL_scemi_drive_axi_tx_info ?
	       scemi_fAxiTx_rv$port1__read[71:64] :
	       8'd0 ;
  assign scemi_pcie_ep$s_axis_tx_tlast =
	     CAN_FIRE_RL_scemi_drive_axi_tx_info &&
	     scemi_fAxiTx_rv$port1__read[72] ;
  assign scemi_pcie_ep$s_axis_tx_tuser = 4'b0 ;
  assign scemi_pcie_ep$s_axis_tx_tvalid =
	     CAN_FIRE_RL_scemi_drive_axi_tx_info ;
  assign scemi_pcie_ep$tx_cfg_gnt = 1'd1 ;

  // submodule scemi_reqFifo
  assign scemi_reqFifo$sD_IN =
	     scemi_dut_dut_dutIfc_m_dut$ddr3client_request_get ;
  assign scemi_reqFifo$sENQ =
	     CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_request ;
  assign scemi_reqFifo$dDEQ =
	     CAN_FIRE_RL_connectDDR3_connectReqUser_mkConnectionGetPut ;

  // submodule scemi_respFifo
  assign scemi_respFifo$sD_IN = connectDDR3_respFIFO$dD_OUT ;
  assign scemi_respFifo$sENQ =
	     CAN_FIRE_RL_connectDDR3_connectRespUser_mkConnectionGetPut ;
  assign scemi_respFifo$dDEQ =
	     CAN_FIRE_RL_scemi_Prelude_inst_changeSpecialWires_response ;

  // submodule scemi_rstgen_inv_rstgen
  assign scemi_rstgen_inv_rstgen$ASSERT_IN =
	     CAN_FIRE_RL_scemi_rstgen_trigger ;

  // submodule scemi_rstgen_rstgen
  assign scemi_rstgen_rstgen$ASSERT_IN =
	     CAN_FIRE_RL_scemi_clockGenerators_handle_reset ;

  // submodule scemi_scemi_clkgen_fRequest
  assign scemi_scemi_clkgen_fRequest$D_IN =
	     { scemi_bridge$clocks_request_get[31],
	       scemi_bridge$clocks_request_get[20:0] } ;
  assign scemi_scemi_clkgen_fRequest$ENQ =
	     CAN_FIRE_RL_scemi_mkConnectionGetPut ;
  assign scemi_scemi_clkgen_fRequest$DEQ =
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_write_request ||
	     WILL_FIRE_RL_scemi_scemi_clkgen_process_read_request ;
  assign scemi_scemi_clkgen_fRequest$CLR = 1'b0 ;

  // submodule scemi_scemi_clkgen_fResponse
  always@(scemi_scemi_clkgen_fRequest$D_OUT or
	  x__h12089 or
	  scemi_scemi_clkgen_rMMCM_clkout0_1 or
	  scemi_scemi_clkgen_rMMCM_clkout0_2 or
	  scemi_scemi_clkgen_rMMCM_clkout1_1 or
	  scemi_scemi_clkgen_rMMCM_clkout1_2 or
	  scemi_scemi_clkgen_rMMCM_clkout2_1 or
	  scemi_scemi_clkgen_rMMCM_clkout2_2 or
	  scemi_scemi_clkgen_rMMCM_clkout3_1 or
	  scemi_scemi_clkgen_rMMCM_clkout3_2 or
	  scemi_scemi_clkgen_rMMCM_clkout4_1 or
	  scemi_scemi_clkgen_rMMCM_clkout4_2 or
	  scemi_scemi_clkgen_rMMCM_clkout5_1 or
	  scemi_scemi_clkgen_rMMCM_clkout5_2 or
	  scemi_scemi_clkgen_rMMCM_clkout6_1 or
	  scemi_scemi_clkgen_rMMCM_clkout6_2 or
	  scemi_scemi_clkgen_rMMCM_clk_div or
	  scemi_scemi_clkgen_rMMCM_clk_fb_1 or
	  scemi_scemi_clkgen_rMMCM_clk_fb_2 or
	  scemi_scemi_clkgen_rMMCM_lock_1 or
	  scemi_scemi_clkgen_rMMCM_lock_2 or
	  scemi_scemi_clkgen_rMMCM_lock_3 or
	  scemi_scemi_clkgen_rMMCM_filter_1 or
	  scemi_scemi_clkgen_rMMCM_filter_2 or x__h12296)
  begin
    case (scemi_scemi_clkgen_fRequest$D_OUT[20:16])
      5'h0: scemi_scemi_clkgen_fResponse$D_IN = 16'h0100;
      5'h01: scemi_scemi_clkgen_fResponse$D_IN = x__h12089;
      5'h02:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout0_1;
      5'h03:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout0_2;
      5'h04:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout1_1;
      5'h05:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout1_2;
      5'h06:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout2_1;
      5'h07:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout2_2;
      5'h08:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout3_1;
      5'h09:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout3_2;
      5'h0A:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout4_1;
      5'h0B:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout4_2;
      5'h0C:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout5_1;
      5'h0D:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout5_2;
      5'h0E:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout6_1;
      5'h0F:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clkout6_2;
      5'h10:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clk_div;
      5'h11:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clk_fb_1;
      5'h12:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_clk_fb_2;
      5'h13:
	  scemi_scemi_clkgen_fResponse$D_IN = scemi_scemi_clkgen_rMMCM_lock_1;
      5'h14:
	  scemi_scemi_clkgen_fResponse$D_IN = scemi_scemi_clkgen_rMMCM_lock_2;
      5'h15:
	  scemi_scemi_clkgen_fResponse$D_IN = scemi_scemi_clkgen_rMMCM_lock_3;
      5'h16:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_filter_1;
      5'h17:
	  scemi_scemi_clkgen_fResponse$D_IN =
	      scemi_scemi_clkgen_rMMCM_filter_2;
      5'h1F: scemi_scemi_clkgen_fResponse$D_IN = x__h12296;
      default: scemi_scemi_clkgen_fResponse$D_IN = 16'd0;
    endcase
  end
  assign scemi_scemi_clkgen_fResponse$ENQ =
	     CAN_FIRE_RL_scemi_scemi_clkgen_process_read_request ;
  assign scemi_scemi_clkgen_fResponse$DEQ =
	     CAN_FIRE_RL_scemi_1_mkConnectionGetPut ;
  assign scemi_scemi_clkgen_fResponse$CLR = 1'b0 ;

  // submodule scemi_scemi_clkgen_mmcm
  assign scemi_scemi_clkgen_mmcm$CLKFBIN = scemi_scemi_clkgen_clkfbbuf$O ;
  assign scemi_scemi_clkgen_mmcm$DADDR = scemi_scemi_clkgen_rAddress ;
  assign scemi_scemi_clkgen_mmcm$DEN = scemi_scemi_clkgen_rSel ;
  assign scemi_scemi_clkgen_mmcm$DI = scemi_scemi_clkgen_rWrData ;
  assign scemi_scemi_clkgen_mmcm$DWE = scemi_scemi_clkgen_rWrEn ;
  assign scemi_scemi_clkgen_mmcm$RST = scemi_scemi_clkgen_rReset ;

  // submodule scemi_shutdown_ctrl_in_buffer_empty_sp
  assign scemi_shutdown_ctrl_in_buffer_empty_sp$sEN =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_update_remaining &&
	     !scemi_shutdown_ctrl_in_got_beat_pw$whas &&
	     scemi_shutdown_ctrl_in_next_sp$dPulse ;

  // submodule scemi_shutdown_ctrl_in_buffer_full_sp
  assign scemi_shutdown_ctrl_in_buffer_full_sp$sEN =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_update_remaining &&
	     scemi_shutdown_ctrl_in_got_beat_pw$whas &&
	     scemi_shutdown_ctrl_in_remaining ;

  // submodule scemi_shutdown_ctrl_in_ending_reset
  assign scemi_shutdown_ctrl_in_ending_reset$sEN =
	     !scemi_shutdown_ctrl_in_in_reset_uclk &&
	     scemi_shutdown_ctrl_in_prev_reset_uclk ;

  // submodule scemi_shutdown_ctrl_in_next_sp
  assign scemi_shutdown_ctrl_in_next_sp$sEN =
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_read_complete ||
	     WILL_FIRE_RL_scemi_shutdown_ctrl_in_first_request ;

  // submodule scemi_shutdown_ctrl_in_starting_reset
  assign scemi_shutdown_ctrl_in_starting_reset$sEN =
	     scemi_shutdown_ctrl_in_in_reset_uclk ;

  // submodule scemi_shutdown_ctrl_in_wait_sp
  assign scemi_shutdown_ctrl_in_wait_sp$sEN =
	     MUX_scemi_shutdown_ctrl_in_status$_write_1__SEL_1 ;

  // submodule scemi_shutdown_ctrl_out_ending_reset
  assign scemi_shutdown_ctrl_out_ending_reset$sEN =
	     !scemi_shutdown_ctrl_out_in_reset_uclk &&
	     scemi_shutdown_ctrl_out_prev_reset_uclk ;

  // submodule scemi_shutdown_ctrl_out_finished
  assign scemi_shutdown_ctrl_out_finished$sEN =
	     WILL_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks &&
	     scemi_fS1OutPortAcks_ifc_rStorage[9:0] == 10'd4 ;

  // submodule scemi_shutdown_ctrl_out_next
  assign scemi_shutdown_ctrl_out_next$sEN =
	     MUX_scemi_init_state_msgFIFO$enq_1__SEL_1 ;

  // submodule scemi_shutdown_ctrl_out_starting_reset
  assign scemi_shutdown_ctrl_out_starting_reset$sEN =
	     scemi_shutdown_ctrl_out_in_reset_uclk ;

  // submodule scemi_start_inport_buffer_empty_sp
  assign scemi_start_inport_buffer_empty_sp$sEN =
	     WILL_FIRE_RL_scemi_start_inport_update_remaining &&
	     !scemi_start_inport_got_beat_pw$whas &&
	     scemi_start_inport_next_sp$dPulse ;

  // submodule scemi_start_inport_buffer_full_sp
  assign scemi_start_inport_buffer_full_sp$sEN =
	     WILL_FIRE_RL_scemi_start_inport_update_remaining &&
	     scemi_start_inport_got_beat_pw$whas &&
	     scemi_start_inport_remaining ;

  // submodule scemi_start_inport_ending_reset
  assign scemi_start_inport_ending_reset$sEN =
	     !scemi_start_inport_in_reset_uclk &&
	     scemi_start_inport_prev_reset_uclk ;

  // submodule scemi_start_inport_next_sp
  assign scemi_start_inport_next_sp$sEN =
	     WILL_FIRE_RL_scemi_start_inport_read_complete ||
	     WILL_FIRE_RL_scemi_start_inport_first_request ;

  // submodule scemi_start_inport_starting_reset
  assign scemi_start_inport_starting_reset$sEN =
	     scemi_start_inport_in_reset_uclk ;

  // submodule scemi_start_inport_wait_sp
  assign scemi_start_inport_wait_sp$sEN =
	     MUX_scemi_start_inport_status$_write_1__SEL_1 ;

  // submodule scemi_start_res_fifo
  assign scemi_start_res_fifo$sD_IN =
	     scemi_start_inport_dataF_rv$port1__read[0] ;
  assign scemi_start_res_fifo$sENQ =
	     CAN_FIRE_RL_scemi_start_connect_res_mkConnectionGetPut ;
  assign scemi_start_res_fifo$dDEQ = scemi_start_res_fifo$dEMPTY_N ;

  // submodule scemi_uclkgen
  assign scemi_uclkgen$CLK_IN = x1__h37881 ;
  assign scemi_uclkgen$COND_IN = 1'b0 ;
  assign scemi_uclkgen$CLK_IN_EN = 1'd1 ;
  assign scemi_uclkgen$COND_IN_EN = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_scemi_fFromContinueBeat_ifc_rDataCou_ETC___d2100 =
	     (IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 !=
	      2'd0 &&
	      IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2070) ?
	       2'd1 :
	       ((IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 !=
		 2'd0 &&
		 IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2097) ?
		  2'd2 :
		  2'd3) ;
  assign IF_NOT_IF_scemi_fFromContinueBeat_ifc_rDataCou_ETC___d2103 =
	     (IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 !=
	      2'd0 &&
	      IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2070) ?
	       3'd2 :
	       ((IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 !=
		 2'd0 &&
		 IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2097) ?
		  3'd4 :
		  3'd0) ;
  assign IF_scemi_clockGenerators_clock_gens_counters_c_ETC___d1480 =
	     (scemi_clockGenerators_clock_gens_counters_count == 32'd1) ?
	       32'd0 :
	       scemi_clockGenerators_clock_gens_counters_count + 32'd1 ;
  assign IF_scemi_clockGenerators_one_to_one_cclock_cou_ETC___d1530 =
	     (scemi_clockGenerators_one_to_one_cclock_count == 32'd1) ?
	       32'd0 :
	       scemi_clockGenerators_one_to_one_cclock_count + 32'd1 ;
  assign IF_scemi_data_req_inport_got_beat_pw_whas__170_ETC___d1179 =
	     scemi_data_req_inport_got_beat_pw$whas ?
	       !scemi_data_req_inport_remaining ||
	       scemi_data_req_inport_buffer_full_sp$sRDY :
	       !scemi_data_req_inport_next_sp$dPulse ||
	       scemi_data_req_inport_buffer_empty_sp$sRDY ;
  assign IF_scemi_dut_dut_prb_control_control_in_got_be_ETC___d748 =
	     scemi_dut_dut_prb_control_control_in_got_beat_pw$whas ?
	       !scemi_dut_dut_prb_control_control_in_remaining ||
	       scemi_dut_dut_prb_control_control_in_buffer_full_sp$sRDY :
	       !scemi_dut_dut_prb_control_control_in_next_sp$dPulse ||
	       scemi_dut_dut_prb_control_control_in_buffer_empty_sp$sRDY ;
  assign IF_scemi_dut_softrst_req_inport_got_beat_pw_wh_ETC___d1074 =
	     scemi_dut_softrst_req_inport_got_beat_pw$whas ?
	       !scemi_dut_softrst_req_inport_remaining ||
	       scemi_dut_softrst_req_inport_buffer_full_sp$sRDY :
	       !scemi_dut_softrst_req_inport_next_sp$dPulse ||
	       scemi_dut_softrst_req_inport_buffer_empty_sp$sRDY ;
  assign IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 =
	     (scemi_fFromContinueBeat_ifc_rDataCount_886_ULT_4___d1992 ?
		2'd0 :
		2'd1) +
	     (scemi_fS1MsgOut_ifc_rDataCount_923_ULT_4___d1994 ?
		2'd0 :
		2'd1) +
	     (scemi_fS2MsgOut_ifc_rDataCount_960_ULT_4___d1997 ?
		2'd0 :
		2'd1) ;
  assign IF_scemi_fifoRxData_elem0_status_1__read__92_E_ETC___d433 =
	     (scemi_fifoRxData_elem0_status_1__read__92_EQ_s_ETC___d394 &&
	      !scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397) ?
	       scemi_inFifo$D_OUT :
	       scemi_fifoRxData_elem_1 ;
  assign IF_scemi_fifoRxData_elem1_status_1__read__03_E_ETC___d440 =
	     (scemi_fifoRxData_elem1_status_1__read__03_EQ_s_ETC___d405 &&
	      !scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408) ?
	       scemi_inFifo$D_OUT :
	       scemi_fifoRxData_elem_3 ;
  assign IF_scemi_rS1OutMsgIsCont_289_THEN_2_CONCAT_sce_ETC___d2306 =
	     { scemi_rS1OutMsgIsCont ?
		 { 66'd2,
		   scemi_rS1BitsRem_295_PLUS_IF_scemi_rS1OutMsgIs_ETC___d2300 } :
		 { scemi_rS1CycleStamp,
		   2'd2,
		   scemi_rS1BitsRem_295_PLUS_IF_scemi_rS1OutMsgIs_ETC___d2300 },
	       scemi_rS1BitsRem[13:6] } ;
  assign IF_scemi_shutdown_ctrl_in_got_beat_pw_whas__38_ETC___d1396 =
	     scemi_shutdown_ctrl_in_got_beat_pw$whas ?
	       !scemi_shutdown_ctrl_in_remaining ||
	       scemi_shutdown_ctrl_in_buffer_full_sp$sRDY :
	       !scemi_shutdown_ctrl_in_next_sp$dPulse ||
	       scemi_shutdown_ctrl_in_buffer_empty_sp$sRDY ;
  assign IF_scemi_start_inport_got_beat_pw_whas__280_TH_ETC___d1289 =
	     scemi_start_inport_got_beat_pw$whas ?
	       !scemi_start_inport_remaining ||
	       scemi_start_inport_buffer_full_sp$sRDY :
	       !scemi_start_inport_next_sp$dPulse ||
	       scemi_start_inport_buffer_empty_sp$sRDY ;
  assign MUX_scemi_rS1BitsRemwrite_1__VAL_2_PLUS_7_SRL_3__q5 =
	     MUX_scemi_rS1BitsRem$write_1__VAL_2 + 19'd7 >> 3 ;
  assign NOT_scemi_1_fifoTxData_read_block_83_84_AND_NO_ETC___d606 =
	     (!scemi_1_fifoTxData_read_block && x__h33660 != 2'd3 ||
	      scemi_1_fifoTxData_read_block && x__h34039 != 2'd3) &&
	     !scemi_1_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_scemi_1_fifoTxData_write_block_42_43_AND_s_ETC___d563 =
	     (!scemi_1_fifoTxData_write_block && x__h31734 == 2'd3 ||
	      scemi_1_fifoTxData_write_block && x__h32186 == 2'd3) &&
	     !scemi_1_fifoTxData_sInReset_pre_isInReset ;
  assign NOT_scemi_clockGenerators_clock_gens_in_reset__ETC___d1535 =
	     !CAN_FIRE_RL_scemi_clockGenerators_handle_reset ;
  assign NOT_scemi_clockGenerators_clock_gens_stall_pw__ETC___d2422 =
	     !CAN_FIRE_RL_scemi_clockGenerators_clock_gens_counters_do_stall ;
  assign NOT_scemi_dut_dut_prb_control_flag_04_05_AND_N_ETC___d806 =
	     !scemi_dut_dut_prb_control_flag &&
	     { scemi_dut_dut_prb_control_sampleIntervalV_3,
	       scemi_dut_dut_prb_control_sampleIntervalV_2,
	       scemi_dut_dut_prb_control_sampleIntervalV_1,
	       scemi_dut_dut_prb_control_sampleIntervalV } !=
	     32'd0 ;
  assign NOT_scemi_dut_dut_prb_control_sampleIntervalV__ETC___d800 =
	     { scemi_dut_dut_prb_control_sampleIntervalV_3,
	       scemi_dut_dut_prb_control_sampleIntervalV_2,
	       scemi_dut_dut_prb_control_sampleIntervalV_1,
	       scemi_dut_dut_prb_control_sampleIntervalV } !=
	     32'd0 &&
	     scemi_init_state_cycle_stamp_crossed__97_EQ_sc_ETC___d799 ;
  assign NOT_scemi_fFromBridgeBeat_ifc_rDataAvail_576_U_ETC___d1660 =
	     scemi_fFromBridgeBeat_ifc_rDataAvail >= 6'd4 ;
  assign NOT_scemi_fFromBridgeBeat_ifc_rDataCount_557_U_ETC___d1677 =
	     scemi_fFromBridgeBeat_ifc_rDataCount >= 6'd4 ;
  assign NOT_scemi_fS1OutPortAcks_ifc_rDataAvail_654_UL_ETC___d1714 =
	     scemi_fS1OutPortAcks_ifc_rDataAvail >= 5'd2 ;
  assign NOT_scemi_fifoRxData_elem0_status_1__read__92__ETC___d463 =
	     { (!scemi_fifoRxData_elem0_status_1__read__92_EQ_s_ETC___d394 ||
		scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397) &&
	       scemi_fifoRxData_elem_1[80],
	       scemi_fifoRxData_elem0_status_1__read__92_EQ_s_ETC___d394 &&
	       !scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397 ||
	       scemi_fifoRxData_elem_1[79],
	       (scemi_fifoRxData_elem0_status_1__read__92_EQ_s_ETC___d394 &&
		!scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397) ?
		 79'd0 :
		 scemi_fifoRxData_elem_1[78:0] } ;
  assign NOT_scemi_fifoRxData_elem1_status_1__read__03__ETC___d480 =
	     { (!scemi_fifoRxData_elem1_status_1__read__03_EQ_s_ETC___d405 ||
		scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408) &&
	       scemi_fifoRxData_elem_3[80],
	       scemi_fifoRxData_elem1_status_1__read__03_EQ_s_ETC___d405 &&
	       !scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408 ||
	       scemi_fifoRxData_elem_3[79],
	       (scemi_fifoRxData_elem1_status_1__read__03_EQ_s_ETC___d405 &&
		!scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408) ?
		 79'd0 :
		 scemi_fifoRxData_elem_3[78:0] } ;
  assign NOT_scemi_fifoRxData_read_block_82_83_AND_NOT__ETC___d507 =
	     (!scemi_fifoRxData_read_block && x__h27757 == 2'd3 ||
	      scemi_fifoRxData_read_block && x__h28141 == 2'd3) &&
	     !scemi_fifoRxData_dInReset_pre_isInReset ;
  assign NOT_scemi_fifoRxData_write_block_90_91_AND_NOT_ETC___d417 =
	     (!scemi_fifoRxData_write_block && x__h21832 != 2'd3 ||
	      scemi_fifoRxData_write_block && x__h22294 != 2'd3) &&
	     !scemi_fifoRxData_sInReset_pre_isInReset ;
  assign _0_CONCAT_IF_scemi_fS1OutPortAcks_ifc_rwDeqCoun_ETC___d1623 =
	     b__h93641 * 32'd10 ;
  assign _0_CONCAT_scemi_fS1OutPortAcks_ifc_rDataCount_6_ETC___d1636 =
	     b__h93848 * 32'd10 ;
  assign _1_SL_IF_scemi_fFromBridgeBeat_ifc_rStorage_544_ETC___d1744 =
	     (14'd1 << value__h134037) - 14'd1 ;
  assign _dor1scemi_fifoRxData_elem0_status_0$EN__write =
	     WILL_FIRE_RL_scemi_send_invalid_packets ||
	     WILL_FIRE_RL_scemi_process_incoming_packets ;
  assign _dor1scemi_fifoRxData_elem0_status_1$EN__write =
	     WILL_FIRE_RL_scemi_send_invalid_packets ||
	     WILL_FIRE_RL_scemi_process_incoming_packets ;
  assign _dor1scemi_fifoRxData_elem1_status_0$EN__write =
	     WILL_FIRE_RL_scemi_send_invalid_packets ||
	     WILL_FIRE_RL_scemi_process_incoming_packets ;
  assign _dor1scemi_fifoRxData_elem1_status_1$EN__write =
	     WILL_FIRE_RL_scemi_send_invalid_packets ||
	     WILL_FIRE_RL_scemi_process_incoming_packets ;
  assign _dor1scemi_fifoRxData_write_block$EN_write =
	     WILL_FIRE_RL_scemi_send_invalid_packets ||
	     WILL_FIRE_RL_scemi_process_incoming_packets ;
  assign ab__h89164 =
	     {2{!scemi_dut_dut_probeHook$DELAY &&
		!scemi_dut_dut_prb_control_prb_str$EMPTY_N}} ;
  assign addr__h248732 = { 2'd0, connectDDR3_reqFIFO$dD_OUT[535:512], 3'd0 } ;
  assign b__h168716 = MUX_scemi_fToBridgeBeat$enq_1__SEL_1 ? 6'd4 : 6'd0 ;
  assign b__h170933 = MUX_scemi_fToBridgeBeat$enq_1__SEL_2 ? 6'd4 : 6'd0 ;
  assign b__h171294 =
	     scemi_fS1MsgOut_ifc_rwEnqCount$whas ?
	       scemi_fS1MsgOut_ifc_rwEnqCount$wget :
	       6'd0 ;
  assign b__h172192 = MUX_scemi_fToBridgeBeat$enq_1__SEL_3 ? 6'd4 : 6'd0 ;
  assign b__h195344 =
	     (IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 !=
	      2'd0 &&
	      IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2050) ?
	       2'd0 :
	       IF_NOT_IF_scemi_fFromContinueBeat_ifc_rDataCou_ETC___d2100 ;
  assign b__h199757 = { 1'd0, scemi_fFromContinueBeat_ifc_rStorage[23:16] } ;
  assign b__h204287 = { 1'd0, scemi_fS1MsgOut_ifc_rStorage[23:16] } ;
  assign b__h208808 = { 1'd0, scemi_fS2MsgOut_ifc_rStorage[23:16] } ;
  assign b__h90925 = scemi_fFromBridgeBeat_ifc_rwDeqCount$whas ? 6'd4 : 6'd0 ;
  assign b__h91286 =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_receive_beat_from_bridge ?
	       6'd4 :
	       6'd0 ;
  assign b__h92374 = scemi_fToContinueBeat_ifc_rwEnqCount$whas ? 6'd4 : 6'd0 ;
  assign b__h93641 = { 27'd0, b__h93680 } ;
  assign b__h93680 =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_execute_outport_acks ?
	       5'd1 :
	       5'd0 ;
  assign b__h93848 = { 27'd0, value__h93850 } ;
  assign b__h94039 =
	     scemi_fS1OutPortAcks_ifc_rwEnqCount$whas ?
	       scemi_fS1OutPortAcks_ifc_rwEnqCount$wget :
	       5'd0 ;
  assign c_be__h20822 =
	     { scemi_fAxiRx_rv$port1__read[67:64],
	       scemi_fAxiRx_rv$port1__read[71:68] } ;
  assign c_data__h20823 =
	     { scemi_fAxiRx_rv$port1__read[31:0],
	       scemi_fAxiRx_rv$port1__read[63:32] } ;
  assign enqData__h168593 = 256'd0 << x__h168937 ;
  assign enqData__h170810 = x__h171035 << x__h171154 ;
  assign enqData__h172069 = 256'd0 << x__h172413 ;
  assign enqData__h90802 = x__h91027 << x__h91146 ;
  assign enqData__h91890 = x__h92115 << x__h92234 ;
  assign enqData__h93557 =
	     x__h93781 <<
	     _0_CONCAT_scemi_fS1OutPortAcks_ifc_rDataCount_6_ETC___d1636[31:0] ;
  assign enqMask__h168594 = enqData__h168593 ;
  assign enqMask__h170811 = x__h171162 << x__h171154 ;
  assign enqMask__h172070 = enqData__h172069 ;
  assign enqMask__h90803 = x__h91154 << x__h91146 ;
  assign enqMask__h91891 = x__h92242 << x__h92234 ;
  assign enqMask__h93558 =
	     x__h93907 <<
	     _0_CONCAT_scemi_fS1OutPortAcks_ifc_rDataCount_6_ETC___d1636[31:0] ;
  assign mask__h248733 =
	     connectDDR3_reqFIFO$dD_OUT[600] ?
	       connectDDR3_reqFIFO$dD_OUT[599:536] :
	       64'd0 ;
  assign nextMask__h168588 =
	     scemi_fFromContinueBeat_ifc_rStorageMask >> x__h168782 ;
  assign nextMask__h168596 = nextMask__h168588 | enqMask__h168594 ;
  assign nextMask__h170805 = scemi_fS1MsgOut_ifc_rStorageMask >> x__h170999 ;
  assign nextMask__h170813 = nextMask__h170805 | enqMask__h170811 ;
  assign nextMask__h172064 = scemi_fS2MsgOut_ifc_rStorageMask >> x__h172258 ;
  assign nextMask__h172072 = nextMask__h172064 | enqMask__h172070 ;
  assign nextMask__h90797 =
	     scemi_fFromBridgeBeat_ifc_rStorageMask >> x__h90991 ;
  assign nextMask__h90805 = nextMask__h90797 | enqMask__h90803 ;
  assign nextMask__h91885 = scemi_fToContinueBeat_ifc_rStorageMask >> 0 ;
  assign nextMask__h91893 = nextMask__h91885 | enqMask__h91891 ;
  assign nextMask__h93552 =
	     scemi_fS1OutPortAcks_ifc_rStorageMask >>
	     _0_CONCAT_IF_scemi_fS1OutPortAcks_ifc_rwDeqCoun_ETC___d1623[31:0] ;
  assign nextMask__h93560 = nextMask__h93552 | enqMask__h93558 ;
  assign nextStorage__h168587 =
	     scemi_fFromContinueBeat_ifc_rStorage >> x__h168782 ;
  assign nextStorage__h168595 = x__h168655 | y__h168656 ;
  assign nextStorage__h170804 = scemi_fS1MsgOut_ifc_rStorage >> x__h170999 ;
  assign nextStorage__h170812 = x__h170872 | y__h170873 ;
  assign nextStorage__h172063 = scemi_fS2MsgOut_ifc_rStorage >> x__h172258 ;
  assign nextStorage__h172071 = x__h172131 | y__h172132 ;
  assign nextStorage__h90796 =
	     scemi_fFromBridgeBeat_ifc_rStorage >> x__h90991 ;
  assign nextStorage__h90804 = x__h90864 | y__h90865 ;
  assign nextStorage__h91884 = scemi_fToContinueBeat_ifc_rStorage >> 0 ;
  assign nextStorage__h91892 = x__h91952 | y__h91953 ;
  assign nextStorage__h93551 =
	     scemi_fS1OutPortAcks_ifc_rStorage >>
	     _0_CONCAT_IF_scemi_fS1OutPortAcks_ifc_rwDeqCoun_ETC___d1623[31:0] ;
  assign nextStorage__h93559 = x__h93619 | y__h93620 ;
  assign scemi_1_fifoTxData_elem0_status_0__read__88_EQ_ETC___d589 =
	     scemi_1_fifoTxData_elem0_status_0 ==
	     scemi_1_fifoTxData_block0_status ;
  assign scemi_1_fifoTxData_elem0_status_1__read__85_EQ_ETC___d587 =
	     scemi_1_fifoTxData_elem0_status_1 ==
	     scemi_1_fifoTxData_block0_status ;
  assign scemi_1_fifoTxData_elem1_status_0__read__97_EQ_ETC___d598 =
	     scemi_1_fifoTxData_elem1_status_0 ==
	     scemi_1_fifoTxData_block1_status ;
  assign scemi_1_fifoTxData_elem1_status_1__read__94_EQ_ETC___d596 =
	     scemi_1_fifoTxData_elem1_status_1 ==
	     scemi_1_fifoTxData_block1_status ;
  assign scemi_bridge_is_activated__72_AND_scemi_rOther_ETC___d1869 =
	     scemi_bridge$is_activated && scemi_rOtherMsgIn &&
	     !scemi_rSceMi1MsgIn &&
	     !scemi_rSceMi2MsgIn &&
	     scemi_rInMsgBytes != 8'd0 &&
	     NOT_scemi_fFromBridgeBeat_ifc_rDataCount_557_U_ETC___d1677 &&
	     scemi_fToContinueBeat_ifc_rDataAvail >= 6'd4 ;
  assign scemi_bridge_is_activated__72_AND_scemi_rSceMi_ETC___d1717 =
	     scemi_bridge$is_activated &&
	     scemi_rSceMi1MsgIn_696_AND_NOT_scemi_rSceMi2Ms_ETC___d1704 &&
	     NOT_scemi_fFromBridgeBeat_ifc_rDataCount_557_U_ETC___d1677 &&
	     scemi_rDecodeSceMi &&
	     !scemi_rS1MsgInIsAck &&
	     !scemi_rS1MsgInIsData &&
	     NOT_scemi_fS1OutPortAcks_ifc_rDataAvail_654_UL_ETC___d1714 ;
  assign scemi_clockGenerators_clock_gens_reset_counter_ETC___d1490 =
	     scemi_clockGenerators_clock_gens_reset_counter < 32'd16 ;
  assign scemi_clockGenerators_clock_gens_stalled_511_A_ETC___d1518 =
	     scemi_clockGenerators_clock_gens_stalled &&
	     (scemi_clockGenerators_clock_gens_counters_count == 32'd0 &&
	      !ab__h89164[1] ||
	      !x1__h37881) ;
  assign scemi_count_outport_ok_338_AND_NOT_scemi_init__ETC___d1342 =
	     scemi_count_outport_ok && !scemi_init_state_any_in_reset_uclk &&
	     scemi_init_state_out_port == 10'd3 &&
	     scemi_init_state_msgFIFO$sFULL_N ;
  assign scemi_data_resp_outport_ok_232_AND_NOT_scemi_i_ETC___d1236 =
	     scemi_data_resp_outport_ok &&
	     !scemi_init_state_any_in_reset_uclk &&
	     scemi_init_state_out_port == 10'd2 &&
	     scemi_init_state_msgFIFO$sFULL_N ;
  assign scemi_dut_dut_prb_control_control_in_dataF_rv__ETC___d878 =
	     (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	      3'd3 &&
	      !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	      2'd2 ||
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[16] ||
	      scemi_dut_dut_prb_control_ackFifo$FULL_N) &&
	     ((scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	       3'd3 &&
	       !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	       scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	       2'd2 &&
	       scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	       10'd1023) ?
		scemi_dut_dut_prb_control_enff$FULL_N :
		scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
		3'd3 &&
		!scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
		scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
		2'd2 ||
		scemi_dut_dut_prb_control_enff$FULL_N) ;
  assign scemi_dut_dut_prb_control_control_in_dataF_rv__ETC___d908 =
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13] ==
	     3'd3 &&
	     !scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12] &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[11:10] ==
	     2'd2 &&
	     scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[9:0] ==
	     10'd1023 &&
	     { scemi_dut_dut_prb_control_sampleIntervalV_3,
	       scemi_dut_dut_prb_control_sampleIntervalV_2,
	       scemi_dut_dut_prb_control_sampleIntervalV_1,
	       scemi_dut_dut_prb_control_sampleIntervalV } !=
	     32'd0 ;
  assign scemi_dut_dut_prb_control_data_out_next_RDY_se_ETC___d979 =
	     scemi_dut_dut_prb_control_data_out_next$sRDY &&
	     scemi_init_state_msgFIFO$sFULL_N &&
	     scemi_dut_dut_prb_control_data_out_ok_01_AND_N_ETC___d709 &&
	     scemi_dut_dut_prb_control_prb_str$EMPTY_N ;
  assign scemi_dut_dut_prb_control_data_out_ok_01_AND_N_ETC___d709 =
	     scemi_dut_dut_prb_control_data_out_ok &&
	     !scemi_init_state_any_in_reset_uclk &&
	     scemi_init_state_out_port == 10'd0 &&
	     scemi_init_state_msgFIFO$sFULL_N ;
  assign scemi_dut_softrst_resp_outport_ok_122_AND_NOT__ETC___d1126 =
	     scemi_dut_softrst_resp_outport_ok &&
	     !scemi_init_state_any_in_reset_uclk &&
	     scemi_init_state_out_port == 10'd1 &&
	     scemi_init_state_msgFIFO$sFULL_N ;
  assign scemi_fFromContinueBeat_ifc_rDataCount_886_ULT_4___d1992 =
	     scemi_fFromContinueBeat_ifc_rDataCount < 6'd4 ;
  assign scemi_fS1MsgOut_ifc_rDataCount_923_ULT_32___d2241 =
	     scemi_fS1MsgOut_ifc_rDataCount < 6'd32 ;
  assign scemi_fS1MsgOut_ifc_rDataCount_923_ULT_4___d1994 =
	     scemi_fS1MsgOut_ifc_rDataCount < 6'd4 ;
  assign scemi_fS1OutPortAcks_ifc_rDataCount_633_ULT_16___d1693 =
	     scemi_fS1OutPortAcks_ifc_rDataCount < 5'd16 ;
  assign scemi_fS2MsgOut_ifc_rDataCount_960_ULT_4___d1997 =
	     scemi_fS2MsgOut_ifc_rDataCount < 6'd4 ;
  assign scemi_fToContinueBeat_ifc_rDataCount_594_ULT_32___d1672 =
	     scemi_fToContinueBeat_ifc_rDataCount < 6'd32 ;
  assign scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397 =
	     scemi_fifoRxData_elem0_status_0 ==
	     scemi_fifoRxData_block0_status ;
  assign scemi_fifoRxData_elem0_status_1__read__92_EQ_s_ETC___d394 =
	     scemi_fifoRxData_elem0_status_1 ==
	     scemi_fifoRxData_block0_status ;
  assign scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408 =
	     scemi_fifoRxData_elem1_status_0 ==
	     scemi_fifoRxData_block1_status ;
  assign scemi_fifoRxData_elem1_status_1__read__03_EQ_s_ETC___d405 =
	     scemi_fifoRxData_elem1_status_1 ==
	     scemi_fifoRxData_block1_status ;
  assign scemi_init_state_cycle_stamp_crossed__97_EQ_sc_ETC___d799 =
	     scemi_init_state_cycle_stamp ==
	     scemi_dut_dut_prb_control_nextSample ;
  assign scemi_lrS1ActiveRequests_1_202_OR_scemi_lrS1Ac_ETC___d2225 =
	     scemi_lrS1ActiveRequests_1 || scemi_lrS1ActiveRequests_2 ||
	     scemi_lrS1ActiveRequests_3 ||
	     scemi_lrS1ActiveRequests_4 ;
  assign scemi_rInMsgBytes_678_ULE_4___d1721 = scemi_rInMsgBytes <= 8'd4 ;
  assign scemi_rOutMsgBytes_989_ULE_4___d2183 = scemi_rOutMsgBytes <= 8'd4 ;
  assign scemi_rS1BitsRem_295_PLUS_IF_scemi_rS1OutMsgIs_ETC___d2300 =
	     { scemi_rS1BitsRem + (scemi_rS1OutMsgIsCont ? 19'd32 : 19'd96) <=
	       19'd2016,
	       scemi_rS1BitsRem[18:14] } ;
  assign scemi_rS1BitsRem_295_ULE_32___d2353 = scemi_rS1BitsRem <= 19'd32 ;
  assign scemi_rS1BitsRem_MINUS_25_SRL_3__q4 =
	     (scemi_rS1BitsRem - 19'd25) >> 3 ;
  assign scemi_rS1OutMsgSize_290_MINUS_4___d2291 =
	     scemi_rS1OutMsgSize - 8'd4 ;
  assign scemi_rS1OutMsgSize_290_ULE_4___d2355 = scemi_rS1OutMsgSize <= 8'd4 ;
  assign scemi_rSceMi1MsgIn_696_AND_NOT_scemi_rSceMi2Ms_ETC___d1704 =
	     scemi_rSceMi1MsgIn && !scemi_rSceMi2MsgIn &&
	     !scemi_rOtherMsgIn &&
	     scemi_rInMsgBytes != 8'd0 ;
  assign scemi_rSceMi2MsgIn_697_AND_NOT_scemi_rSceMi1Ms_ETC___d1842 =
	     scemi_rSceMi2MsgIn && !scemi_rSceMi1MsgIn &&
	     !scemi_rOtherMsgIn &&
	     scemi_rInMsgBytes != 8'd0 ;
  assign scemi_shutdown_ctrl_out_ok_435_AND_NOT_scemi_i_ETC___d1439 =
	     scemi_shutdown_ctrl_out_ok &&
	     !scemi_init_state_any_in_reset_uclk &&
	     scemi_init_state_out_port == 10'd4 &&
	     scemi_init_state_msgFIFO$sFULL_N ;
  assign v_data__h36359 =
	     { scemi_1_outFifo$D_OUT[31:0], scemi_1_outFifo$D_OUT[63:32] } ;
  assign v_keep__h36358 =
	     { scemi_1_outFifo$D_OUT[67:64], scemi_1_outFifo$D_OUT[71:68] } ;
  assign value__h12437 =
	     { scemi_scemi_clkgen_rMMCM_swrst,
	       scemi_scemi_clkgen_rMMCM_start } ;
  assign value__h12544 =
	     { scemi_scemi_clkgen_rReset, scemi_scemi_clkgen_mmcm$LOCKED } ;
  assign value__h134037 =
	     scemi_fFromBridgeBeat_ifc_rStorage[10] ?
	       (scemi_fFromBridgeBeat_ifc_rStorage[26] ? 4'd2 : 4'd1) :
	       (scemi_fFromBridgeBeat_ifc_rStorage[26] ? 4'd1 : 4'd0) ;
  assign value__h135329 =
	     scemi_fFromBridgeBeat_ifc_rStorage[10] ?
	       (scemi_fFromBridgeBeat_ifc_rStorage[26] ?
		  { scemi_fFromBridgeBeat_ifc_rStorage[9:0],
		    scemi_fFromBridgeBeat_ifc_rStorage[25:16] } :
		  {2{scemi_fFromBridgeBeat_ifc_rStorage[9:0]}}) :
	       { scemi_fFromBridgeBeat_ifc_rStorage[9:0],
		 scemi_fFromBridgeBeat_ifc_rStorage[25:16] } ;
  assign value__h168887 =
	     scemi_fFromContinueBeat_ifc_rDataCount - b__h168716 ;
  assign value__h171036 =
	     scemi_fS1MsgOut_ifc_rwEnqData$whas ?
	       scemi_fS1MsgOut_ifc_rwEnqData$wget :
	       128'd0 ;
  assign value__h171104 = scemi_fS1MsgOut_ifc_rDataCount - b__h170933 ;
  assign value__h171163 =
	     scemi_fS1MsgOut_ifc_rwEnqCount$whas ?
	       scemi_fS1MsgOut_ifc_rwEnqMask$wget :
	       128'd0 ;
  assign value__h172363 = scemi_fS2MsgOut_ifc_rDataCount - b__h172192 ;
  assign value__h197969 =
	     (x__h198010 + 32'd4 <= 32'd4) ?
	       9'd0 :
	       (b__h199757 - 9'd4) + 9'd4 ;
  assign value__h202501 =
	     (x__h202540 + 32'd4 <= 32'd4) ?
	       9'd0 :
	       (b__h204287 - 9'd4) + 9'd4 ;
  assign value__h207022 =
	     (x__h207061 + 32'd4 <= 32'd4) ?
	       9'd0 :
	       (b__h208808 - 9'd4) + 9'd4 ;
  assign value__h91028 =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_receive_beat_from_bridge ?
	       scemi_fFromBridgeBeat_ifc_rwEnqData$wget :
	       128'd0 ;
  assign value__h91096 = scemi_fFromBridgeBeat_ifc_rDataCount - b__h90925 ;
  assign value__h91155 =
	     CAN_FIRE_RL_scemi_msg_sink_noc_active_receive_beat_from_bridge ?
	       128'h000000000000000000000000FFFFFFFF :
	       128'd0 ;
  assign value__h92116 =
	     scemi_fToContinueBeat_ifc_rwEnqCount$whas ?
	       scemi_fToContinueBeat_ifc_rwEnqData$wget :
	       128'd0 ;
  assign value__h92184 = scemi_fToContinueBeat_ifc_rDataCount - 6'd0 ;
  assign value__h92243 =
	     scemi_fToContinueBeat_ifc_rwEnqCount$whas ?
	       128'h000000000000000000000000FFFFFFFF :
	       128'd0 ;
  assign value__h93782 =
	     scemi_fS1OutPortAcks_ifc_rwEnqCount$whas ?
	       scemi_fS1OutPortAcks_ifc_rwEnqData$wget :
	       140'd0 ;
  assign value__h93850 = scemi_fS1OutPortAcks_ifc_rDataCount - b__h93680 ;
  assign value__h93908 =
	     scemi_fS1OutPortAcks_ifc_rwEnqCount$whas ?
	       scemi_fS1OutPortAcks_ifc_rwEnqMask$wget :
	       140'd0 ;
  assign x1__h37881 = ~scemi_uclkgen$CLK_VAL_OUT ;
  assign x__h12089 = { 14'd0, value__h12437 } ;
  assign x__h12296 = { 14'd0, value__h12544 } ;
  assign x__h13993 = mask__h13959 & scemi_scemi_clkgen_mmcm$DO ;
  assign x__h168655 = nextStorage__h168587 & nextMask__h168588 ;
  assign x__h168782 = { 23'd0, b__h168716, 3'd0 } ;
  assign x__h168937 = { 23'd0, value__h168887, 3'd0 } ;
  assign x__h170872 = nextStorage__h170804 & nextMask__h170805 ;
  assign x__h170999 = { 23'd0, b__h170933, 3'd0 } ;
  assign x__h171035 = { 128'd0, value__h171036 } ;
  assign x__h171154 = { 23'd0, value__h171104, 3'd0 } ;
  assign x__h171162 = { 128'd0, value__h171163 } ;
  assign x__h172131 = nextStorage__h172063 & nextMask__h172064 ;
  assign x__h172258 = { 23'd0, b__h172192, 3'd0 } ;
  assign x__h172413 = { 23'd0, value__h172363, 3'd0 } ;
  assign x__h174137 =
	     { !scemi_fS2MsgOut_ifc_rDataCount_960_ULT_4___d1997,
	       !scemi_fS1MsgOut_ifc_rDataCount_923_ULT_4___d1994,
	       !scemi_fFromContinueBeat_ifc_rDataCount_886_ULT_4___d1992,
	       scemi_rvPrevMsgGrant } ;
  assign x__h181737 = { scemi_rvPrevMsgGrant, scemi_rvPrevPrevMsgGrant } ;
  assign x__h18315 =
	     { scemi_pcie_ep$cfg_bus_number,
	       scemi_pcie_ep$cfg_device_number,
	       scemi_pcie_ep$cfg_function_number } ;
  assign x__h198010 = { 24'd0, scemi_fFromContinueBeat_ifc_rStorage[23:16] } ;
  assign x__h202540 = { 24'd0, scemi_fS1MsgOut_ifc_rStorage[23:16] } ;
  assign x__h207061 = { 24'd0, scemi_fS2MsgOut_ifc_rStorage[23:16] } ;
  assign x__h21832 =
	     { !scemi_fifoRxData_elem0_status_1__read__92_EQ_s_ETC___d394,
	       !scemi_fifoRxData_elem0_status_0__read__96_EQ_s_ETC___d397 } ;
  assign x__h22294 =
	     { !scemi_fifoRxData_elem1_status_1__read__03_EQ_s_ETC___d405,
	       !scemi_fifoRxData_elem1_status_0__read__07_EQ_s_ETC___d408 } ;
  assign x__h242005 = scemi_count_outport_count - 2'd1 ;
  assign x__h249621 =
	     { _unnamed__3$DOUT,
	       _unnamed__2$DOUT,
	       _unnamed__1$DOUT,
	       _unnamed_$DOUT } ;
  assign x__h27757 =
	     { scemi_fifoRxData_elem0_status_1 !=
	       scemi_fifoRxData_block0_status,
	       scemi_fifoRxData_elem0_status_0 !=
	       scemi_fifoRxData_block0_status } ;
  assign x__h28141 =
	     { scemi_fifoRxData_elem1_status_1 !=
	       scemi_fifoRxData_block1_status,
	       scemi_fifoRxData_elem1_status_0 !=
	       scemi_fifoRxData_block1_status } ;
  assign x__h31734 =
	     { scemi_1_fifoTxData_elem0_status_1 ==
	       scemi_1_fifoTxData_block0_status,
	       scemi_1_fifoTxData_elem0_status_0 ==
	       scemi_1_fifoTxData_block0_status } ;
  assign x__h32186 =
	     { scemi_1_fifoTxData_elem1_status_1 ==
	       scemi_1_fifoTxData_block1_status,
	       scemi_1_fifoTxData_elem1_status_0 ==
	       scemi_1_fifoTxData_block1_status } ;
  assign x__h33660 =
	     { scemi_1_fifoTxData_elem0_status_1__read__85_EQ_ETC___d587,
	       scemi_1_fifoTxData_elem0_status_0__read__88_EQ_ETC___d589 } ;
  assign x__h34039 =
	     { scemi_1_fifoTxData_elem1_status_1__read__94_EQ_ETC___d596,
	       scemi_1_fifoTxData_elem1_status_0__read__97_EQ_ETC___d598 } ;
  assign x__h90864 = nextStorage__h90796 & nextMask__h90797 ;
  assign x__h90991 = { 23'd0, b__h90925, 3'd0 } ;
  assign x__h91027 = { 128'd0, value__h91028 } ;
  assign x__h91146 = { 23'd0, value__h91096, 3'd0 } ;
  assign x__h91154 = { 128'd0, value__h91155 } ;
  assign x__h91952 = nextStorage__h91884 & nextMask__h91885 ;
  assign x__h92115 = { 128'd0, value__h92116 } ;
  assign x__h92234 = { 23'd0, value__h92184, 3'd0 } ;
  assign x__h92242 = { 128'd0, value__h92243 } ;
  assign x__h93619 = nextStorage__h93551 & nextMask__h93552 ;
  assign x__h93781 = { 20'd0, value__h93782 } ;
  assign x__h93907 = { 20'd0, value__h93908 } ;
  assign x_wget__h3421 =
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_first ?
	       3'd0 :
	       3'd1 ;
  assign x_wget__h3575 =
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_first ?
	       ~ddr3_ctrl_fRequest$D_OUT[572:541] :
	       ~ddr3_ctrl_fRequest$D_OUT[604:573] ;
  assign x_wget__h3651 =
	     WILL_FIRE_RL_ddr3_ctrl_ready_process_write_request_first ?
	       ddr3_ctrl_fRequest$D_OUT[255:0] :
	       ddr3_ctrl_fRequest$D_OUT[511:256] ;
  assign y__h13994 = x__h14234 & y__h14235 ;
  assign y__h168656 = enqData__h168593 & enqMask__h168594 ;
  assign y__h170873 = enqData__h170810 & enqMask__h170811 ;
  assign y__h172132 = enqData__h172069 & enqMask__h172070 ;
  assign y__h90865 = enqData__h90802 & enqMask__h90803 ;
  assign y__h91953 = enqData__h91890 & enqMask__h91891 ;
  assign y__h93620 = enqData__h93557 & enqMask__h93558 ;
  always@(scemi_scemi_clkgen_rCount)
  begin
    case (scemi_scemi_clkgen_rCount)
      5'd0: mask__h13959 = 16'h666F;
      5'd1: mask__h13959 = 16'h66FF;
      5'd2, 5'd3: mask__h13959 = 16'h8000;
      5'd4, 5'd5, 5'd8, 5'd10, 5'd12, 5'd14, 5'd16, 5'd18, 5'd20:
	  mask__h13959 = 16'hFC00;
      5'd6, 5'd9, 5'd11, 5'd13, 5'd15, 5'd17, 5'd19, 5'd21:
	  mask__h13959 = 16'h1000;
      5'd7: mask__h13959 = 16'hC000;
      5'd22: mask__h13959 = 16'h0;
      default: mask__h13959 = 16'h0;
    endcase
  end
  always@(scemi_scemi_clkgen_rCount)
  begin
    case (scemi_scemi_clkgen_rCount)
      5'd0: x__h14234 = 16'd39312;
      5'd1: x__h14234 = 16'd39168;
      5'd2, 5'd3: x__h14234 = 16'd32767;
      5'd4, 5'd5, 5'd8, 5'd10, 5'd12, 5'd14, 5'd16, 5'd18, 5'd20:
	  x__h14234 = 16'd1023;
      5'd6, 5'd9, 5'd11, 5'd13, 5'd15, 5'd17, 5'd19, 5'd21:
	  x__h14234 = 16'd61439;
      5'd7: x__h14234 = 16'd16383;
      5'd22: x__h14234 = 16'd65535;
      default: x__h14234 = 16'd65535;
    endcase
  end
  always@(scemi_scemi_clkgen_rCount or
	  scemi_scemi_clkgen_rMMCM_filter_2 or
	  scemi_scemi_clkgen_rMMCM_filter_1 or
	  scemi_scemi_clkgen_rMMCM_lock_3 or
	  scemi_scemi_clkgen_rMMCM_lock_2 or
	  scemi_scemi_clkgen_rMMCM_lock_1 or
	  scemi_scemi_clkgen_rMMCM_clk_fb_2 or
	  scemi_scemi_clkgen_rMMCM_clk_fb_1 or
	  scemi_scemi_clkgen_rMMCM_clk_div or
	  scemi_scemi_clkgen_rMMCM_clkout6_2 or
	  scemi_scemi_clkgen_rMMCM_clkout6_1 or
	  scemi_scemi_clkgen_rMMCM_clkout5_2 or
	  scemi_scemi_clkgen_rMMCM_clkout5_1 or
	  scemi_scemi_clkgen_rMMCM_clkout4_2 or
	  scemi_scemi_clkgen_rMMCM_clkout4_1 or
	  scemi_scemi_clkgen_rMMCM_clkout3_2 or
	  scemi_scemi_clkgen_rMMCM_clkout3_1 or
	  scemi_scemi_clkgen_rMMCM_clkout2_2 or
	  scemi_scemi_clkgen_rMMCM_clkout2_1 or
	  scemi_scemi_clkgen_rMMCM_clkout1_2 or
	  scemi_scemi_clkgen_rMMCM_clkout1_1 or
	  scemi_scemi_clkgen_rMMCM_clkout0_2 or
	  scemi_scemi_clkgen_rMMCM_clkout0_1)
  begin
    case (scemi_scemi_clkgen_rCount)
      5'd0: y__h14235 = scemi_scemi_clkgen_rMMCM_filter_2;
      5'd1: y__h14235 = scemi_scemi_clkgen_rMMCM_filter_1;
      5'd2: y__h14235 = scemi_scemi_clkgen_rMMCM_lock_3;
      5'd3: y__h14235 = scemi_scemi_clkgen_rMMCM_lock_2;
      5'd4: y__h14235 = scemi_scemi_clkgen_rMMCM_lock_1;
      5'd5: y__h14235 = scemi_scemi_clkgen_rMMCM_clk_fb_2;
      5'd6: y__h14235 = scemi_scemi_clkgen_rMMCM_clk_fb_1;
      5'd7: y__h14235 = scemi_scemi_clkgen_rMMCM_clk_div;
      5'd8: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout6_2;
      5'd9: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout6_1;
      5'd10: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout5_2;
      5'd11: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout5_1;
      5'd12: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout4_2;
      5'd13: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout4_1;
      5'd14: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout3_2;
      5'd15: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout3_1;
      5'd16: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout2_2;
      5'd17: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout2_1;
      5'd18: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout1_2;
      5'd19: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout1_1;
      5'd20: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout0_2;
      5'd21: y__h14235 = scemi_scemi_clkgen_rMMCM_clkout0_1;
      5'd22: y__h14235 = 16'hFFFF;
      default: y__h14235 = 16'h0;
    endcase
  end
  always@(x__h242005 or
	  scemi_count_outport_beats_1 or scemi_count_outport_beats)
  begin
    case (x__h242005)
      2'd0:
	  CASE_x42005_0_scemi_count_outport_beats_1_1_sc_ETC__q1 =
	      scemi_count_outport_beats_1;
      2'd1:
	  CASE_x42005_0_scemi_count_outport_beats_1_1_sc_ETC__q1 =
	      scemi_count_outport_beats;
      default: CASE_x42005_0_scemi_count_outport_beats_1_1_sc_ETC__q1 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(scemi_rS1OutPort or
	  scemi_shutdown_ctrl_out_beats or
	  scemi_dut_dut_prb_control_data_out_beats or
	  scemi_dut_softrst_resp_outport_beats or
	  scemi_data_resp_outport_beats or
	  CASE_x42005_0_scemi_count_outport_beats_1_1_sc_ETC__q1)
  begin
    case (scemi_rS1OutPort)
      10'd0: value__h243322 = scemi_dut_dut_prb_control_data_out_beats;
      10'd1: value__h243322 = scemi_dut_softrst_resp_outport_beats;
      10'd2: value__h243322 = scemi_data_resp_outport_beats;
      10'd3:
	  value__h243322 =
	      CASE_x42005_0_scemi_count_outport_beats_1_1_sc_ETC__q1;
      default: value__h243322 = scemi_shutdown_ctrl_out_beats;
    endcase
  end
  always@(scemi_rS1InPortNum or
	  scemi_shutdown_ctrl_in_remaining or
	  scemi_dut_dut_prb_control_control_in_remaining or
	  scemi_dut_softrst_req_inport_remaining or
	  scemi_data_req_inport_remaining or scemi_start_inport_remaining)
  begin
    case (scemi_rS1InPortNum)
      10'd0:
	  IF_scemi_rS1InPortNum_784_EQ_0_785_THEN_scemi__ETC___d1794 =
	      scemi_dut_dut_prb_control_control_in_remaining;
      10'd1:
	  IF_scemi_rS1InPortNum_784_EQ_0_785_THEN_scemi__ETC___d1794 =
	      scemi_dut_softrst_req_inport_remaining;
      10'd2:
	  IF_scemi_rS1InPortNum_784_EQ_0_785_THEN_scemi__ETC___d1794 =
	      scemi_data_req_inport_remaining;
      10'd3:
	  IF_scemi_rS1InPortNum_784_EQ_0_785_THEN_scemi__ETC___d1794 =
	      scemi_start_inport_remaining;
      default: IF_scemi_rS1InPortNum_784_EQ_0_785_THEN_scemi__ETC___d1794 =
		   scemi_shutdown_ctrl_in_remaining;
    endcase
  end
  always@(scemi_fS1OutPortAcks_ifc_rStorage or
	  scemi_shutdown_ctrl_out_finished$sRDY or
	  scemi_dut_dut_prb_control_data_out_finished$sRDY or
	  scemi_dut_softrst_resp_outport_finished$sRDY or
	  scemi_data_resp_outport_finished$sRDY or
	  scemi_count_outport_finished$sRDY)
  begin
    case (scemi_fS1OutPortAcks_ifc_rStorage[9:0])
      10'd0:
	  IF_scemi_fS1OutPortAcks_ifc_rStorage_618_BITS__ETC___d1836 =
	      scemi_dut_dut_prb_control_data_out_finished$sRDY;
      10'd1:
	  IF_scemi_fS1OutPortAcks_ifc_rStorage_618_BITS__ETC___d1836 =
	      scemi_dut_softrst_resp_outport_finished$sRDY;
      10'd2:
	  IF_scemi_fS1OutPortAcks_ifc_rStorage_618_BITS__ETC___d1836 =
	      scemi_data_resp_outport_finished$sRDY;
      10'd3:
	  IF_scemi_fS1OutPortAcks_ifc_rStorage_618_BITS__ETC___d1836 =
	      scemi_count_outport_finished$sRDY;
      default: IF_scemi_fS1OutPortAcks_ifc_rStorage_618_BITS__ETC___d1836 =
		   scemi_fS1OutPortAcks_ifc_rStorage[9:0] != 10'd4 ||
		   scemi_shutdown_ctrl_out_finished$sRDY;
    endcase
  end
  always@(IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 or
	  x__h181737 or
	  scemi_fS1MsgOut_ifc_rDataCount_923_ULT_4___d1994 or x__h174137)
  begin
    case (IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999)
      2'd1:
	  IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2070 =
	      !scemi_fS1MsgOut_ifc_rDataCount_923_ULT_4___d1994;
      2'd2:
	  IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2070 =
	      x__h174137 == 6'd25 || x__h174137 == 6'd48 ||
	      x__h174137 == 6'd49 ||
	      x__h174137 == 6'd52;
      default: IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2070 =
		   IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 ==
		   2'd3 &&
		   (x__h181737 == 6'd8 || x__h181737 == 6'd9 ||
		    x__h181737 == 6'd12 ||
		    x__h181737 == 6'd33);
    endcase
  end
  always@(IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 or
	  x__h181737 or
	  scemi_fFromContinueBeat_ifc_rDataCount_886_ULT_4___d1992 or
	  x__h174137)
  begin
    case (IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999)
      2'd1:
	  IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2050 =
	      !scemi_fFromContinueBeat_ifc_rDataCount_886_ULT_4___d1992;
      2'd2:
	  IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2050 =
	      x__h174137 == 6'd24 || x__h174137 == 6'd26 ||
	      x__h174137 == 6'd28 ||
	      x__h174137 == 6'd44;
      default: IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2050 =
		   IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 ==
		   2'd3 &&
		   x__h181737 != 6'd8 &&
		   x__h181737 != 6'd9 &&
		   x__h181737 != 6'd10 &&
		   x__h181737 != 6'd12 &&
		   x__h181737 != 6'd16 &&
		   x__h181737 != 6'd17 &&
		   x__h181737 != 6'd18 &&
		   x__h181737 != 6'd33;
    endcase
  end
  always@(IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 or
	  x__h181737 or
	  scemi_fS2MsgOut_ifc_rDataCount_960_ULT_4___d1997 or x__h174137)
  begin
    case (IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999)
      2'd1:
	  IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2097 =
	      !scemi_fS2MsgOut_ifc_rDataCount_960_ULT_4___d1997;
      2'd2:
	  IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2097 =
	      x__h174137 == 6'd50 || x__h174137 == 6'd40 ||
	      x__h174137 == 6'd41 ||
	      x__h174137 == 6'd42;
      default: IF_IF_scemi_fFromContinueBeat_ifc_rDataCount_8_ETC___d2097 =
		   IF_scemi_fFromContinueBeat_ifc_rDataCount_886__ETC___d1999 ==
		   2'd3 &&
		   (x__h181737 == 6'd10 || x__h181737 == 6'd16 ||
		    x__h181737 == 6'd17 ||
		    x__h181737 == 6'd18);
    endcase
  end
  always@(scemi_dut_dut_prb_control_ackFifo$D_OUT)
  begin
    case (scemi_dut_dut_prb_control_ackFifo$D_OUT[31:29])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4, 3'd5, 3'd6:
	  CASE_scemi_dut_dut_prb_control_ackFifoD_OUT_B_ETC__q2 =
	      scemi_dut_dut_prb_control_ackFifo$D_OUT[31:16];
      3'd7:
	  CASE_scemi_dut_dut_prb_control_ackFifoD_OUT_B_ETC__q2 =
	      { 3'd7, scemi_dut_dut_prb_control_ackFifo$D_OUT[28:16] };
    endcase
  end
  always@(scemi_dut_dut_prb_control_prb_str$D_OUT)
  begin
    case (scemi_dut_dut_prb_control_prb_str$D_OUT[31:29])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4, 3'd5, 3'd6:
	  CASE_scemi_dut_dut_prb_control_prb_strD_OUT_B_ETC__q3 =
	      scemi_dut_dut_prb_control_prb_str$D_OUT[31:16];
      3'd7:
	  CASE_scemi_dut_dut_prb_control_prb_strD_OUT_B_ETC__q3 =
	      { 3'd7, scemi_dut_dut_prb_control_prb_str$D_OUT[28:16] };
    endcase
  end
  always@(scemi_dut_dut_prb_control_control_in_scemiInportBeats)
  begin
    case (scemi_dut_dut_prb_control_control_in_scemiInportBeats[15:13])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4, 3'd5, 3'd6:
	  CASE_scemi_dut_dut_prb_control_control_in_scem_ETC__q6 =
	      scemi_dut_dut_prb_control_control_in_scemiInportBeats[15:0];
      3'd7:
	  CASE_scemi_dut_dut_prb_control_control_in_scem_ETC__q6 =
	      { 3'd7,
		scemi_dut_dut_prb_control_control_in_scemiInportBeats[12:0] };
    endcase
  end
  always@(scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read)
  begin
    case (scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:13])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4, 3'd5, 3'd6:
	  IF_scemi_dut_dut_prb_control_control_in_dataF__ETC___d904 =
	      scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[15:0];
      3'd7:
	  IF_scemi_dut_dut_prb_control_control_in_dataF__ETC___d904 =
	      { 3'd7,
		scemi_dut_dut_prb_control_control_in_dataF_rv$port1__read[12:0] };
    endcase
  end
  always@(scemi_dut_dut_prb_control_enff$D_OUT)
  begin
    case (scemi_dut_dut_prb_control_enff$D_OUT[18:16])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4, 3'd5, 3'd6:
	  CASE_scemi_dut_dut_prb_control_enffD_OUT_BITS_ETC__q7 =
	      scemi_dut_dut_prb_control_enff$D_OUT[18:3];
      3'd7:
	  CASE_scemi_dut_dut_prb_control_enffD_OUT_BITS_ETC__q7 =
	      { 3'd7, scemi_dut_dut_prb_control_enff$D_OUT[15:3] };
    endcase
  end

  // handling of inlined registers

  always@(posedge clk_gen_clkout1buffer$O)
  begin
    if (ddr3ref_rst_n$OUT_RST == `BSV_RESET_VALUE)
      begin
        ddr3_ctrl_dly_reset_n_count <= `BSV_ASSIGNMENT_DELAY 32'd40000;
      end
    else
      begin
        if (ddr3_ctrl_dly_reset_n_count$EN)
	  ddr3_ctrl_dly_reset_n_count <= `BSV_ASSIGNMENT_DELAY
	      ddr3_ctrl_dly_reset_n_count$D_IN;
      end
  end

  always@(posedge ddr3_ctrl$ui_clk)
  begin
    if (ddr3_ctrl_user_reset_n$OUT_RST == `BSV_RESET_VALUE)
      begin
        ddr3_ctrl_rDeqWriteReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ddr3_ctrl_rEnqReadResp <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ddr3_ctrl_rFirstResponse <= `BSV_ASSIGNMENT_DELAY 256'd0;
      end
    else
      begin
        if (ddr3_ctrl_rDeqWriteReq$EN)
	  ddr3_ctrl_rDeqWriteReq <= `BSV_ASSIGNMENT_DELAY
	      ddr3_ctrl_rDeqWriteReq$D_IN;
	if (ddr3_ctrl_rEnqReadResp$EN)
	  ddr3_ctrl_rEnqReadResp <= `BSV_ASSIGNMENT_DELAY
	      ddr3_ctrl_rEnqReadResp$D_IN;
	if (ddr3_ctrl_rFirstResponse$EN)
	  ddr3_ctrl_rFirstResponse <= `BSV_ASSIGNMENT_DELAY
	      ddr3_ctrl_rFirstResponse$D_IN;
      end
  end

  always@(posedge scemi_pcie_ep$user_clk_out)
  begin
    if (!`BSV_RESET_VALUE == `BSV_RESET_VALUE)
      begin
        scemi_fAxiRx_rv <= `BSV_ASSIGNMENT_DELAY 96'h2AAAAAAAAAAAAAAAAAAAAAAA;
	scemi_fAxiTx_rv <= `BSV_ASSIGNMENT_DELAY 74'h0AAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (scemi_fAxiRx_rv$EN)
	  scemi_fAxiRx_rv <= `BSV_ASSIGNMENT_DELAY scemi_fAxiRx_rv$D_IN;
	if (scemi_fAxiTx_rv$EN)
	  scemi_fAxiTx_rv <= `BSV_ASSIGNMENT_DELAY scemi_fAxiTx_rv$D_IN;
      end
    if (scemi_epReset250$OUT_RST == `BSV_RESET_VALUE)
      begin
        scemi_1_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_1_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_1_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_1_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_1_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_fifoRxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_fifoRxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_fifoRxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_fifoRxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_fifoRxData_elem_0 <= `BSV_ASSIGNMENT_DELAY 81'd0;
	scemi_fifoRxData_elem_1 <= `BSV_ASSIGNMENT_DELAY 81'd0;
	scemi_fifoRxData_elem_2 <= `BSV_ASSIGNMENT_DELAY 81'd0;
	scemi_fifoRxData_elem_3 <= `BSV_ASSIGNMENT_DELAY 81'd0;
	scemi_fifoRxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_intr_on <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_max_payload_cr <= `BSV_ASSIGNMENT_DELAY 13'd128;
	scemi_max_rd_req_cr <= `BSV_ASSIGNMENT_DELAY 13'd128;
	scemi_msix_enable_cr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_msix_masked_cr <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_rcb_cr <= `BSV_ASSIGNMENT_DELAY 8'd128;
      end
    else
      begin
        if (scemi_1_fifoTxData_elem0_status_0$EN)
	  scemi_1_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      scemi_1_fifoTxData_elem0_status_0$D_IN;
	if (scemi_1_fifoTxData_elem0_status_1$EN)
	  scemi_1_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_1_fifoTxData_elem0_status_1$D_IN;
	if (scemi_1_fifoTxData_elem1_status_0$EN)
	  scemi_1_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      scemi_1_fifoTxData_elem1_status_0$D_IN;
	if (scemi_1_fifoTxData_elem1_status_1$EN)
	  scemi_1_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_1_fifoTxData_elem1_status_1$D_IN;
	if (scemi_1_fifoTxData_read_block$EN)
	  scemi_1_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      scemi_1_fifoTxData_read_block$D_IN;
	if (scemi_fifoRxData_elem0_status_0$EN)
	  scemi_fifoRxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_elem0_status_0$D_IN;
	if (scemi_fifoRxData_elem0_status_1$EN)
	  scemi_fifoRxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_elem0_status_1$D_IN;
	if (scemi_fifoRxData_elem1_status_0$EN)
	  scemi_fifoRxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_elem1_status_0$D_IN;
	if (scemi_fifoRxData_elem1_status_1$EN)
	  scemi_fifoRxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_elem1_status_1$D_IN;
	if (scemi_fifoRxData_elem_0$EN)
	  scemi_fifoRxData_elem_0 <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_elem_0$D_IN;
	if (scemi_fifoRxData_elem_1$EN)
	  scemi_fifoRxData_elem_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_elem_1$D_IN;
	if (scemi_fifoRxData_elem_2$EN)
	  scemi_fifoRxData_elem_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_elem_2$D_IN;
	if (scemi_fifoRxData_elem_3$EN)
	  scemi_fifoRxData_elem_3 <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_elem_3$D_IN;
	if (scemi_fifoRxData_write_block$EN)
	  scemi_fifoRxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_write_block$D_IN;
	if (scemi_intr_on$EN)
	  scemi_intr_on <= `BSV_ASSIGNMENT_DELAY scemi_intr_on$D_IN;
	if (scemi_max_payload_cr$EN)
	  scemi_max_payload_cr <= `BSV_ASSIGNMENT_DELAY
	      scemi_max_payload_cr$D_IN;
	if (scemi_max_rd_req_cr$EN)
	  scemi_max_rd_req_cr <= `BSV_ASSIGNMENT_DELAY
	      scemi_max_rd_req_cr$D_IN;
	if (scemi_msix_enable_cr$EN)
	  scemi_msix_enable_cr <= `BSV_ASSIGNMENT_DELAY
	      scemi_msix_enable_cr$D_IN;
	if (scemi_msix_masked_cr$EN)
	  scemi_msix_masked_cr <= `BSV_ASSIGNMENT_DELAY
	      scemi_msix_masked_cr$D_IN;
	if (scemi_rcb_cr$EN)
	  scemi_rcb_cr <= `BSV_ASSIGNMENT_DELAY scemi_rcb_cr$D_IN;
      end
  end

  always@(posedge scemi_scemi_clkgen_clkout0buf$O)
  begin
    if (scemi_network_status$OUT_RST == `BSV_RESET_VALUE)
      begin
        scemi_clockGenerators_clock_gens_counters_count <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	scemi_clockGenerators_clock_gens_out_of_reset_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	scemi_clockGenerators_clock_gens_reset_counter <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	scemi_clockGenerators_clock_gens_stalled <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	scemi_clockGenerators_free_stamp <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_clockGenerators_one_to_one_cclock_count <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	scemi_init_state_any_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_init_state_cycle_stamp <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (scemi_clockGenerators_clock_gens_counters_count$EN)
	  scemi_clockGenerators_clock_gens_counters_count <= `BSV_ASSIGNMENT_DELAY
	      scemi_clockGenerators_clock_gens_counters_count$D_IN;
	if (scemi_clockGenerators_clock_gens_out_of_reset_reg$EN)
	  scemi_clockGenerators_clock_gens_out_of_reset_reg <= `BSV_ASSIGNMENT_DELAY
	      scemi_clockGenerators_clock_gens_out_of_reset_reg$D_IN;
	if (scemi_clockGenerators_clock_gens_reset_counter$EN)
	  scemi_clockGenerators_clock_gens_reset_counter <= `BSV_ASSIGNMENT_DELAY
	      scemi_clockGenerators_clock_gens_reset_counter$D_IN;
	if (scemi_clockGenerators_clock_gens_stalled$EN)
	  scemi_clockGenerators_clock_gens_stalled <= `BSV_ASSIGNMENT_DELAY
	      scemi_clockGenerators_clock_gens_stalled$D_IN;
	if (scemi_clockGenerators_free_stamp$EN)
	  scemi_clockGenerators_free_stamp <= `BSV_ASSIGNMENT_DELAY
	      scemi_clockGenerators_free_stamp$D_IN;
	if (scemi_clockGenerators_one_to_one_cclock_count$EN)
	  scemi_clockGenerators_one_to_one_cclock_count <= `BSV_ASSIGNMENT_DELAY
	      scemi_clockGenerators_one_to_one_cclock_count$D_IN;
	if (scemi_init_state_any_in_reset_uclk$EN)
	  scemi_init_state_any_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_init_state_any_in_reset_uclk$D_IN;
	if (scemi_init_state_cycle_stamp$EN)
	  scemi_init_state_cycle_stamp <= `BSV_ASSIGNMENT_DELAY
	      scemi_init_state_cycle_stamp$D_IN;
      end
  end

  always@(posedge scemi_clkgen_clkout0buffer$O)
  begin
    if (scemi_epReset125$OUT_RST == `BSV_RESET_VALUE)
      begin
        scemi_1_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 162'd0;
	scemi_1_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_1_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 162'd0;
	scemi_1_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_1_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_count_outport_count <= `BSV_ASSIGNMENT_DELAY 2'd0;
	scemi_count_outport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_data_req_inport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_data_req_inport_remaining <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_data_req_inport_scemiInportBeats <= `BSV_ASSIGNMENT_DELAY 32'd0;
	scemi_data_resp_outport_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_data_resp_outport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_dut_dut_prb_control_control_in_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	scemi_dut_dut_prb_control_control_in_remaining <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	scemi_dut_dut_prb_control_control_in_scemiInportBeats <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	scemi_dut_dut_prb_control_data_out_count <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	scemi_dut_dut_prb_control_data_out_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	scemi_dut_softrst_req_inport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	scemi_dut_softrst_req_inport_remaining <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_dut_softrst_req_inport_scemiInportBeats <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	scemi_dut_softrst_resp_outport_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_dut_softrst_resp_outport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	scemi_fFromBridgeBeat_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY 6'd32;
	scemi_fFromBridgeBeat_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY 6'd0;
	scemi_fFromBridgeBeat_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY 256'd0;
	scemi_fFromBridgeBeat_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	    256'd0;
	scemi_fFromContinueBeat_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY 6'd32;
	scemi_fFromContinueBeat_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY 6'd0;
	scemi_fFromContinueBeat_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY 256'd0;
	scemi_fFromContinueBeat_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	    256'd0;
	scemi_fS1MsgOut_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY 6'd32;
	scemi_fS1MsgOut_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY 6'd0;
	scemi_fS1MsgOut_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY 256'd0;
	scemi_fS1MsgOut_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY 256'd0;
	scemi_fS1OutPortAcks_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY 5'd16;
	scemi_fS1OutPortAcks_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY 5'd0;
	scemi_fS1OutPortAcks_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY 160'd0;
	scemi_fS1OutPortAcks_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY 160'd0;
	scemi_fS2MsgOut_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY 6'd32;
	scemi_fS2MsgOut_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY 6'd0;
	scemi_fS2MsgOut_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY 256'd0;
	scemi_fS2MsgOut_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY 256'd0;
	scemi_fToContinueBeat_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY 6'd32;
	scemi_fToContinueBeat_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY 6'd0;
	scemi_fToContinueBeat_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY 256'd0;
	scemi_fToContinueBeat_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	    256'd0;
	scemi_fifoRxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_fifoRxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_fifoRxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_lrS1ActiveRequests <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_lrS1ActiveRequests_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_lrS1ActiveRequests_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_lrS1ActiveRequests_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_lrS1ActiveRequests_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_lrS1PendingRequests <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_lrS1PendingRequests_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_lrS1PendingRequests_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_lrS1PendingRequests_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_lrS1PendingRequests_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_max_payload_bytes <= `BSV_ASSIGNMENT_DELAY 13'd128;
	scemi_max_read_req_bytes <= `BSV_ASSIGNMENT_DELAY 13'd128;
	scemi_msix_enable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_msix_masked <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_rDecodeSceMi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rInMsgBytes <= `BSV_ASSIGNMENT_DELAY 8'd0;
	scemi_rOtherMsgIn <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rOtherMsgOut <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rOutMsgBytes <= `BSV_ASSIGNMENT_DELAY 8'd0;
	scemi_rS1MsgInIsAck <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rS1MsgInIsData <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rS1MsgOutDataReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rS1MsgOutReqGrant <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_rS1MsgOutReqReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rS1OutDataHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rS1RequestedPort <= `BSV_ASSIGNMENT_DELAY 10'd0;
	scemi_rS2MsgInIsCred <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rS2MsgInIsData <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rS2MsgOutCredGrant <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rS2MsgOutDataReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rSceMi1MsgIn <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rSceMi1MsgOut <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rSceMi2MsgIn <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rSceMi2MsgOut <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_rcb_mask <= `BSV_ASSIGNMENT_DELAY 7'h3F;
	scemi_rvPrevMsgGrant <= `BSV_ASSIGNMENT_DELAY 3'd0;
	scemi_rvPrevPrevMsgGrant <= `BSV_ASSIGNMENT_DELAY 3'd0;
	scemi_shutdown_ctrl_in_in_reset_noc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_shutdown_ctrl_in_remaining <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_shutdown_ctrl_in_scemiInportBeats <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	scemi_shutdown_ctrl_out_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_shutdown_ctrl_out_in_reset_noc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_start_inport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_start_inport_remaining <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_start_inport_scemiInportBeats <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (scemi_1_fifoTxData_block0$EN)
	  scemi_1_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      scemi_1_fifoTxData_block0$D_IN;
	if (scemi_1_fifoTxData_block0_status$EN)
	  scemi_1_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      scemi_1_fifoTxData_block0_status$D_IN;
	if (scemi_1_fifoTxData_block1$EN)
	  scemi_1_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_1_fifoTxData_block1$D_IN;
	if (scemi_1_fifoTxData_block1_status$EN)
	  scemi_1_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      scemi_1_fifoTxData_block1_status$D_IN;
	if (scemi_1_fifoTxData_write_block$EN)
	  scemi_1_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      scemi_1_fifoTxData_write_block$D_IN;
	if (scemi_count_outport_count$EN)
	  scemi_count_outport_count <= `BSV_ASSIGNMENT_DELAY
	      scemi_count_outport_count$D_IN;
	if (scemi_count_outport_in_reset_noc$EN)
	  scemi_count_outport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	      scemi_count_outport_in_reset_noc$D_IN;
	if (scemi_data_req_inport_in_reset_noc$EN)
	  scemi_data_req_inport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_req_inport_in_reset_noc$D_IN;
	if (scemi_data_req_inport_remaining$EN)
	  scemi_data_req_inport_remaining <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_req_inport_remaining$D_IN;
	if (scemi_data_req_inport_scemiInportBeats$EN)
	  scemi_data_req_inport_scemiInportBeats <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_req_inport_scemiInportBeats$D_IN;
	if (scemi_data_resp_outport_count$EN)
	  scemi_data_resp_outport_count <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_resp_outport_count$D_IN;
	if (scemi_data_resp_outport_in_reset_noc$EN)
	  scemi_data_resp_outport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_resp_outport_in_reset_noc$D_IN;
	if (scemi_dut_dut_prb_control_control_in_in_reset_noc$EN)
	  scemi_dut_dut_prb_control_control_in_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_control_in_in_reset_noc$D_IN;
	if (scemi_dut_dut_prb_control_control_in_remaining$EN)
	  scemi_dut_dut_prb_control_control_in_remaining <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_control_in_remaining$D_IN;
	if (scemi_dut_dut_prb_control_control_in_scemiInportBeats$EN)
	  scemi_dut_dut_prb_control_control_in_scemiInportBeats <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_control_in_scemiInportBeats$D_IN;
	if (scemi_dut_dut_prb_control_data_out_count$EN)
	  scemi_dut_dut_prb_control_data_out_count <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_data_out_count$D_IN;
	if (scemi_dut_dut_prb_control_data_out_in_reset_noc$EN)
	  scemi_dut_dut_prb_control_data_out_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_data_out_in_reset_noc$D_IN;
	if (scemi_dut_softrst_req_inport_in_reset_noc$EN)
	  scemi_dut_softrst_req_inport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_req_inport_in_reset_noc$D_IN;
	if (scemi_dut_softrst_req_inport_remaining$EN)
	  scemi_dut_softrst_req_inport_remaining <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_req_inport_remaining$D_IN;
	if (scemi_dut_softrst_req_inport_scemiInportBeats$EN)
	  scemi_dut_softrst_req_inport_scemiInportBeats <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_req_inport_scemiInportBeats$D_IN;
	if (scemi_dut_softrst_resp_outport_count$EN)
	  scemi_dut_softrst_resp_outport_count <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_resp_outport_count$D_IN;
	if (scemi_dut_softrst_resp_outport_in_reset_noc$EN)
	  scemi_dut_softrst_resp_outport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_resp_outport_in_reset_noc$D_IN;
	if (scemi_fFromBridgeBeat_ifc_rDataAvail$EN)
	  scemi_fFromBridgeBeat_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY
	      scemi_fFromBridgeBeat_ifc_rDataAvail$D_IN;
	if (scemi_fFromBridgeBeat_ifc_rDataCount$EN)
	  scemi_fFromBridgeBeat_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY
	      scemi_fFromBridgeBeat_ifc_rDataCount$D_IN;
	if (scemi_fFromBridgeBeat_ifc_rStorage$EN)
	  scemi_fFromBridgeBeat_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY
	      scemi_fFromBridgeBeat_ifc_rStorage$D_IN;
	if (scemi_fFromBridgeBeat_ifc_rStorageMask$EN)
	  scemi_fFromBridgeBeat_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	      scemi_fFromBridgeBeat_ifc_rStorageMask$D_IN;
	if (scemi_fFromContinueBeat_ifc_rDataAvail$EN)
	  scemi_fFromContinueBeat_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY
	      scemi_fFromContinueBeat_ifc_rDataAvail$D_IN;
	if (scemi_fFromContinueBeat_ifc_rDataCount$EN)
	  scemi_fFromContinueBeat_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY
	      scemi_fFromContinueBeat_ifc_rDataCount$D_IN;
	if (scemi_fFromContinueBeat_ifc_rStorage$EN)
	  scemi_fFromContinueBeat_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY
	      scemi_fFromContinueBeat_ifc_rStorage$D_IN;
	if (scemi_fFromContinueBeat_ifc_rStorageMask$EN)
	  scemi_fFromContinueBeat_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	      scemi_fFromContinueBeat_ifc_rStorageMask$D_IN;
	if (scemi_fS1MsgOut_ifc_rDataAvail$EN)
	  scemi_fS1MsgOut_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS1MsgOut_ifc_rDataAvail$D_IN;
	if (scemi_fS1MsgOut_ifc_rDataCount$EN)
	  scemi_fS1MsgOut_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS1MsgOut_ifc_rDataCount$D_IN;
	if (scemi_fS1MsgOut_ifc_rStorage$EN)
	  scemi_fS1MsgOut_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS1MsgOut_ifc_rStorage$D_IN;
	if (scemi_fS1MsgOut_ifc_rStorageMask$EN)
	  scemi_fS1MsgOut_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS1MsgOut_ifc_rStorageMask$D_IN;
	if (scemi_fS1OutPortAcks_ifc_rDataAvail$EN)
	  scemi_fS1OutPortAcks_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS1OutPortAcks_ifc_rDataAvail$D_IN;
	if (scemi_fS1OutPortAcks_ifc_rDataCount$EN)
	  scemi_fS1OutPortAcks_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS1OutPortAcks_ifc_rDataCount$D_IN;
	if (scemi_fS1OutPortAcks_ifc_rStorage$EN)
	  scemi_fS1OutPortAcks_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS1OutPortAcks_ifc_rStorage$D_IN;
	if (scemi_fS1OutPortAcks_ifc_rStorageMask$EN)
	  scemi_fS1OutPortAcks_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS1OutPortAcks_ifc_rStorageMask$D_IN;
	if (scemi_fS2MsgOut_ifc_rDataAvail$EN)
	  scemi_fS2MsgOut_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS2MsgOut_ifc_rDataAvail$D_IN;
	if (scemi_fS2MsgOut_ifc_rDataCount$EN)
	  scemi_fS2MsgOut_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS2MsgOut_ifc_rDataCount$D_IN;
	if (scemi_fS2MsgOut_ifc_rStorage$EN)
	  scemi_fS2MsgOut_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS2MsgOut_ifc_rStorage$D_IN;
	if (scemi_fS2MsgOut_ifc_rStorageMask$EN)
	  scemi_fS2MsgOut_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	      scemi_fS2MsgOut_ifc_rStorageMask$D_IN;
	if (scemi_fToContinueBeat_ifc_rDataAvail$EN)
	  scemi_fToContinueBeat_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY
	      scemi_fToContinueBeat_ifc_rDataAvail$D_IN;
	if (scemi_fToContinueBeat_ifc_rDataCount$EN)
	  scemi_fToContinueBeat_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY
	      scemi_fToContinueBeat_ifc_rDataCount$D_IN;
	if (scemi_fToContinueBeat_ifc_rStorage$EN)
	  scemi_fToContinueBeat_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY
	      scemi_fToContinueBeat_ifc_rStorage$D_IN;
	if (scemi_fToContinueBeat_ifc_rStorageMask$EN)
	  scemi_fToContinueBeat_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	      scemi_fToContinueBeat_ifc_rStorageMask$D_IN;
	if (scemi_fifoRxData_block0_status$EN)
	  scemi_fifoRxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_block0_status$D_IN;
	if (scemi_fifoRxData_block1_status$EN)
	  scemi_fifoRxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_block1_status$D_IN;
	if (scemi_fifoRxData_read_block$EN)
	  scemi_fifoRxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      scemi_fifoRxData_read_block$D_IN;
	if (scemi_lrS1ActiveRequests$EN)
	  scemi_lrS1ActiveRequests <= `BSV_ASSIGNMENT_DELAY
	      scemi_lrS1ActiveRequests$D_IN;
	if (scemi_lrS1ActiveRequests_1$EN)
	  scemi_lrS1ActiveRequests_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_lrS1ActiveRequests_1$D_IN;
	if (scemi_lrS1ActiveRequests_2$EN)
	  scemi_lrS1ActiveRequests_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_lrS1ActiveRequests_2$D_IN;
	if (scemi_lrS1ActiveRequests_3$EN)
	  scemi_lrS1ActiveRequests_3 <= `BSV_ASSIGNMENT_DELAY
	      scemi_lrS1ActiveRequests_3$D_IN;
	if (scemi_lrS1ActiveRequests_4$EN)
	  scemi_lrS1ActiveRequests_4 <= `BSV_ASSIGNMENT_DELAY
	      scemi_lrS1ActiveRequests_4$D_IN;
	if (scemi_lrS1PendingRequests$EN)
	  scemi_lrS1PendingRequests <= `BSV_ASSIGNMENT_DELAY
	      scemi_lrS1PendingRequests$D_IN;
	if (scemi_lrS1PendingRequests_1$EN)
	  scemi_lrS1PendingRequests_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_lrS1PendingRequests_1$D_IN;
	if (scemi_lrS1PendingRequests_2$EN)
	  scemi_lrS1PendingRequests_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_lrS1PendingRequests_2$D_IN;
	if (scemi_lrS1PendingRequests_3$EN)
	  scemi_lrS1PendingRequests_3 <= `BSV_ASSIGNMENT_DELAY
	      scemi_lrS1PendingRequests_3$D_IN;
	if (scemi_lrS1PendingRequests_4$EN)
	  scemi_lrS1PendingRequests_4 <= `BSV_ASSIGNMENT_DELAY
	      scemi_lrS1PendingRequests_4$D_IN;
	if (scemi_max_payload_bytes$EN)
	  scemi_max_payload_bytes <= `BSV_ASSIGNMENT_DELAY
	      scemi_max_payload_bytes$D_IN;
	if (scemi_max_read_req_bytes$EN)
	  scemi_max_read_req_bytes <= `BSV_ASSIGNMENT_DELAY
	      scemi_max_read_req_bytes$D_IN;
	if (scemi_msix_enable$EN)
	  scemi_msix_enable <= `BSV_ASSIGNMENT_DELAY scemi_msix_enable$D_IN;
	if (scemi_msix_masked$EN)
	  scemi_msix_masked <= `BSV_ASSIGNMENT_DELAY scemi_msix_masked$D_IN;
	if (scemi_rDecodeSceMi$EN)
	  scemi_rDecodeSceMi <= `BSV_ASSIGNMENT_DELAY scemi_rDecodeSceMi$D_IN;
	if (scemi_rInMsgBytes$EN)
	  scemi_rInMsgBytes <= `BSV_ASSIGNMENT_DELAY scemi_rInMsgBytes$D_IN;
	if (scemi_rOtherMsgIn$EN)
	  scemi_rOtherMsgIn <= `BSV_ASSIGNMENT_DELAY scemi_rOtherMsgIn$D_IN;
	if (scemi_rOtherMsgOut$EN)
	  scemi_rOtherMsgOut <= `BSV_ASSIGNMENT_DELAY scemi_rOtherMsgOut$D_IN;
	if (scemi_rOutMsgBytes$EN)
	  scemi_rOutMsgBytes <= `BSV_ASSIGNMENT_DELAY scemi_rOutMsgBytes$D_IN;
	if (scemi_rS1MsgInIsAck$EN)
	  scemi_rS1MsgInIsAck <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS1MsgInIsAck$D_IN;
	if (scemi_rS1MsgInIsData$EN)
	  scemi_rS1MsgInIsData <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS1MsgInIsData$D_IN;
	if (scemi_rS1MsgOutDataReq$EN)
	  scemi_rS1MsgOutDataReq <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS1MsgOutDataReq$D_IN;
	if (scemi_rS1MsgOutReqGrant$EN)
	  scemi_rS1MsgOutReqGrant <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS1MsgOutReqGrant$D_IN;
	if (scemi_rS1MsgOutReqReq$EN)
	  scemi_rS1MsgOutReqReq <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS1MsgOutReqReq$D_IN;
	if (scemi_rS1OutDataHeader$EN)
	  scemi_rS1OutDataHeader <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS1OutDataHeader$D_IN;
	if (scemi_rS1RequestedPort$EN)
	  scemi_rS1RequestedPort <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS1RequestedPort$D_IN;
	if (scemi_rS2MsgInIsCred$EN)
	  scemi_rS2MsgInIsCred <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS2MsgInIsCred$D_IN;
	if (scemi_rS2MsgInIsData$EN)
	  scemi_rS2MsgInIsData <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS2MsgInIsData$D_IN;
	if (scemi_rS2MsgOutCredGrant$EN)
	  scemi_rS2MsgOutCredGrant <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS2MsgOutCredGrant$D_IN;
	if (scemi_rS2MsgOutDataReq$EN)
	  scemi_rS2MsgOutDataReq <= `BSV_ASSIGNMENT_DELAY
	      scemi_rS2MsgOutDataReq$D_IN;
	if (scemi_rSceMi1MsgIn$EN)
	  scemi_rSceMi1MsgIn <= `BSV_ASSIGNMENT_DELAY scemi_rSceMi1MsgIn$D_IN;
	if (scemi_rSceMi1MsgOut$EN)
	  scemi_rSceMi1MsgOut <= `BSV_ASSIGNMENT_DELAY
	      scemi_rSceMi1MsgOut$D_IN;
	if (scemi_rSceMi2MsgIn$EN)
	  scemi_rSceMi2MsgIn <= `BSV_ASSIGNMENT_DELAY scemi_rSceMi2MsgIn$D_IN;
	if (scemi_rSceMi2MsgOut$EN)
	  scemi_rSceMi2MsgOut <= `BSV_ASSIGNMENT_DELAY
	      scemi_rSceMi2MsgOut$D_IN;
	if (scemi_rcb_mask$EN)
	  scemi_rcb_mask <= `BSV_ASSIGNMENT_DELAY scemi_rcb_mask$D_IN;
	if (scemi_rvPrevMsgGrant$EN)
	  scemi_rvPrevMsgGrant <= `BSV_ASSIGNMENT_DELAY
	      scemi_rvPrevMsgGrant$D_IN;
	if (scemi_rvPrevPrevMsgGrant$EN)
	  scemi_rvPrevPrevMsgGrant <= `BSV_ASSIGNMENT_DELAY
	      scemi_rvPrevPrevMsgGrant$D_IN;
	if (scemi_shutdown_ctrl_in_in_reset_noc$EN)
	  scemi_shutdown_ctrl_in_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_in_in_reset_noc$D_IN;
	if (scemi_shutdown_ctrl_in_remaining$EN)
	  scemi_shutdown_ctrl_in_remaining <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_in_remaining$D_IN;
	if (scemi_shutdown_ctrl_in_scemiInportBeats$EN)
	  scemi_shutdown_ctrl_in_scemiInportBeats <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_in_scemiInportBeats$D_IN;
	if (scemi_shutdown_ctrl_out_count$EN)
	  scemi_shutdown_ctrl_out_count <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_out_count$D_IN;
	if (scemi_shutdown_ctrl_out_in_reset_noc$EN)
	  scemi_shutdown_ctrl_out_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_out_in_reset_noc$D_IN;
	if (scemi_start_inport_in_reset_noc$EN)
	  scemi_start_inport_in_reset_noc <= `BSV_ASSIGNMENT_DELAY
	      scemi_start_inport_in_reset_noc$D_IN;
	if (scemi_start_inport_remaining$EN)
	  scemi_start_inport_remaining <= `BSV_ASSIGNMENT_DELAY
	      scemi_start_inport_remaining$D_IN;
	if (scemi_start_inport_scemiInportBeats$EN)
	  scemi_start_inport_scemiInportBeats <= `BSV_ASSIGNMENT_DELAY
	      scemi_start_inport_scemiInportBeats$D_IN;
      end
    if (scemi_user_reset_half$OUT_RST == `BSV_RESET_VALUE)
      begin
        scemi_scemi_clkgen_rAddress <= `BSV_ASSIGNMENT_DELAY 7'd0;
	scemi_scemi_clkgen_rCount <= `BSV_ASSIGNMENT_DELAY 5'd0;
	scemi_scemi_clkgen_rMMCM_clk_div <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clk_fb_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clk_fb_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout0_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout0_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout2_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout2_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout3_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout3_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout4_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout4_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout5_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout5_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout6_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_clkout6_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_filter_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_filter_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_lock_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_lock_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_lock_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rMMCM_start <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_scemi_clkgen_rMMCM_start_d1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_scemi_clkgen_rMMCM_swrst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_scemi_clkgen_rReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_scemi_clkgen_rSel <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_scemi_clkgen_rState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	scemi_scemi_clkgen_rWrData <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_scemi_clkgen_rWrEn <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (scemi_scemi_clkgen_rAddress$EN)
	  scemi_scemi_clkgen_rAddress <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rAddress$D_IN;
	if (scemi_scemi_clkgen_rCount$EN)
	  scemi_scemi_clkgen_rCount <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rCount$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clk_div$EN)
	  scemi_scemi_clkgen_rMMCM_clk_div <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clk_div$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clk_fb_1$EN)
	  scemi_scemi_clkgen_rMMCM_clk_fb_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clk_fb_1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clk_fb_2$EN)
	  scemi_scemi_clkgen_rMMCM_clk_fb_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clk_fb_2$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout0_1$EN)
	  scemi_scemi_clkgen_rMMCM_clkout0_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout0_1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout0_2$EN)
	  scemi_scemi_clkgen_rMMCM_clkout0_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout0_2$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout1_1$EN)
	  scemi_scemi_clkgen_rMMCM_clkout1_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout1_1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout1_2$EN)
	  scemi_scemi_clkgen_rMMCM_clkout1_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout1_2$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout2_1$EN)
	  scemi_scemi_clkgen_rMMCM_clkout2_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout2_1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout2_2$EN)
	  scemi_scemi_clkgen_rMMCM_clkout2_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout2_2$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout3_1$EN)
	  scemi_scemi_clkgen_rMMCM_clkout3_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout3_1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout3_2$EN)
	  scemi_scemi_clkgen_rMMCM_clkout3_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout3_2$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout4_1$EN)
	  scemi_scemi_clkgen_rMMCM_clkout4_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout4_1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout4_2$EN)
	  scemi_scemi_clkgen_rMMCM_clkout4_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout4_2$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout5_1$EN)
	  scemi_scemi_clkgen_rMMCM_clkout5_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout5_1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout5_2$EN)
	  scemi_scemi_clkgen_rMMCM_clkout5_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout5_2$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout6_1$EN)
	  scemi_scemi_clkgen_rMMCM_clkout6_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout6_1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_clkout6_2$EN)
	  scemi_scemi_clkgen_rMMCM_clkout6_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_clkout6_2$D_IN;
	if (scemi_scemi_clkgen_rMMCM_filter_1$EN)
	  scemi_scemi_clkgen_rMMCM_filter_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_filter_1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_filter_2$EN)
	  scemi_scemi_clkgen_rMMCM_filter_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_filter_2$D_IN;
	if (scemi_scemi_clkgen_rMMCM_lock_1$EN)
	  scemi_scemi_clkgen_rMMCM_lock_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_lock_1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_lock_2$EN)
	  scemi_scemi_clkgen_rMMCM_lock_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_lock_2$D_IN;
	if (scemi_scemi_clkgen_rMMCM_lock_3$EN)
	  scemi_scemi_clkgen_rMMCM_lock_3 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_lock_3$D_IN;
	if (scemi_scemi_clkgen_rMMCM_start$EN)
	  scemi_scemi_clkgen_rMMCM_start <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_start$D_IN;
	if (scemi_scemi_clkgen_rMMCM_start_d1$EN)
	  scemi_scemi_clkgen_rMMCM_start_d1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_start_d1$D_IN;
	if (scemi_scemi_clkgen_rMMCM_swrst$EN)
	  scemi_scemi_clkgen_rMMCM_swrst <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rMMCM_swrst$D_IN;
	if (scemi_scemi_clkgen_rReset$EN)
	  scemi_scemi_clkgen_rReset <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rReset$D_IN;
	if (scemi_scemi_clkgen_rSel$EN)
	  scemi_scemi_clkgen_rSel <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rSel$D_IN;
	if (scemi_scemi_clkgen_rState$EN)
	  scemi_scemi_clkgen_rState <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rState$D_IN;
	if (scemi_scemi_clkgen_rWrData$EN)
	  scemi_scemi_clkgen_rWrData <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rWrData$D_IN;
	if (scemi_scemi_clkgen_rWrEn$EN)
	  scemi_scemi_clkgen_rWrEn <= `BSV_ASSIGNMENT_DELAY
	      scemi_scemi_clkgen_rWrEn$D_IN;
      end
    if (scemi_rS1BitsRem$EN)
      scemi_rS1BitsRem <= `BSV_ASSIGNMENT_DELAY scemi_rS1BitsRem$D_IN;
    if (scemi_rS1CycleStamp$EN)
      scemi_rS1CycleStamp <= `BSV_ASSIGNMENT_DELAY scemi_rS1CycleStamp$D_IN;
    if (scemi_rS1InPortNum$EN)
      scemi_rS1InPortNum <= `BSV_ASSIGNMENT_DELAY scemi_rS1InPortNum$D_IN;
    if (scemi_rS1OutMsgIsCont$EN)
      scemi_rS1OutMsgIsCont <= `BSV_ASSIGNMENT_DELAY
	  scemi_rS1OutMsgIsCont$D_IN;
    if (scemi_rS1OutMsgSize$EN)
      scemi_rS1OutMsgSize <= `BSV_ASSIGNMENT_DELAY scemi_rS1OutMsgSize$D_IN;
    if (scemi_rS1OutPort$EN)
      scemi_rS1OutPort <= `BSV_ASSIGNMENT_DELAY scemi_rS1OutPort$D_IN;
    if (scemi_rS2InPipeNum$EN)
      scemi_rS2InPipeNum <= `BSV_ASSIGNMENT_DELAY scemi_rS2InPipeNum$D_IN;
  end

  always@(posedge scemi_uclkgen$CLK_OUT)
  begin
    if (scemi_rstgen_final_reset$RST_OUT == `BSV_RESET_VALUE)
      begin
        scemi_count_outport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_count_outport_ok <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_count_outport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_data_req_inport_dataF_rv <= `BSV_ASSIGNMENT_DELAY 5'd10;
	scemi_data_req_inport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_data_req_inport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_data_req_inport_requestF_rv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_data_req_inport_status <= `BSV_ASSIGNMENT_DELAY 2'd0;
	scemi_data_resp_outport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_data_resp_outport_ok <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_data_resp_outport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_dut_dut_prb_control_control_in_dataF_rv <= `BSV_ASSIGNMENT_DELAY
	    18'd43690;
	scemi_dut_dut_prb_control_control_in_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	scemi_dut_dut_prb_control_control_in_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	scemi_dut_dut_prb_control_control_in_requestF_rv <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	scemi_dut_dut_prb_control_control_in_status <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	scemi_dut_dut_prb_control_count <= `BSV_ASSIGNMENT_DELAY 16'd0;
	scemi_dut_dut_prb_control_data_out_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	scemi_dut_dut_prb_control_data_out_ok <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_dut_dut_prb_control_data_out_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	scemi_dut_dut_prb_control_flag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_dut_dut_prb_control_nextSample <= `BSV_ASSIGNMENT_DELAY 64'd0;
	scemi_dut_dut_prb_control_pinged <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_dut_dut_prb_control_sampleIntervalV <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	scemi_dut_dut_prb_control_sampleIntervalV_1 <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	scemi_dut_dut_prb_control_sampleIntervalV_2 <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	scemi_dut_dut_prb_control_sampleIntervalV_3 <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	scemi_dut_softrst_req_inport_dataF_rv <= `BSV_ASSIGNMENT_DELAY 2'd0;
	scemi_dut_softrst_req_inport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	scemi_dut_softrst_req_inport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	scemi_dut_softrst_req_inport_requestF_rv <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	scemi_dut_softrst_req_inport_status <= `BSV_ASSIGNMENT_DELAY 2'd0;
	scemi_dut_softrst_resp_outport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	scemi_dut_softrst_resp_outport_ok <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_dut_softrst_resp_outport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	scemi_init_state_out_port <= `BSV_ASSIGNMENT_DELAY 10'd0;
	scemi_shutdown_ctrl_in_dataF_rv <= `BSV_ASSIGNMENT_DELAY 2'd0;
	scemi_shutdown_ctrl_in_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_shutdown_ctrl_in_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_shutdown_ctrl_in_requestF_rv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_shutdown_ctrl_in_status <= `BSV_ASSIGNMENT_DELAY 2'd0;
	scemi_shutdown_ctrl_out_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_shutdown_ctrl_out_ok <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_shutdown_ctrl_out_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_shutdown_shutdown_pending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_start_inport_dataF_rv <= `BSV_ASSIGNMENT_DELAY 2'd0;
	scemi_start_inport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_start_inport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY 1'd1;
	scemi_start_inport_requestF_rv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	scemi_start_inport_status <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (scemi_count_outport_in_reset_uclk$EN)
	  scemi_count_outport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_count_outport_in_reset_uclk$D_IN;
	if (scemi_count_outport_ok$EN)
	  scemi_count_outport_ok <= `BSV_ASSIGNMENT_DELAY
	      scemi_count_outport_ok$D_IN;
	if (scemi_count_outport_prev_reset_uclk$EN)
	  scemi_count_outport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_count_outport_prev_reset_uclk$D_IN;
	if (scemi_data_req_inport_dataF_rv$EN)
	  scemi_data_req_inport_dataF_rv <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_req_inport_dataF_rv$D_IN;
	if (scemi_data_req_inport_in_reset_uclk$EN)
	  scemi_data_req_inport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_req_inport_in_reset_uclk$D_IN;
	if (scemi_data_req_inport_prev_reset_uclk$EN)
	  scemi_data_req_inport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_req_inport_prev_reset_uclk$D_IN;
	if (scemi_data_req_inport_requestF_rv$EN)
	  scemi_data_req_inport_requestF_rv <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_req_inport_requestF_rv$D_IN;
	if (scemi_data_req_inport_status$EN)
	  scemi_data_req_inport_status <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_req_inport_status$D_IN;
	if (scemi_data_resp_outport_in_reset_uclk$EN)
	  scemi_data_resp_outport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_resp_outport_in_reset_uclk$D_IN;
	if (scemi_data_resp_outport_ok$EN)
	  scemi_data_resp_outport_ok <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_resp_outport_ok$D_IN;
	if (scemi_data_resp_outport_prev_reset_uclk$EN)
	  scemi_data_resp_outport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_data_resp_outport_prev_reset_uclk$D_IN;
	if (scemi_dut_dut_prb_control_control_in_dataF_rv$EN)
	  scemi_dut_dut_prb_control_control_in_dataF_rv <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_control_in_dataF_rv$D_IN;
	if (scemi_dut_dut_prb_control_control_in_in_reset_uclk$EN)
	  scemi_dut_dut_prb_control_control_in_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_control_in_in_reset_uclk$D_IN;
	if (scemi_dut_dut_prb_control_control_in_prev_reset_uclk$EN)
	  scemi_dut_dut_prb_control_control_in_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_control_in_prev_reset_uclk$D_IN;
	if (scemi_dut_dut_prb_control_control_in_requestF_rv$EN)
	  scemi_dut_dut_prb_control_control_in_requestF_rv <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_control_in_requestF_rv$D_IN;
	if (scemi_dut_dut_prb_control_control_in_status$EN)
	  scemi_dut_dut_prb_control_control_in_status <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_control_in_status$D_IN;
	if (scemi_dut_dut_prb_control_count$EN)
	  scemi_dut_dut_prb_control_count <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_count$D_IN;
	if (scemi_dut_dut_prb_control_data_out_in_reset_uclk$EN)
	  scemi_dut_dut_prb_control_data_out_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_data_out_in_reset_uclk$D_IN;
	if (scemi_dut_dut_prb_control_data_out_ok$EN)
	  scemi_dut_dut_prb_control_data_out_ok <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_data_out_ok$D_IN;
	if (scemi_dut_dut_prb_control_data_out_prev_reset_uclk$EN)
	  scemi_dut_dut_prb_control_data_out_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_data_out_prev_reset_uclk$D_IN;
	if (scemi_dut_dut_prb_control_flag$EN)
	  scemi_dut_dut_prb_control_flag <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_flag$D_IN;
	if (scemi_dut_dut_prb_control_nextSample$EN)
	  scemi_dut_dut_prb_control_nextSample <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_nextSample$D_IN;
	if (scemi_dut_dut_prb_control_pinged$EN)
	  scemi_dut_dut_prb_control_pinged <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_pinged$D_IN;
	if (scemi_dut_dut_prb_control_sampleIntervalV$EN)
	  scemi_dut_dut_prb_control_sampleIntervalV <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_sampleIntervalV$D_IN;
	if (scemi_dut_dut_prb_control_sampleIntervalV_1$EN)
	  scemi_dut_dut_prb_control_sampleIntervalV_1 <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_sampleIntervalV_1$D_IN;
	if (scemi_dut_dut_prb_control_sampleIntervalV_2$EN)
	  scemi_dut_dut_prb_control_sampleIntervalV_2 <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_sampleIntervalV_2$D_IN;
	if (scemi_dut_dut_prb_control_sampleIntervalV_3$EN)
	  scemi_dut_dut_prb_control_sampleIntervalV_3 <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_prb_control_sampleIntervalV_3$D_IN;
	if (scemi_dut_softrst_req_inport_dataF_rv$EN)
	  scemi_dut_softrst_req_inport_dataF_rv <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_req_inport_dataF_rv$D_IN;
	if (scemi_dut_softrst_req_inport_in_reset_uclk$EN)
	  scemi_dut_softrst_req_inport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_req_inport_in_reset_uclk$D_IN;
	if (scemi_dut_softrst_req_inport_prev_reset_uclk$EN)
	  scemi_dut_softrst_req_inport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_req_inport_prev_reset_uclk$D_IN;
	if (scemi_dut_softrst_req_inport_requestF_rv$EN)
	  scemi_dut_softrst_req_inport_requestF_rv <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_req_inport_requestF_rv$D_IN;
	if (scemi_dut_softrst_req_inport_status$EN)
	  scemi_dut_softrst_req_inport_status <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_req_inport_status$D_IN;
	if (scemi_dut_softrst_resp_outport_in_reset_uclk$EN)
	  scemi_dut_softrst_resp_outport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_resp_outport_in_reset_uclk$D_IN;
	if (scemi_dut_softrst_resp_outport_ok$EN)
	  scemi_dut_softrst_resp_outport_ok <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_resp_outport_ok$D_IN;
	if (scemi_dut_softrst_resp_outport_prev_reset_uclk$EN)
	  scemi_dut_softrst_resp_outport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_softrst_resp_outport_prev_reset_uclk$D_IN;
	if (scemi_init_state_out_port$EN)
	  scemi_init_state_out_port <= `BSV_ASSIGNMENT_DELAY
	      scemi_init_state_out_port$D_IN;
	if (scemi_shutdown_ctrl_in_dataF_rv$EN)
	  scemi_shutdown_ctrl_in_dataF_rv <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_in_dataF_rv$D_IN;
	if (scemi_shutdown_ctrl_in_in_reset_uclk$EN)
	  scemi_shutdown_ctrl_in_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_in_in_reset_uclk$D_IN;
	if (scemi_shutdown_ctrl_in_prev_reset_uclk$EN)
	  scemi_shutdown_ctrl_in_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_in_prev_reset_uclk$D_IN;
	if (scemi_shutdown_ctrl_in_requestF_rv$EN)
	  scemi_shutdown_ctrl_in_requestF_rv <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_in_requestF_rv$D_IN;
	if (scemi_shutdown_ctrl_in_status$EN)
	  scemi_shutdown_ctrl_in_status <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_in_status$D_IN;
	if (scemi_shutdown_ctrl_out_in_reset_uclk$EN)
	  scemi_shutdown_ctrl_out_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_out_in_reset_uclk$D_IN;
	if (scemi_shutdown_ctrl_out_ok$EN)
	  scemi_shutdown_ctrl_out_ok <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_out_ok$D_IN;
	if (scemi_shutdown_ctrl_out_prev_reset_uclk$EN)
	  scemi_shutdown_ctrl_out_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_ctrl_out_prev_reset_uclk$D_IN;
	if (scemi_shutdown_shutdown_pending$EN)
	  scemi_shutdown_shutdown_pending <= `BSV_ASSIGNMENT_DELAY
	      scemi_shutdown_shutdown_pending$D_IN;
	if (scemi_start_inport_dataF_rv$EN)
	  scemi_start_inport_dataF_rv <= `BSV_ASSIGNMENT_DELAY
	      scemi_start_inport_dataF_rv$D_IN;
	if (scemi_start_inport_in_reset_uclk$EN)
	  scemi_start_inport_in_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_start_inport_in_reset_uclk$D_IN;
	if (scemi_start_inport_prev_reset_uclk$EN)
	  scemi_start_inport_prev_reset_uclk <= `BSV_ASSIGNMENT_DELAY
	      scemi_start_inport_prev_reset_uclk$D_IN;
	if (scemi_start_inport_requestF_rv$EN)
	  scemi_start_inport_requestF_rv <= `BSV_ASSIGNMENT_DELAY
	      scemi_start_inport_requestF_rv$D_IN;
	if (scemi_start_inport_status$EN)
	  scemi_start_inport_status <= `BSV_ASSIGNMENT_DELAY
	      scemi_start_inport_status$D_IN;
      end
    if (scemi_count_outport_beats$EN)
      scemi_count_outport_beats <= `BSV_ASSIGNMENT_DELAY
	  scemi_count_outport_beats$D_IN;
    if (scemi_count_outport_beats_1$EN)
      scemi_count_outport_beats_1 <= `BSV_ASSIGNMENT_DELAY
	  scemi_count_outport_beats_1$D_IN;
    if (scemi_data_resp_outport_beats$EN)
      scemi_data_resp_outport_beats <= `BSV_ASSIGNMENT_DELAY
	  scemi_data_resp_outport_beats$D_IN;
    if (scemi_dut_dut_prb_control_data_out_beats$EN)
      scemi_dut_dut_prb_control_data_out_beats <= `BSV_ASSIGNMENT_DELAY
	  scemi_dut_dut_prb_control_data_out_beats$D_IN;
    if (scemi_dut_softrst_resp_outport_beats$EN)
      scemi_dut_softrst_resp_outport_beats <= `BSV_ASSIGNMENT_DELAY
	  scemi_dut_softrst_resp_outport_beats$D_IN;
    if (scemi_shutdown_ctrl_out_beats$EN)
      scemi_shutdown_ctrl_out_beats <= `BSV_ASSIGNMENT_DELAY
	  scemi_shutdown_ctrl_out_beats$D_IN;
  end

  always@(posedge scemi_clk_port_clkgen$CLK_OUT)
  begin
    if (scemi_clk_port_cReset$O == `BSV_RESET_VALUE)
      begin
        scemi_dut_dut_dutIfc_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (scemi_dut_dut_dutIfc_resetting$EN)
	  scemi_dut_dut_dutIfc_resetting <= `BSV_ASSIGNMENT_DELAY
	      scemi_dut_dut_dutIfc_resetting$D_IN;
      end
  end

  always@(posedge scemi_pcie_ep$user_clk_out or
	  `BSV_RESET_EDGE scemi_1_fifoTxData_dCombinedReset$RST_OUT)
  if (scemi_1_fifoTxData_dCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      scemi_1_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (scemi_1_fifoTxData_dInReset_pre_isInReset$EN)
	scemi_1_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    scemi_1_fifoTxData_dInReset_pre_isInReset$D_IN;
    end

  always@(posedge scemi_pcie_ep$user_clk_out or
	  `BSV_RESET_EDGE scemi_fifoRxData_sCombinedReset$RST_OUT)
  if (scemi_fifoRxData_sCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      scemi_fifoRxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (scemi_fifoRxData_sInReset_pre_isInReset$EN)
	scemi_fifoRxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    scemi_fifoRxData_sInReset_pre_isInReset$D_IN;
    end

  always@(posedge scemi_pcie_ep$user_clk_out or
	  `BSV_RESET_EDGE scemi_epReset250$OUT_RST)
  if (scemi_epReset250$OUT_RST == `BSV_RESET_VALUE)
    begin
      scemi_rOddBeat <= `BSV_ASSIGNMENT_DELAY 1'd0;
      scemi_rSendInvalid <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (scemi_rOddBeat$EN)
	scemi_rOddBeat <= `BSV_ASSIGNMENT_DELAY scemi_rOddBeat$D_IN;
      if (scemi_rSendInvalid$EN)
	scemi_rSendInvalid <= `BSV_ASSIGNMENT_DELAY scemi_rSendInvalid$D_IN;
    end

  always@(posedge scemi_clkgen_clkout0buffer$O or
	  `BSV_RESET_EDGE scemi_1_fifoTxData_sCombinedReset$RST_OUT)
  if (scemi_1_fifoTxData_sCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      scemi_1_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (scemi_1_fifoTxData_sInReset_pre_isInReset$EN)
	scemi_1_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    scemi_1_fifoTxData_sInReset_pre_isInReset$D_IN;
    end

  always@(posedge scemi_clkgen_clkout0buffer$O or
	  `BSV_RESET_EDGE scemi_fifoRxData_dCombinedReset$RST_OUT)
  if (scemi_fifoRxData_dCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      scemi_fifoRxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (scemi_fifoRxData_dInReset_pre_isInReset$EN)
	scemi_fifoRxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    scemi_fifoRxData_dInReset_pre_isInReset$D_IN;
    end

  always@(posedge scemi_rstgen_inv_clk$CLK_OUT or
	  `BSV_RESET_EDGE scemi_rstgen_inv_rstn$OUT_RST)
  if (scemi_rstgen_inv_rstn$OUT_RST == `BSV_RESET_VALUE)
    begin
      scemi_rstgen_init <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (scemi_rstgen_init$EN)
	scemi_rstgen_init <= `BSV_ASSIGNMENT_DELAY scemi_rstgen_init$D_IN;
    end

  always@(posedge scemi_clk_port_rstgen_inv_clk$CLK_OUT or
	  `BSV_RESET_EDGE scemi_clk_port_rstgen_inv_rstn$OUT_RST)
  if (scemi_clk_port_rstgen_inv_rstn$OUT_RST == `BSV_RESET_VALUE)
    begin
      scemi_clk_port_rstgen_init <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (scemi_clk_port_rstgen_init$EN)
	scemi_clk_port_rstgen_init <= `BSV_ASSIGNMENT_DELAY
	    scemi_clk_port_rstgen_init$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ddr3_ctrl_dly_reset_n_count = 32'hAAAAAAAA;
    ddr3_ctrl_rDeqWriteReq = 1'h0;
    ddr3_ctrl_rEnqReadResp = 1'h0;
    ddr3_ctrl_rFirstResponse =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_1_fifoTxData_block0 =
	162'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_1_fifoTxData_block0_status = 1'h0;
    scemi_1_fifoTxData_block1 =
	162'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_1_fifoTxData_block1_status = 1'h0;
    scemi_1_fifoTxData_dInReset_pre_isInReset = 1'h0;
    scemi_1_fifoTxData_elem0_status_0 = 1'h0;
    scemi_1_fifoTxData_elem0_status_1 = 1'h0;
    scemi_1_fifoTxData_elem1_status_0 = 1'h0;
    scemi_1_fifoTxData_elem1_status_1 = 1'h0;
    scemi_1_fifoTxData_read_block = 1'h0;
    scemi_1_fifoTxData_sInReset_pre_isInReset = 1'h0;
    scemi_1_fifoTxData_write_block = 1'h0;
    scemi_clk_port_rstgen_init = 1'h0;
    scemi_clockGenerators_clock_gens_counters_count = 32'hAAAAAAAA;
    scemi_clockGenerators_clock_gens_out_of_reset_reg = 1'h0;
    scemi_clockGenerators_clock_gens_reset_counter = 32'hAAAAAAAA;
    scemi_clockGenerators_clock_gens_stalled = 1'h0;
    scemi_clockGenerators_free_stamp = 1'h0;
    scemi_clockGenerators_one_to_one_cclock_count = 32'hAAAAAAAA;
    scemi_count_outport_beats = 32'hAAAAAAAA;
    scemi_count_outport_beats_1 = 32'hAAAAAAAA;
    scemi_count_outport_count = 2'h2;
    scemi_count_outport_in_reset_noc = 1'h0;
    scemi_count_outport_in_reset_uclk = 1'h0;
    scemi_count_outport_ok = 1'h0;
    scemi_count_outport_prev_reset_uclk = 1'h0;
    scemi_data_req_inport_dataF_rv = 5'h0A;
    scemi_data_req_inport_in_reset_noc = 1'h0;
    scemi_data_req_inport_in_reset_uclk = 1'h0;
    scemi_data_req_inport_prev_reset_uclk = 1'h0;
    scemi_data_req_inport_remaining = 1'h0;
    scemi_data_req_inport_requestF_rv = 1'h0;
    scemi_data_req_inport_scemiInportBeats = 32'hAAAAAAAA;
    scemi_data_req_inport_status = 2'h2;
    scemi_data_resp_outport_beats = 32'hAAAAAAAA;
    scemi_data_resp_outport_count = 1'h0;
    scemi_data_resp_outport_in_reset_noc = 1'h0;
    scemi_data_resp_outport_in_reset_uclk = 1'h0;
    scemi_data_resp_outport_ok = 1'h0;
    scemi_data_resp_outport_prev_reset_uclk = 1'h0;
    scemi_dut_dut_dutIfc_resetting = 1'h0;
    scemi_dut_dut_prb_control_control_in_dataF_rv = 18'h2AAAA;
    scemi_dut_dut_prb_control_control_in_in_reset_noc = 1'h0;
    scemi_dut_dut_prb_control_control_in_in_reset_uclk = 1'h0;
    scemi_dut_dut_prb_control_control_in_prev_reset_uclk = 1'h0;
    scemi_dut_dut_prb_control_control_in_remaining = 1'h0;
    scemi_dut_dut_prb_control_control_in_requestF_rv = 1'h0;
    scemi_dut_dut_prb_control_control_in_scemiInportBeats = 32'hAAAAAAAA;
    scemi_dut_dut_prb_control_control_in_status = 2'h2;
    scemi_dut_dut_prb_control_count = 16'hAAAA;
    scemi_dut_dut_prb_control_data_out_beats = 32'hAAAAAAAA;
    scemi_dut_dut_prb_control_data_out_count = 1'h0;
    scemi_dut_dut_prb_control_data_out_in_reset_noc = 1'h0;
    scemi_dut_dut_prb_control_data_out_in_reset_uclk = 1'h0;
    scemi_dut_dut_prb_control_data_out_ok = 1'h0;
    scemi_dut_dut_prb_control_data_out_prev_reset_uclk = 1'h0;
    scemi_dut_dut_prb_control_flag = 1'h0;
    scemi_dut_dut_prb_control_nextSample = 64'hAAAAAAAAAAAAAAAA;
    scemi_dut_dut_prb_control_pinged = 1'h0;
    scemi_dut_dut_prb_control_sampleIntervalV = 8'hAA;
    scemi_dut_dut_prb_control_sampleIntervalV_1 = 8'hAA;
    scemi_dut_dut_prb_control_sampleIntervalV_2 = 8'hAA;
    scemi_dut_dut_prb_control_sampleIntervalV_3 = 8'hAA;
    scemi_dut_softrst_req_inport_dataF_rv = 2'h2;
    scemi_dut_softrst_req_inport_in_reset_noc = 1'h0;
    scemi_dut_softrst_req_inport_in_reset_uclk = 1'h0;
    scemi_dut_softrst_req_inport_prev_reset_uclk = 1'h0;
    scemi_dut_softrst_req_inport_remaining = 1'h0;
    scemi_dut_softrst_req_inport_requestF_rv = 1'h0;
    scemi_dut_softrst_req_inport_scemiInportBeats = 32'hAAAAAAAA;
    scemi_dut_softrst_req_inport_status = 2'h2;
    scemi_dut_softrst_resp_outport_beats = 32'hAAAAAAAA;
    scemi_dut_softrst_resp_outport_count = 1'h0;
    scemi_dut_softrst_resp_outport_in_reset_noc = 1'h0;
    scemi_dut_softrst_resp_outport_in_reset_uclk = 1'h0;
    scemi_dut_softrst_resp_outport_ok = 1'h0;
    scemi_dut_softrst_resp_outport_prev_reset_uclk = 1'h0;
    scemi_fAxiRx_rv = 96'hAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fAxiTx_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    scemi_fFromBridgeBeat_ifc_rDataAvail = 6'h2A;
    scemi_fFromBridgeBeat_ifc_rDataCount = 6'h2A;
    scemi_fFromBridgeBeat_ifc_rStorage =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fFromBridgeBeat_ifc_rStorageMask =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fFromContinueBeat_ifc_rDataAvail = 6'h2A;
    scemi_fFromContinueBeat_ifc_rDataCount = 6'h2A;
    scemi_fFromContinueBeat_ifc_rStorage =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fFromContinueBeat_ifc_rStorageMask =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fS1MsgOut_ifc_rDataAvail = 6'h2A;
    scemi_fS1MsgOut_ifc_rDataCount = 6'h2A;
    scemi_fS1MsgOut_ifc_rStorage =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fS1MsgOut_ifc_rStorageMask =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fS1OutPortAcks_ifc_rDataAvail = 5'h0A;
    scemi_fS1OutPortAcks_ifc_rDataCount = 5'h0A;
    scemi_fS1OutPortAcks_ifc_rStorage =
	160'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fS1OutPortAcks_ifc_rStorageMask =
	160'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fS2MsgOut_ifc_rDataAvail = 6'h2A;
    scemi_fS2MsgOut_ifc_rDataCount = 6'h2A;
    scemi_fS2MsgOut_ifc_rStorage =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fS2MsgOut_ifc_rStorageMask =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fToContinueBeat_ifc_rDataAvail = 6'h2A;
    scemi_fToContinueBeat_ifc_rDataCount = 6'h2A;
    scemi_fToContinueBeat_ifc_rStorage =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fToContinueBeat_ifc_rStorageMask =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    scemi_fifoRxData_block0_status = 1'h0;
    scemi_fifoRxData_block1_status = 1'h0;
    scemi_fifoRxData_dInReset_pre_isInReset = 1'h0;
    scemi_fifoRxData_elem0_status_0 = 1'h0;
    scemi_fifoRxData_elem0_status_1 = 1'h0;
    scemi_fifoRxData_elem1_status_0 = 1'h0;
    scemi_fifoRxData_elem1_status_1 = 1'h0;
    scemi_fifoRxData_elem_0 = 81'h0AAAAAAAAAAAAAAAAAAAA;
    scemi_fifoRxData_elem_1 = 81'h0AAAAAAAAAAAAAAAAAAAA;
    scemi_fifoRxData_elem_2 = 81'h0AAAAAAAAAAAAAAAAAAAA;
    scemi_fifoRxData_elem_3 = 81'h0AAAAAAAAAAAAAAAAAAAA;
    scemi_fifoRxData_read_block = 1'h0;
    scemi_fifoRxData_sInReset_pre_isInReset = 1'h0;
    scemi_fifoRxData_write_block = 1'h0;
    scemi_init_state_any_in_reset_uclk = 1'h0;
    scemi_init_state_cycle_stamp = 64'hAAAAAAAAAAAAAAAA;
    scemi_init_state_out_port = 10'h2AA;
    scemi_intr_on = 1'h0;
    scemi_lrS1ActiveRequests = 1'h0;
    scemi_lrS1ActiveRequests_1 = 1'h0;
    scemi_lrS1ActiveRequests_2 = 1'h0;
    scemi_lrS1ActiveRequests_3 = 1'h0;
    scemi_lrS1ActiveRequests_4 = 1'h0;
    scemi_lrS1PendingRequests = 1'h0;
    scemi_lrS1PendingRequests_1 = 1'h0;
    scemi_lrS1PendingRequests_2 = 1'h0;
    scemi_lrS1PendingRequests_3 = 1'h0;
    scemi_lrS1PendingRequests_4 = 1'h0;
    scemi_max_payload_bytes = 13'h0AAA;
    scemi_max_payload_cr = 13'h0AAA;
    scemi_max_rd_req_cr = 13'h0AAA;
    scemi_max_read_req_bytes = 13'h0AAA;
    scemi_msix_enable = 1'h0;
    scemi_msix_enable_cr = 1'h0;
    scemi_msix_masked = 1'h0;
    scemi_msix_masked_cr = 1'h0;
    scemi_rDecodeSceMi = 1'h0;
    scemi_rInMsgBytes = 8'hAA;
    scemi_rOddBeat = 1'h0;
    scemi_rOtherMsgIn = 1'h0;
    scemi_rOtherMsgOut = 1'h0;
    scemi_rOutMsgBytes = 8'hAA;
    scemi_rS1BitsRem = 19'h2AAAA;
    scemi_rS1CycleStamp = 64'hAAAAAAAAAAAAAAAA;
    scemi_rS1InPortNum = 10'h2AA;
    scemi_rS1MsgInIsAck = 1'h0;
    scemi_rS1MsgInIsData = 1'h0;
    scemi_rS1MsgOutDataReq = 1'h0;
    scemi_rS1MsgOutReqGrant = 1'h0;
    scemi_rS1MsgOutReqReq = 1'h0;
    scemi_rS1OutDataHeader = 1'h0;
    scemi_rS1OutMsgIsCont = 1'h0;
    scemi_rS1OutMsgSize = 8'hAA;
    scemi_rS1OutPort = 10'h2AA;
    scemi_rS1RequestedPort = 10'h2AA;
    scemi_rS2InPipeNum = 12'hAAA;
    scemi_rS2MsgInIsCred = 1'h0;
    scemi_rS2MsgInIsData = 1'h0;
    scemi_rS2MsgOutCredGrant = 1'h0;
    scemi_rS2MsgOutDataReq = 1'h0;
    scemi_rSceMi1MsgIn = 1'h0;
    scemi_rSceMi1MsgOut = 1'h0;
    scemi_rSceMi2MsgIn = 1'h0;
    scemi_rSceMi2MsgOut = 1'h0;
    scemi_rSendInvalid = 1'h0;
    scemi_rcb_cr = 8'hAA;
    scemi_rcb_mask = 7'h2A;
    scemi_rstgen_init = 1'h0;
    scemi_rvPrevMsgGrant = 3'h2;
    scemi_rvPrevPrevMsgGrant = 3'h2;
    scemi_scemi_clkgen_rAddress = 7'h2A;
    scemi_scemi_clkgen_rCount = 5'h0A;
    scemi_scemi_clkgen_rMMCM_clk_div = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clk_fb_1 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clk_fb_2 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout0_1 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout0_2 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout1_1 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout1_2 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout2_1 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout2_2 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout3_1 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout3_2 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout4_1 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout4_2 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout5_1 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout5_2 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout6_1 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_clkout6_2 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_filter_1 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_filter_2 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_lock_1 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_lock_2 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_lock_3 = 16'hAAAA;
    scemi_scemi_clkgen_rMMCM_start = 1'h0;
    scemi_scemi_clkgen_rMMCM_start_d1 = 1'h0;
    scemi_scemi_clkgen_rMMCM_swrst = 1'h0;
    scemi_scemi_clkgen_rReset = 1'h0;
    scemi_scemi_clkgen_rSel = 1'h0;
    scemi_scemi_clkgen_rState = 3'h2;
    scemi_scemi_clkgen_rWrData = 16'hAAAA;
    scemi_scemi_clkgen_rWrEn = 1'h0;
    scemi_shutdown_ctrl_in_dataF_rv = 2'h2;
    scemi_shutdown_ctrl_in_in_reset_noc = 1'h0;
    scemi_shutdown_ctrl_in_in_reset_uclk = 1'h0;
    scemi_shutdown_ctrl_in_prev_reset_uclk = 1'h0;
    scemi_shutdown_ctrl_in_remaining = 1'h0;
    scemi_shutdown_ctrl_in_requestF_rv = 1'h0;
    scemi_shutdown_ctrl_in_scemiInportBeats = 32'hAAAAAAAA;
    scemi_shutdown_ctrl_in_status = 2'h2;
    scemi_shutdown_ctrl_out_beats = 32'hAAAAAAAA;
    scemi_shutdown_ctrl_out_count = 1'h0;
    scemi_shutdown_ctrl_out_in_reset_noc = 1'h0;
    scemi_shutdown_ctrl_out_in_reset_uclk = 1'h0;
    scemi_shutdown_ctrl_out_ok = 1'h0;
    scemi_shutdown_ctrl_out_prev_reset_uclk = 1'h0;
    scemi_shutdown_shutdown_pending = 1'h0;
    scemi_start_inport_dataF_rv = 2'h2;
    scemi_start_inport_in_reset_noc = 1'h0;
    scemi_start_inport_in_reset_uclk = 1'h0;
    scemi_start_inport_prev_reset_uclk = 1'h0;
    scemi_start_inport_remaining = 1'h0;
    scemi_start_inport_requestF_rv = 1'h0;
    scemi_start_inport_scemiInportBeats = 32'hAAAAAAAA;
    scemi_start_inport_status = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge scemi_uclkgen$CLK_OUT)
  begin
    #0;
    if (scemi_rstgen_final_reset$RST_OUT != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_scemi_shutdown_shutdown) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkBridge

