//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Wed May  4 01:42:04 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_data_request_put           O     1
// data_response_get              O     4
// RDY_data_response_get          O     1
// RDY_start_put                  O     1 const
// count_get                      O    64 reg
// RDY_count_get                  O     1 reg
// ddr3client_request_get         O   601 reg
// RDY_ddr3client_request_get     O     1 reg
// RDY_ddr3client_response_put    O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// data_request_put               I     4
// start_put                      I     1 unused
// ddr3client_response_put        I   512 reg
// EN_data_request_put            I     1
// EN_start_put                   I     1
// EN_ddr3client_response_put     I     1
// EN_data_response_get           I     1
// EN_count_get                   I     1
// EN_ddr3client_request_get      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDutWrapper(CLK,
		    RST_N,

		    data_request_put,
		    EN_data_request_put,
		    RDY_data_request_put,

		    EN_data_response_get,
		    data_response_get,
		    RDY_data_response_get,

		    start_put,
		    EN_start_put,
		    RDY_start_put,

		    EN_count_get,
		    count_get,
		    RDY_count_get,

		    EN_ddr3client_request_get,
		    ddr3client_request_get,
		    RDY_ddr3client_request_get,

		    ddr3client_response_put,
		    EN_ddr3client_response_put,
		    RDY_ddr3client_response_put);
  input  CLK;
  input  RST_N;

  // action method data_request_put
  input  [3 : 0] data_request_put;
  input  EN_data_request_put;
  output RDY_data_request_put;

  // actionvalue method data_response_get
  input  EN_data_response_get;
  output [3 : 0] data_response_get;
  output RDY_data_response_get;

  // action method start_put
  input  start_put;
  input  EN_start_put;
  output RDY_start_put;

  // actionvalue method count_get
  input  EN_count_get;
  output [63 : 0] count_get;
  output RDY_count_get;

  // actionvalue method ddr3client_request_get
  input  EN_ddr3client_request_get;
  output [600 : 0] ddr3client_request_get;
  output RDY_ddr3client_request_get;

  // action method ddr3client_response_put
  input  [511 : 0] ddr3client_response_put;
  input  EN_ddr3client_response_put;
  output RDY_ddr3client_response_put;

  // signals for module outputs
  wire [600 : 0] ddr3client_request_get;
  wire [63 : 0] count_get;
  wire [3 : 0] data_response_get;
  wire RDY_count_get,
       RDY_data_request_put,
       RDY_data_response_get,
       RDY_ddr3client_request_get,
       RDY_ddr3client_response_put,
       RDY_start_put;

  // inlined wires
  wire [3 : 0] ififo_wDataOut$wget;

  // register ififo_rCache
  reg [26 : 0] ififo_rCache;
  wire [26 : 0] ififo_rCache$D_IN;
  wire ififo_rCache$EN;

  // register ififo_rRdPtr
  reg [21 : 0] ififo_rRdPtr;
  wire [21 : 0] ififo_rRdPtr$D_IN;
  wire ififo_rRdPtr$EN;

  // register ififo_rWrPtr
  reg [21 : 0] ififo_rWrPtr;
  wire [21 : 0] ififo_rWrPtr$D_IN;
  wire ififo_rWrPtr$EN;

  // register ofifo_rCache
  reg [26 : 0] ofifo_rCache;
  wire [26 : 0] ofifo_rCache$D_IN;
  wire ofifo_rCache$EN;

  // register ofifo_rRdPtr
  reg [21 : 0] ofifo_rRdPtr;
  wire [21 : 0] ofifo_rRdPtr$D_IN;
  wire ofifo_rRdPtr$EN;

  // register ofifo_rWrPtr
  reg [21 : 0] ofifo_rWrPtr;
  wire [21 : 0] ofifo_rWrPtr$D_IN;
  wire ofifo_rWrPtr$EN;

  // ports of submodule ififo_memory
  wire [20 : 0] ififo_memory$ADDRA, ififo_memory$ADDRB;
  wire [3 : 0] ififo_memory$DIA, ififo_memory$DIB, ififo_memory$DOB;
  wire ififo_memory$ENA, ififo_memory$ENB, ififo_memory$WEA, ififo_memory$WEB;

  // ports of submodule m
  wire [600 : 0] m$ddr3client_request_get;
  wire [511 : 0] m$ddr3client_response_put;
  wire [63 : 0] m$count_get;
  wire [3 : 0] m$data_request_put, m$data_response_get;
  wire m$EN_count_get,
       m$EN_data_request_put,
       m$EN_data_response_get,
       m$EN_ddr3client_request_get,
       m$EN_ddr3client_response_put,
       m$EN_start_put,
       m$RDY_count_get,
       m$RDY_data_request_put,
       m$RDY_data_response_get,
       m$RDY_ddr3client_request_get,
       m$RDY_ddr3client_response_put,
       m$start_put;

  // ports of submodule ofifo_memory
  wire [20 : 0] ofifo_memory$ADDRA, ofifo_memory$ADDRB;
  wire [3 : 0] ofifo_memory$DIA, ofifo_memory$DIB, ofifo_memory$DOB;
  wire ofifo_memory$ENA, ofifo_memory$ENB, ofifo_memory$WEA, ofifo_memory$WEB;

  // rule scheduling signals
  wire CAN_FIRE_RL_feed,
       CAN_FIRE_RL_fetch,
       CAN_FIRE_RL_ififo_portA,
       CAN_FIRE_RL_ififo_portB,
       CAN_FIRE_RL_ififo_portB_read_data,
       CAN_FIRE_RL_ofifo_portA,
       CAN_FIRE_RL_ofifo_portB,
       CAN_FIRE_RL_ofifo_portB_read_data,
       CAN_FIRE_count_get,
       CAN_FIRE_data_request_put,
       CAN_FIRE_data_response_get,
       CAN_FIRE_ddr3client_request_get,
       CAN_FIRE_ddr3client_response_put,
       CAN_FIRE_start_put,
       WILL_FIRE_RL_feed,
       WILL_FIRE_RL_fetch,
       WILL_FIRE_RL_ififo_portA,
       WILL_FIRE_RL_ififo_portB,
       WILL_FIRE_RL_ififo_portB_read_data,
       WILL_FIRE_RL_ofifo_portA,
       WILL_FIRE_RL_ofifo_portB,
       WILL_FIRE_RL_ofifo_portB_read_data,
       WILL_FIRE_count_get,
       WILL_FIRE_data_request_put,
       WILL_FIRE_data_response_get,
       WILL_FIRE_ddr3client_request_get,
       WILL_FIRE_ddr3client_response_put,
       WILL_FIRE_start_put;

  // remaining internal signals
  wire [21 : 0] x__h1912, x__h2014, x__h894, x__h996;
  wire [3 : 0] x3__h1831, x3__h811;

  // action method data_request_put
  assign RDY_data_request_put = ififo_rRdPtr + 22'd1048576 != ififo_rWrPtr ;
  assign CAN_FIRE_data_request_put =
	     ififo_rRdPtr + 22'd1048576 != ififo_rWrPtr ;
  assign WILL_FIRE_data_request_put = EN_data_request_put ;

  // actionvalue method data_response_get
  assign data_response_get =
	     (ofifo_rCache[26] && ofifo_rCache[25:4] == ofifo_rRdPtr) ?
	       ofifo_rCache[3:0] :
	       ofifo_memory$DOB ;
  assign RDY_data_response_get = ofifo_rRdPtr != ofifo_rWrPtr ;
  assign CAN_FIRE_data_response_get = ofifo_rRdPtr != ofifo_rWrPtr ;
  assign WILL_FIRE_data_response_get = EN_data_response_get ;

  // action method start_put
  assign RDY_start_put = 1'd1 ;
  assign CAN_FIRE_start_put = 1'd1 ;
  assign WILL_FIRE_start_put = EN_start_put ;

  // actionvalue method count_get
  assign count_get = m$count_get ;
  assign RDY_count_get = m$RDY_count_get ;
  assign CAN_FIRE_count_get = m$RDY_count_get ;
  assign WILL_FIRE_count_get = EN_count_get ;

  // actionvalue method ddr3client_request_get
  assign ddr3client_request_get = m$ddr3client_request_get ;
  assign RDY_ddr3client_request_get = m$RDY_ddr3client_request_get ;
  assign CAN_FIRE_ddr3client_request_get = m$RDY_ddr3client_request_get ;
  assign WILL_FIRE_ddr3client_request_get = EN_ddr3client_request_get ;

  // action method ddr3client_response_put
  assign RDY_ddr3client_response_put = m$RDY_ddr3client_response_put ;
  assign CAN_FIRE_ddr3client_response_put = m$RDY_ddr3client_response_put ;
  assign WILL_FIRE_ddr3client_response_put = EN_ddr3client_response_put ;

  // submodule ififo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd21),
	  .DATA_WIDTH(32'd4),
	  .MEMSIZE(22'd2097152)) ififo_memory(.CLKA(CLK),
					      .CLKB(CLK),
					      .ADDRA(ififo_memory$ADDRA),
					      .ADDRB(ififo_memory$ADDRB),
					      .DIA(ififo_memory$DIA),
					      .DIB(ififo_memory$DIB),
					      .WEA(ififo_memory$WEA),
					      .WEB(ififo_memory$WEB),
					      .ENA(ififo_memory$ENA),
					      .ENB(ififo_memory$ENB),
					      .DOA(),
					      .DOB(ififo_memory$DOB));

  // submodule m
  mkFullPipeline m(.CLK(CLK),
		   .RST_N(RST_N),
		   .data_request_put(m$data_request_put),
		   .ddr3client_response_put(m$ddr3client_response_put),
		   .start_put(m$start_put),
		   .EN_data_request_put(m$EN_data_request_put),
		   .EN_data_response_get(m$EN_data_response_get),
		   .EN_start_put(m$EN_start_put),
		   .EN_count_get(m$EN_count_get),
		   .EN_ddr3client_request_get(m$EN_ddr3client_request_get),
		   .EN_ddr3client_response_put(m$EN_ddr3client_response_put),
		   .RDY_data_request_put(m$RDY_data_request_put),
		   .data_response_get(m$data_response_get),
		   .RDY_data_response_get(m$RDY_data_response_get),
		   .RDY_start_put(),
		   .count_get(m$count_get),
		   .RDY_count_get(m$RDY_count_get),
		   .ddr3client_request_get(m$ddr3client_request_get),
		   .RDY_ddr3client_request_get(m$RDY_ddr3client_request_get),
		   .RDY_ddr3client_response_put(m$RDY_ddr3client_response_put));

  // submodule ofifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd21),
	  .DATA_WIDTH(32'd4),
	  .MEMSIZE(22'd2097152)) ofifo_memory(.CLKA(CLK),
					      .CLKB(CLK),
					      .ADDRA(ofifo_memory$ADDRA),
					      .ADDRB(ofifo_memory$ADDRB),
					      .DIA(ofifo_memory$DIA),
					      .DIB(ofifo_memory$DIB),
					      .WEA(ofifo_memory$WEA),
					      .WEB(ofifo_memory$WEB),
					      .ENA(ofifo_memory$ENA),
					      .ENB(ofifo_memory$ENB),
					      .DOA(),
					      .DOB(ofifo_memory$DOB));

  // rule RL_fetch
  assign CAN_FIRE_RL_fetch =
	     ofifo_rRdPtr + 22'd1048576 != ofifo_rWrPtr &&
	     m$RDY_data_response_get ;
  assign WILL_FIRE_RL_fetch = CAN_FIRE_RL_fetch ;

  // rule RL_ififo_portB_read_data
  assign CAN_FIRE_RL_ififo_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_ififo_portB_read_data = 1'd1 ;

  // rule RL_feed
  assign CAN_FIRE_RL_feed =
	     ififo_rRdPtr != ififo_rWrPtr && m$RDY_data_request_put ;
  assign WILL_FIRE_RL_feed = CAN_FIRE_RL_feed ;

  // rule RL_ififo_portA
  assign CAN_FIRE_RL_ififo_portA = 1'd1 ;
  assign WILL_FIRE_RL_ififo_portA = 1'd1 ;

  // rule RL_ififo_portB
  assign CAN_FIRE_RL_ififo_portB = 1'd1 ;
  assign WILL_FIRE_RL_ififo_portB = 1'd1 ;

  // rule RL_ofifo_portB_read_data
  assign CAN_FIRE_RL_ofifo_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_ofifo_portB_read_data = 1'd1 ;

  // rule RL_ofifo_portA
  assign CAN_FIRE_RL_ofifo_portA = 1'd1 ;
  assign WILL_FIRE_RL_ofifo_portA = 1'd1 ;

  // rule RL_ofifo_portB
  assign CAN_FIRE_RL_ofifo_portB = 1'd1 ;
  assign WILL_FIRE_RL_ofifo_portB = 1'd1 ;

  // inlined wires
  assign ififo_wDataOut$wget =
	     (ififo_rCache[26] && ififo_rCache[25:4] == ififo_rRdPtr) ?
	       ififo_rCache[3:0] :
	       ififo_memory$DOB ;

  // register ififo_rCache
  assign ififo_rCache$D_IN = { 1'd1, ififo_rWrPtr, x3__h811 } ;
  assign ififo_rCache$EN = EN_data_request_put ;

  // register ififo_rRdPtr
  assign ififo_rRdPtr$D_IN = x__h996 ;
  assign ififo_rRdPtr$EN = CAN_FIRE_RL_feed ;

  // register ififo_rWrPtr
  assign ififo_rWrPtr$D_IN = x__h894 ;
  assign ififo_rWrPtr$EN = EN_data_request_put ;

  // register ofifo_rCache
  assign ofifo_rCache$D_IN = { 1'd1, ofifo_rWrPtr, x3__h1831 } ;
  assign ofifo_rCache$EN = CAN_FIRE_RL_fetch ;

  // register ofifo_rRdPtr
  assign ofifo_rRdPtr$D_IN = x__h2014 ;
  assign ofifo_rRdPtr$EN = EN_data_response_get ;

  // register ofifo_rWrPtr
  assign ofifo_rWrPtr$D_IN = x__h1912 ;
  assign ofifo_rWrPtr$EN = CAN_FIRE_RL_fetch ;

  // submodule ififo_memory
  assign ififo_memory$ADDRA = ififo_rWrPtr[20:0] ;
  assign ififo_memory$ADDRB =
	     CAN_FIRE_RL_feed ? x__h996[20:0] : ififo_rRdPtr[20:0] ;
  assign ififo_memory$DIA = x3__h811 ;
  assign ififo_memory$DIB = 4'b1010 /* unspecified value */  ;
  assign ififo_memory$WEA = EN_data_request_put ;
  assign ififo_memory$WEB = 1'd0 ;
  assign ififo_memory$ENA = 1'b1 ;
  assign ififo_memory$ENB = 1'b1 ;

  // submodule m
  assign m$data_request_put = ififo_wDataOut$wget ;
  assign m$ddr3client_response_put = ddr3client_response_put ;
  assign m$start_put = start_put ;
  assign m$EN_data_request_put = CAN_FIRE_RL_feed ;
  assign m$EN_data_response_get = CAN_FIRE_RL_fetch ;
  assign m$EN_start_put = EN_start_put ;
  assign m$EN_count_get = EN_count_get ;
  assign m$EN_ddr3client_request_get = EN_ddr3client_request_get ;
  assign m$EN_ddr3client_response_put = EN_ddr3client_response_put ;

  // submodule ofifo_memory
  assign ofifo_memory$ADDRA = ofifo_rWrPtr[20:0] ;
  assign ofifo_memory$ADDRB =
	     EN_data_response_get ? x__h2014[20:0] : ofifo_rRdPtr[20:0] ;
  assign ofifo_memory$DIA = x3__h1831 ;
  assign ofifo_memory$DIB = 4'b1010 /* unspecified value */  ;
  assign ofifo_memory$WEA = CAN_FIRE_RL_fetch ;
  assign ofifo_memory$WEB = 1'd0 ;
  assign ofifo_memory$ENA = 1'b1 ;
  assign ofifo_memory$ENB = 1'b1 ;

  // remaining internal signals
  assign x3__h1831 = CAN_FIRE_RL_fetch ? m$data_response_get : 4'd0 ;
  assign x3__h811 = EN_data_request_put ? data_request_put : 4'd0 ;
  assign x__h1912 = ofifo_rWrPtr + 22'd1 ;
  assign x__h2014 = ofifo_rRdPtr + 22'd1 ;
  assign x__h894 = ififo_rWrPtr + 22'd1 ;
  assign x__h996 = ififo_rRdPtr + 22'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ififo_rCache <= `BSV_ASSIGNMENT_DELAY 27'd44739242;
	ififo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 22'd0;
	ififo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 22'd0;
	ofifo_rCache <= `BSV_ASSIGNMENT_DELAY 27'd44739242;
	ofifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 22'd0;
	ofifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 22'd0;
      end
    else
      begin
        if (ififo_rCache$EN)
	  ififo_rCache <= `BSV_ASSIGNMENT_DELAY ififo_rCache$D_IN;
	if (ififo_rRdPtr$EN)
	  ififo_rRdPtr <= `BSV_ASSIGNMENT_DELAY ififo_rRdPtr$D_IN;
	if (ififo_rWrPtr$EN)
	  ififo_rWrPtr <= `BSV_ASSIGNMENT_DELAY ififo_rWrPtr$D_IN;
	if (ofifo_rCache$EN)
	  ofifo_rCache <= `BSV_ASSIGNMENT_DELAY ofifo_rCache$D_IN;
	if (ofifo_rRdPtr$EN)
	  ofifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY ofifo_rRdPtr$D_IN;
	if (ofifo_rWrPtr$EN)
	  ofifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY ofifo_rWrPtr$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ififo_rCache = 27'h2AAAAAA;
    ififo_rRdPtr = 22'h2AAAAA;
    ififo_rWrPtr = 22'h2AAAAA;
    ofifo_rCache = 27'h2AAAAAA;
    ofifo_rRdPtr = 22'h2AAAAA;
    ofifo_rWrPtr = 22'h2AAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDutWrapper

